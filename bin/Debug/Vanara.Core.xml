<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.Core</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.AddAsCtorAttribute">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            An attribute to indicate that the method of the attributed parameter should be added as a constructor of the class or structure of the type
            being annotated. The type must be <c>partial</c> and either a structure or class.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.AddAsMemberAttribute">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            An attribute to indicate that the method of the attributed parameter should be added as a member of the class or structure of the type
            being annotated. The type must be <c>partial</c> and either a structure or class.
            </summary>
            <remarks>
            <para>
            This attribute indicates that the enclosing method can be added to the type of the attributed parameter. This is helpful when exposing
            member methods of handles and safe handles. For example, <c>HEVENT</c> has a number of supporting functions like <c>bool SetEvent([In]
            HEVENT hEvent)</c>. Placing this attribute on the <c>bool SetEvent([In, AddAsMember] HEVENT hEvent)</c> parameter will then add <c>bool
            SetEvent()</c> to the HEVENT structure.
            </para>
            <para>
            If there are supporting classes, like SafeEventHandle for HEVENT, then you can use the alternate parameter of the attribute to indicate
            that class name that should also receive the method (e.g., <c>bool SetEvent([In, AddAsMember(typeof(SafeEventHandle))] HEVENT hEvent)</c>).
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.AdjustAutoMethodNamePatternAttribute">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            <para>
            Applying this attribute to a class or structure will used the supplied regex pattern to replace portions of the auto-generated method names.
            </para>
            </summary>
            <param name="regexMatchPatterns">A sequence of tuples containing the regex pattern to match and the replacement string to use for auto-generated method names.</param>
        </member>
        <member name="M:Vanara.PInvoke.AdjustAutoMethodNamePatternAttribute.#ctor(System.ValueTuple{System.String,System.String}[])">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            <para>
            Applying this attribute to a class or structure will used the supplied regex pattern to replace portions of the auto-generated method names.
            </para>
            </summary>
            <param name="regexMatchPatterns">A sequence of tuples containing the regex pattern to match and the replacement string to use for auto-generated method names.</param>
        </member>
        <member name="M:Vanara.PInvoke.AdjustAutoMethodNamePatternAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdjustAutoMethodNamePatternAttribute"/> class with a regex pattern that will remove all
            matches from auto methods.
            </summary>
            <param name="removePattern">The pattern that removes matching values.</param>
        </member>
        <member name="P:Vanara.PInvoke.AdjustAutoMethodNamePatternAttribute.RegexMatchPatterns">
            <summary>
            A sequence of tuples containing the regex pattern to match and the replacement string to use for auto-generated method names.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DeferAutoMethodToAttribute">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            <para>Applying this attribute to a class or structure will defer the auto-generated methods to the specified type.</para>
            </summary>
            <param name="deferredType">
            The type of the partial class or structure that will host the auto methods. This type must provide an implicit conversion operator to the
            type associated with this attribute.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.DeferAutoMethodToAttribute.#ctor(System.Type)">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            <para>Applying this attribute to a class or structure will defer the auto-generated methods to the specified type.</para>
            </summary>
            <param name="deferredType">
            The type of the partial class or structure that will host the auto methods. This type must provide an implicit conversion operator to the
            type associated with this attribute.
            </param>
        </member>
        <member name="P:Vanara.PInvoke.DeferAutoMethodToAttribute.DeferredType">
            <summary>The type of the partial class or structure that will host the auto methods.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BeginEndEventContext">
             <summary>A disposable context for which a delegate is called at entry and exit.</summary>
             <example>
             This class can be used as follows:
             <code>using (var ctx = new BeginEndEventContext(h =&gt; RegisterForEvents(out h), h =&gt; UnregisterForEvents(h)))
             {
                 // Check to see if begin function succeeded
                 if (!ctx.BeginSucceeded)
                     return;
            
                 // Do some work
             }
             // End function has been called</code></example>
             <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Vanara.PInvoke.BeginEndEventContext.#ctor(System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BeginEndEventContext"/> class.</summary>
            <param name="onBegin">The optional delegate to call when creating the context.</param>
            <param name="onEnd">The optional delegate to call when the context is disposed or goes out of scope.</param>
        </member>
        <member name="M:Vanara.PInvoke.BeginEndEventContext.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BeginEndEventContext"/> class.</summary>
            <param name="onBegin">The optional delegate to call when creating the context.</param>
            <param name="onEnd">The optional delegate to call when the context is disposed or goes out of scope.</param>
        </member>
        <member name="P:Vanara.PInvoke.BeginEndEventContext.BeginSucceeded">
            <summary>Gets the return value of the <c>onBegin</c> delegate.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BeginEndEventContext.EndSucceeded">
            <summary>Gets the return value of the <c>onEnd</c> delegate.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BeginEndEventContext.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BeginEndEventContext.Dispose(System.Boolean)">
            <summary>Releases unmanaged and managed resources.</summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IArrayStruct`1">
            <summary>
            Interface that identifies a structure containing only a 4-byte size field followed by a pointer to an array of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">A marshalable structure.</typeparam>
        </member>
        <member name="T:Vanara.PInvoke.IArrayStructExtensions">
            <summary>Extension methods for <see cref="T:Vanara.PInvoke.IArrayStruct`1"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IArrayStructExtensions.GetArray``1(Vanara.PInvoke.IArrayStruct{``0})">
            <summary>Gets the array from an <see cref="T:Vanara.PInvoke.IArrayStruct`1"/> instance.</summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="ias">The <see cref="T:Vanara.PInvoke.IArrayStruct`1"/> instance.</param>
            <returns>The array contained in the instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IArrayStructMarshaler`1">
            <summary>Allows marshaling of arrays in place of a structure supporting <see cref="T:Vanara.PInvoke.IArrayStruct`1"/>.</summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <seealso cref="T:Vanara.InteropServices.IVanaraMarshaler"/>
        </member>
        <member name="F:Vanara.PInvoke.IArrayStructMarshaler`1.hSz">
            <summary>The header size.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IArrayStructMarshaler`1.GetNativeSize">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.IArrayStructMarshaler`1.MarshalManagedToNative(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.IArrayStructMarshaler`1.MarshalNativeToManaged(System.IntPtr,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1">
            <summary>Provides a generic enumerator over native memory.</summary>
            <typeparam name="T">The type of the element to extract from memory.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="M:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1.#ctor(System.IntPtr,System.Int32,System.Int32,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1"/> class.</summary>
            <param name="ptr">A pointer to the starting address of a specified number of <typeparamref name="T"/> elements in memory.</param>
            <param name="length">The number of <typeparamref name="T"/> elements to be included in the enumeration.</param>
            <param name="prefixBytes">Bytes to skip before reading the first element.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">count</exception>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="P:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator">
            <summary>Provides an enumerator over native memory.</summary>
            <seealso cref="T:System.Collections.IEnumerator"/>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.allocated">
            <summary>The number of allocated bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.count">
            <summary>The number of elements in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.index">
            <summary>The index of the current item. (-2) signifies an error. (-1) means MoveNext has not been called..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.prefix">
            <summary>The number of bytes to skip before reading the first element.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.ptr">
            <summary>A pointer to the starting address of a specified number of <see cref="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.type"/> elements in memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.stSize">
            <summary>The size of <see cref="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.type"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.type">
            <summary>The type of the element to extract from memory.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.#ctor(System.IntPtr,System.Type,System.Int32,System.Int32,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Collections.NativeMemoryEnumerator`1"/> class.</summary>
            <param name="ptr">A pointer to the starting address of a specified number of <paramref name="type"/> elements in memory.</param>
            <param name="type">The type of the element to extract from memory.</param>
            <param name="length">The number of <paramref name="type"/> elements to be included in the enumeration.</param>
            <param name="prefixBytes">Bytes to skip before reading the first element.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">count</exception>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="P:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Collections.UntypedNativeMemoryEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SizingMethod">
            <summary>Specifies the method used to determine the size of a field or array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.Count">
            <summary>Size is determined by the size of the field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.Bytes">
            <summary>Size is determined by the size of the array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.InclNullTerm">
            <summary>Size includes the null terminator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.Query">
            <summary>Size is determined by a query to the field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.QueryResultInReturn">
            <summary>Size is returned as the result of the method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizingMethod.CheckLastError">
            <summary>Size is determined by checking the last error after a query for ERROR_INSUFFICIENT_BUFFER.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SizeDefAttribute">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            Attribute to indicate the size of a string or array field or parameter.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SizeDefAttribute.#ctor(System.String,Vanara.PInvoke.SizingMethod)">
            <summary>
            <note type="implement">This attribute does not yet have an implemented generator.</note>
            Attribute to indicate the size of a string or array field or parameter.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SizeDefAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeDefAttribute"/> class using a fixed size.</summary>
        </member>
        <member name="P:Vanara.PInvoke.SizeDefAttribute.BufferVarName">
            <summary>
            Gets or sets the name of a variable that receives the buffer size. This should only be used when the <see cref="P:Vanara.PInvoke.SizeDefAttribute.RefVarName"/> value
            holds the field or parameter with the count of elements and another variable holds the size of the buffer for all of the array in bytes.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.SizeDefAttribute.Method">
            <summary>Gets the sizing method used to determine the size of an element.</summary>
        </member>
        <member name="P:Vanara.PInvoke.SizeDefAttribute.OutVarName">
            <summary>
            Gets or sets the name of the variable that receives the required size of the field or parameter after a query. This value is
            initialized to the value of <see cref="P:Vanara.PInvoke.SizeDefAttribute.RefVarName"/>.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.SizeDefAttribute.RefVarName">
            <summary>Gets the name of the reference variable.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IgnoreAttribute">
            <summary>Attribute to indicate that a field or parameter should be ignored when generating code.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IgnoreAttribute.#ctor">
            <summary>Attribute to indicate that a field or parameter should be ignored when generating code.</summary>
        </member>
        <member name="T:Vanara.PInvoke.AutoHandleAttribute">
            <summary>
            Attribute to apply to simple struct definition that will generate the code for a full HANDLE.
            </summary>
            <remarks>To use this attribute, apply to a structure that defines the handle name.
            <code lang="cs">
            /// &lt;summary&gt;A handle to a module.&lt;/summary&gt;
            [AutoHandle] // Automatically derives from IHandle
            public partial struct HMODULE { }
            
            /// &lt;summary&gt;A handle to a synchronization event.&lt;/summary&gt;
            [AutoHandle(typeof(ISyncHandle))]
            public partial struct HEVENT
            {
               /// &lt;summary&gt;Sets the signaled state.&lt;/summary&gt;
               public bool SetEvent() => SetEvent(handle);
            }
            </code>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.AutoHandleAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Attribute to apply to simple struct definition that will generate the code for a full HANDLE.
            </summary>
            <remarks>To use this attribute, apply to a structure that defines the handle name.
            <code lang="cs">
            /// &lt;summary&gt;A handle to a module.&lt;/summary&gt;
            [AutoHandle] // Automatically derives from IHandle
            public partial struct HMODULE { }
            
            /// &lt;summary&gt;A handle to a synchronization event.&lt;/summary&gt;
            [AutoHandle(typeof(ISyncHandle))]
            public partial struct HEVENT
            {
               /// &lt;summary&gt;Sets the signaled state.&lt;/summary&gt;
               public bool SetEvent() => SetEvent(handle);
            }
            </code>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.AutoHandleAttribute.BaseInterface">
            <summary>Gets the base interface.</summary>
            <value>The base interface.</value>
        </member>
        <member name="P:Vanara.PInvoke.AutoHandleAttribute.InheritedHandle">
            <summary>Gets the inherited handle.</summary>
            <value>The inherited handle.</value>
        </member>
        <member name="T:Vanara.PInvoke.AutoSafeHandleAttribute">
            <summary>
            Attribute to apply to simple class definition that will generate the code for a full SafeHANDLE
            that will perform a close operation on disposal.
            </summary>
            <remarks>
            To use this attribute, apply to a class that defines the safe handle name.
            <code lang="cs">
            /// &lt;summary&gt;A safe handle to a module.&lt;/summary&gt;
            [AutoSafeHandle(typeof(HMODULE), "FreeLibrary(handle)", typeof(SafeHANDLE))]
            public partial class SafeHMODULE { }
            </code>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.AutoSafeHandleAttribute.#ctor(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Attribute to apply to simple class definition that will generate the code for a full SafeHANDLE
            that will perform a close operation on disposal.
            </summary>
            <remarks>
            To use this attribute, apply to a class that defines the safe handle name.
            <code lang="cs">
            /// &lt;summary&gt;A safe handle to a module.&lt;/summary&gt;
            [AutoSafeHandle(typeof(HMODULE), "FreeLibrary(handle)", typeof(SafeHANDLE))]
            public partial class SafeHMODULE { }
            </code>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.AutoSafeHandleAttribute.BaseSafeHandle">
            <summary>Gets the base safe handle. Defaults to <see cref="T:Vanara.PInvoke.SafeHANDLE"/>.</summary>
            <value>The base safe handle.</value>
        </member>
        <member name="P:Vanara.PInvoke.AutoSafeHandleAttribute.CloseHandleFuncName">
            <summary>
            Gets the name of the close handle function. This should be expressed as a lambda function
            that matches the <see cref="P:Vanara.PInvoke.AutoSafeHandleAttribute.CloseHandleFuncName"/> delegate and uses <c>'handle'</c> to
            represent the <see cref="T:System.IntPtr"/> value passed to the function.
            </summary>
            <value>The name of the close handle function.</value>
        </member>
        <member name="P:Vanara.PInvoke.AutoSafeHandleAttribute.HandleStruct">
            <summary>Gets the handle type that this safe handle holds and disposes.</summary>
            <value>The handle structure.</value>
        </member>
        <member name="P:Vanara.PInvoke.AutoSafeHandleAttribute.InheritedHandle">
            <summary>Gets the inherited handle.</summary>
            <value>The inherited handle.</value>
        </member>
        <member name="T:Vanara.PInvoke.IHandle">
            <summary>Signals that a structure or class holds a HANDLE.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IHandle.DangerousGetHandle">
            <summary>Returns the value of the handle field.</summary>
            <returns>An IntPtr representing the value of the handle field.</returns>
        </member>
        <member name="P:Vanara.PInvoke.IHandle.IsInvalid">
            <summary>Gets a value indicating whether this handle is invalid.</summary>
            <value><see langword="true" /> if this handle is invalid; otherwise, <see langword="false" />.</value>
        </member>
        <member name="T:Vanara.PInvoke.CloseHandleFunc">
            <summary>Delegate for a method that closes a handle and reports success. Used by SafeHandleBase.</summary>
            <param name="handle">The handle.</param>
            <returns><see langword="true"/> if handle was closed or if handle is already closed; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.SafeHANDLE">
            <summary>Base class for all native handles.</summary>
            <seealso cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:Vanara.PInvoke.IHandle"/>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SafeHANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SafeHANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="P:Vanara.PInvoke.SafeHANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_Explicit(Vanara.PInvoke.SafeHANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.SafeHANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The safe handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_LogicalNot(Vanara.PInvoke.SafeHANDLE)">
            <summary>Implements the operator ! which returns <see langword="true"/> if the handle is invalid.</summary>
            <param name="hMem">The <see cref="T:Vanara.PInvoke.SafeHANDLE"/> instance.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_Inequality(Vanara.PInvoke.SafeHANDLE,Vanara.PInvoke.IHandle)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_Inequality(Vanara.PInvoke.SafeHANDLE,System.IntPtr)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_Equality(Vanara.PInvoke.SafeHANDLE,Vanara.PInvoke.IHandle)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.op_Equality(Vanara.PInvoke.SafeHANDLE,System.IntPtr)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.Equals(Vanara.PInvoke.SafeHANDLE)">
            <summary>Determines whether the specified <see cref="T:Vanara.PInvoke.SafeHANDLE"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.PInvoke.SafeHANDLE"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Vanara.PInvoke.SafeHANDLE"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.ReleaseOwnership">
            <summary>Releases the ownership of the underlying handle and returns the current handle.</summary>
            <returns>The value of the current handle.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.InternalReleaseHandle">
            <summary>
            Internal method that actually releases the handle. This is called by <see cref="M:Vanara.PInvoke.SafeHANDLE.ReleaseHandle"/> for valid handles and afterwards
            zeros the handle.
            </summary>
            <returns><c>true</c> to indicate successful release of the handle; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SafeHANDLE.ThrowIfDisposed``1(``0)">
            <summary>Throws an <see cref="T:System.ObjectDisposedException"/> if disposed.</summary>
            <typeparam name="T">A <see cref="T:Vanara.PInvoke.SafeHANDLE"/> instance.</typeparam>
            <param name="h">The handle.</param>
            <returns>The handle if not disposed.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if handle is disposed.</exception>
        </member>
        <member name="T:Vanara.PInvoke.InteropServices.ComEnumString">
            <summary>A COM enumerator for <see cref="T:System.String"/> values. This is used to enumerate the values of a <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/> interface.</summary>
        </member>
        <member name="M:Vanara.PInvoke.InteropServices.ComEnumString.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.InteropServices.ComEnumString"/> class with a sequence of strings.</summary>
            <param name="items">The sequence of strings.</param>
        </member>
        <member name="M:Vanara.PInvoke.InteropServices.ComEnumString.#ctor(System.Runtime.InteropServices.ComTypes.IEnumString)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.InteropServices.ComEnumString"/> class from an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/> instance.</summary>
            <param name="ienum">The <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/> instance.</param>
        </member>
        <member name="P:Vanara.PInvoke.InteropServices.ComEnumString.Count">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.PInvoke.InteropServices.ComEnumString.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.InteropServices.ComEnumString.op_Implicit(System.String[])~Vanara.PInvoke.InteropServices.ComEnumString">
            <summary>Performs an implicit conversion from <see cref="T:System.String"/>[] to <see cref="T:Vanara.PInvoke.InteropServices.ComEnumString"/>.</summary>
            <param name="items">The items.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.InteropServices.ComEnumString.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.SizeT">
            <summary>Managed instance of the SIZE_T type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizeT.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Vanara.PInvoke.SizeT"/>. This property is determined by the maximum bit-size of a pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SizeT.MinValue">
            <summary>Represents the smallest possible value of <see cref="T:Vanara.PInvoke.SizeT"/>. This field is constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SizeT.Zero">
            <summary>Represents the zero value of <see cref="T:Vanara.PInvoke.SizeT"/>. This field is constant.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeT"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.#ctor(System.UInt64)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeT"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.#ctor(System.Void*)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeT"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.PInvoke.SizeT.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.Int16">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.Int16"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.Int32">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.Int32"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.Int64">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.Int64"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.Int16)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.UInt16)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.Int32)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.UInt32)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.Int64)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(System.UInt64)~Vanara.PInvoke.SizeT">
            <summary>Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.UInt16">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.UInt16"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.UInt32">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.UInt32"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Implicit(Vanara.PInvoke.SizeT)~System.UInt64">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.SizeT"/> to <see cref="T:System.UInt64"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Subtraction(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Subtracts two specified <see cref="T:Vanara.PInvoke.SizeT"/> values.</summary>
            <param name="s1">The minuend.</param>
            <param name="s2">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="s2"/> from <paramref name="s1"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_UnaryNegation(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Decrement(Vanara.PInvoke.SizeT)">
            <summary>Decrements the <see cref="T:Vanara.PInvoke.SizeT"/> by 1.</summary>
            <param name="s1">The value to decrement.</param>
            <returns>The value of <paramref name="s1"/> decremented by 1.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Inequality(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether two <see cref="T:Vanara.PInvoke.SizeT"/> instances are not equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is not equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Modulus(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Returns the remainder resulting from dividing two specified <see cref="T:Vanara.PInvoke.SizeT"/> values.</summary>
            <param name="s1">The divident.</param>
            <param name="s2">The divisor.</param>
            <returns>The remainder resulting from dividing <paramref name="s1"/> by <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_BitwiseAnd(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Multiply(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Multiplies two specified <see cref="T:Vanara.PInvoke.SizeT"/> values.</summary>
            <param name="s1">The first value to multiply.</param>
            <param name="s2">The second value to multiply.</param>
            <returns>The result of multiplying <paramref name="s1"/> by <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Division(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Divides two specified <see cref="T:Vanara.PInvoke.SizeT"/> values.</summary>
            <param name="s1">The divident.</param>
            <param name="s2">The divisor.</param>
            <returns>The result of dividing <paramref name="s1"/> by <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_ExclusiveOr(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_OnesComplement(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Addition(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Adds two specified <see cref="T:Vanara.PInvoke.SizeT"/> values.</summary>
            <param name="s1">The first value to add.</param>
            <param name="s2">The second value to add.</param>
            <returns>The result of adding <paramref name="s1"/> and <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_UnaryPlus(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Increment(Vanara.PInvoke.SizeT)">
            <summary>Increments the <see cref="T:Vanara.PInvoke.SizeT"/> by 1.</summary>
            <param name="s1">The value to increment.</param>
            <returns>The value of <paramref name="s1"/> incremented by 1.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_LessThan(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.SizeT"/> is less than another specified <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_LeftShift(Vanara.PInvoke.SizeT,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_LessThanOrEqual(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.SizeT"/> is less than or equal to another specified <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_Equality(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether two <see cref="T:Vanara.PInvoke.SizeT"/> instances are equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_GreaterThan(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.SizeT"/> is greater than another specified <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_GreaterThanOrEqual(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.SizeT"/> is greater than or equal to another specified <see cref="T:Vanara.PInvoke.SizeT"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_RightShift(Vanara.PInvoke.SizeT,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.op_UnsignedRightShift(Vanara.PInvoke.SizeT,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.TryParse(System.String,System.IFormatProvider,Vanara.PInvoke.SizeT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Vanara.PInvoke.SizeT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Vanara.PInvoke.SizeT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Vanara.PInvoke.SizeT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.CompareTo(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.Equals(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.SizeT.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.ArrayPointer`1">
            <summary>A pointer to an array of entries in a structure.</summary>
            <typeparam name="T">The structure that is the element of the array.</typeparam>
        </member>
        <member name="P:Vanara.PInvoke.ArrayPointer`1.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <typeparamref name="T"/> value at the specified index.</para>
            <note type="warning">There is no range checking with this property. If <paramref name="index"/> is not the range of memory allocated
            to this pointer, the results are unpredictable and may result in a buffer overrun.</note>
            </summary>
            <param name="index">The index of the element.</param>
            <value>The <typeparamref name="T"/> value to assign to the <paramref name="index"/> location in the array.</value>
            <returns>The <typeparamref name="T"/> value at the location.</returns>
        </member>
        <member name="P:Vanara.PInvoke.ArrayPointer`1.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.AsReadOnlySpan(Vanara.PInvoke.SizeT)">
            <summary>Gets a <see cref="T:System.ReadOnlySpan`1"/> over the pointer.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> over the pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.AsSpan(Vanara.PInvoke.SizeT)">
            <summary>Gets a writable <see cref="T:System.Span`1"/> over the pointer.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A writable <see cref="T:System.Span`1"/> over the pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.ToArray(Vanara.PInvoke.SizeT)">
            <summary>Converts this pointer to a copied array of <typeparamref name="T"/> elements.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A copied array of <typeparamref name="T"/> elements.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.op_Implicit(System.IntPtr)~Vanara.PInvoke.ArrayPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.ArrayPointer`1"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.ArrayPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.ArrayPointer`1"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.op_Explicit(Vanara.PInvoke.ArrayPointer{`0})~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="ap">The <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.op_Implicit(Vanara.PInvoke.ArrayPointer{`0})~`0*">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> to <typeparamref name="T"/>*.</summary>
            <param name="ap">The <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.op_Implicit(`0*)~Vanara.PInvoke.ArrayPointer{`0}">
            <summary>Performs an implicit conversion from <typeparamref name="T"/>* to <see cref="T:Vanara.PInvoke.ArrayPointer`1"/>.</summary>
            <param name="ap">The <typeparamref name="T"/>*.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ArrayPointer`1.DestructiveAssign(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para>Destructively assigns a created pointer to allocated memory containing <paramref name="items"/>.</para>
            <note type="warning">This function will overwrite the value of the underlying pointer without releasing any allocated memory already
            assigned to it.</note>
            </summary>
            <param name="items">The items to allocate to memory and assign to this pointer.</param>
            <returns>A reference to the allocated memory behind <paramref name="items"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IUnknownPointer`1">
            <summary>This structure is used to hold a reference to an IUnknown interface pointer.</summary>
            <typeparam name="T">The type of the interface.</typeparam>
        </member>
        <member name="M:Vanara.PInvoke.IUnknownPointer`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IUnknownPointer`1"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Vanara.PInvoke.IUnknownPointer`1.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.IUnknownPointer`1.Value">
            <summary>
            <para>Gets the value as an interface.</para>
            <note type="warning">This must only be used with COM interfaces.</note>
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.PInvoke.IUnknownPointer`1.op_Implicit(System.IntPtr)~Vanara.PInvoke.IUnknownPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.IUnknownPointer`1"/>.</summary>
            <param name="p">The IUnknown interface pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IUnknownPointer`1.op_Implicit(Vanara.PInvoke.IUnknownPointer{`0})~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IUnknownPointer`1"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.LPCSTRArrayPointer">
            <summary>A pointer to an array of ANSI string pointers as a field in a structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.LPCSTRArrayPointer.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.LPCSTRArrayPointer.Item(System.Int32)">
            <summary>
            <para>Gets a copy of the <see cref="T:System.String"/> value at the specified index.</para>
            <note type="warning">There is no range checking with this property. If <paramref name="index"/> is not the range of memory allocated
            to this pointer, the results are unpredictable and may result in a buffer overrun.</note>
            </summary>
            <param name="index">The index of the element.</param>
            <value>The <see cref="T:System.String"/> value to assign to the <paramref name="index"/> location in the array.</value>
            <returns>The <see cref="T:System.String"/> value at the location.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCSTRArrayPointer.ToArray(Vanara.PInvoke.SizeT)">
            <summary>Converts this pointer to a copied array of <see cref="T:System.String"/> elements.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A copied array of <see cref="T:System.String"/> elements.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCSTRArrayPointer.op_Implicit(System.IntPtr)~Vanara.PInvoke.LPCSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCSTRArrayPointer.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.LPCSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.LPCTSTRArrayPointer">
            <summary>A pointer to an array of platform specific string pointers as a field in a structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.LPCTSTRArrayPointer.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.LPCTSTRArrayPointer.Item(System.Int32)">
            <summary>
            <para>Gets a copy of the <see cref="T:System.String"/> value at the specified index.</para>
            <note type="warning">There is no range checking with this property. If <paramref name="index"/> is not the range of memory allocated
            to this pointer, the results are unpredictable and may result in a buffer overrun.</note>
            </summary>
            <param name="index">The index of the element.</param>
            <value>The <see cref="T:System.String"/> value to assign to the <paramref name="index"/> location in the array.</value>
            <returns>The <see cref="T:System.String"/> value at the location.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCTSTRArrayPointer.ToArray(Vanara.PInvoke.SizeT)">
            <summary>Converts this pointer to a copied array of <see cref="T:System.String"/> elements.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A copied array of <see cref="T:System.String"/> elements.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCTSTRArrayPointer.op_Implicit(System.IntPtr)~Vanara.PInvoke.LPCTSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCTSTRArrayPointer.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.LPCTSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.LPCWSTRArrayPointer">
            <summary>A pointer to an array of Unicode (wide) string pointers as a field in a structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.LPCWSTRArrayPointer.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.LPCWSTRArrayPointer.Item(System.Int32)">
            <summary>
            <para>Gets a copy of the <see cref="T:System.String"/> value at the specified index.</para>
            <note type="warning">There is no range checking with this property. If <paramref name="index"/> is not the range of memory allocated
            to this pointer, the results are unpredictable and may result in a buffer overrun.</note>
            </summary>
            <param name="index">The index of the element.</param>
            <value>The <see cref="T:System.String"/> value to assign to the <paramref name="index"/> location in the array.</value>
            <returns>The <see cref="T:System.String"/> value at the location.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCWSTRArrayPointer.ToArray(Vanara.PInvoke.SizeT)">
            <summary>Converts this pointer to a copied array of <see cref="T:System.String"/> elements.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A copied array of <see cref="T:System.String"/> elements.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCWSTRArrayPointer.op_Implicit(System.IntPtr)~Vanara.PInvoke.LPCWSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.LPCWSTRArrayPointer.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.LPCWSTRArrayPointer">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.LPCSTRArrayPointer"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ManagedStructPointer`1">
            <summary>A pointer to a managed structure.</summary>
            <typeparam name="T">The structure type.</typeparam>
        </member>
        <member name="P:Vanara.PInvoke.ManagedStructPointer`1.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ManagedStructPointer`1.AsRef">
            <summary>Gets a reference to a structure based on this allocated memory.</summary>
            <returns>A referenced structure.</returns>
        </member>
        <member name="P:Vanara.PInvoke.ManagedStructPointer`1.Value">
            <summary>Converts this pointer to a copied structure. If pointer has no value, <c>null</c> is returned.</summary>
            <returns>The converted structure or <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedStructPointer`1.op_Implicit(System.IntPtr)~Vanara.PInvoke.ManagedStructPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.StructPointer`1"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedStructPointer`1.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.ManagedStructPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.StructPointer`1"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedStructPointer`1.op_Explicit(Vanara.PInvoke.ManagedStructPointer{`0})~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.ManagedStructPointer`1"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The pointer instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedStructPointer`1.DestructiveAssign(System.Nullable{`0})">
            <summary>
            <para>Destructively assigns a created pointer to allocated memory containing <paramref name="item"/>.</para>
            <note type="warning">This function will overwrite the value of the underlying pointer without releasing any allocated memory already
            assigned to it.</note>
            </summary>
            <param name="item">The item to allocate to memory and assign to this pointer.</param>
            <returns>A reference to the allocated memory behind <paramref name="item"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.StructPointer`1">
            <summary>A pointer to a structure.</summary>
            <typeparam name="T">The structure type.</typeparam>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.#ctor(System.Nullable{`0}@,Vanara.InteropServices.SafeAllocatedMemoryHandle@)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.StructPointer`1"/> struct.</summary>
            <param name="value">The value.</param>
            <param name="mem">The memory.</param>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.#ctor(`0@)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.StructPointer`1"/> struct.</summary>
            <param name="value">The value's reference.</param>
        </member>
        <member name="P:Vanara.PInvoke.StructPointer`1.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.StructPointer`1.Value">
            <summary>Gets a reference to a structure based on this allocated memory.</summary>
            <summary>Converts this pointer to a copied structure. If pointer has no value, <c>null</c> is returned.</summary>
            <returns>The converted structure or <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.AsRef">
            <returns>A referenced structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.DestructiveAssign(System.Nullable{`0})">
            <summary>
            <para>Destructively assigns a created pointer to allocated memory containing <paramref name="item"/>.</para>
            <note type="warning">This function will overwrite the value of the underlying pointer without releasing any allocated memory already
            assigned to it.</note>
            </summary>
            <param name="item">The item to allocate to memory and assign to this pointer.</param>
            <returns>A reference to the allocated memory behind <paramref name="item"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.op_Implicit(System.IntPtr)~Vanara.PInvoke.StructPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.StructPointer`1"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.StructPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.StructPointer`1"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.op_Implicit(Vanara.PInvoke.StructPointer{`0})~`0*">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.StructPointer`1"/> to <typeparamref name="T"/>*.</summary>
            <param name="ap">The <see cref="T:Vanara.PInvoke.StructPointer`1"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.op_Implicit(`0*)~Vanara.PInvoke.StructPointer{`0}">
            <summary>Performs an implicit conversion from <typeparamref name="T"/>* to <see cref="T:Vanara.PInvoke.StructPointer`1"/>.</summary>
            <param name="ap">The <typeparamref name="T"/>*.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.StructPointer`1.op_Explicit(Vanara.PInvoke.StructPointer{`0})~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.StructPointer`1"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The pointer instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ManagedArrayPointer`1">
            <summary>A pointer to an array of entries in a structure.</summary>
            <typeparam name="T">The managed structure that is the element of the array.</typeparam>
        </member>
        <member name="P:Vanara.PInvoke.ManagedArrayPointer`1.Item(System.Int32)">
            <summary>
            <para>Gets a copy of the <typeparamref name="T"/> value at the specified index.</para>
            <note type="warning">There is no range checking with this property. If <paramref name="index"/> is not the range of memory allocated
            to this pointer, the results are unpredictable and may result in a buffer overrun.</note>
            </summary>
            <param name="index">The index of the element.</param>
            <value>The <typeparamref name="T"/> value to assign to the <paramref name="index"/> location in the array.</value>
            <returns>The <typeparamref name="T"/> value at the location.</returns>
        </member>
        <member name="P:Vanara.PInvoke.ManagedArrayPointer`1.IsNull">
            <summary>Gets a value indicating whether this instance is null.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ManagedArrayPointer`1.ToArray(Vanara.PInvoke.SizeT)">
            <summary>Converts this pointer to a copied array of <typeparamref name="T"/> elements.</summary>
            <param name="length">The number of elements allocated to this pointer.</param>
            <returns>A copied array of <typeparamref name="T"/> elements.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedArrayPointer`1.op_Implicit(System.IntPtr)~Vanara.PInvoke.ManagedArrayPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.ManagedArrayPointer`1"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedArrayPointer`1.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandle)~Vanara.PInvoke.ManagedArrayPointer{`0}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to <see cref="T:Vanara.PInvoke.ManagedArrayPointer`1"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> to assign to this pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedArrayPointer`1.op_Explicit(Vanara.PInvoke.ManagedArrayPointer{`0})~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.ManagedArrayPointer`1"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The pointer instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ManagedArrayPointer`1.DestructiveAssign(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para>Destructively assigns a created pointer to allocated memory containing <paramref name="items"/>.</para>
            <note type="warning">This function will overwrite the value of the underlying pointer without releasing any allocated memory already
            assigned to it.</note>
            </summary>
            <param name="items">The items to allocate to memory and assign to this pointer.</param>
            <returns>A reference to the allocated memory behind <paramref name="items"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.SizeFieldNameAttribute">
            <summary>
            Should be used with <see cref="T:Vanara.PInvoke.ManagedArrayPointer`1"/> or <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> to indicate which field within the same
            structure contains the size of the array.
            </summary>
            <seealso cref="T:System.Attribute"/>
            <remarks>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeFieldNameAttribute"/> class.</remarks>
            <param name="FieldName">Name of the field that contains the size of the array.</param>
        </member>
        <member name="M:Vanara.PInvoke.SizeFieldNameAttribute.#ctor(System.String)">
            <summary>
            Should be used with <see cref="T:Vanara.PInvoke.ManagedArrayPointer`1"/> or <see cref="T:Vanara.PInvoke.ArrayPointer`1"/> to indicate which field within the same
            structure contains the size of the array.
            </summary>
            <seealso cref="T:System.Attribute"/>
            <remarks>Initializes a new instance of the <see cref="T:Vanara.PInvoke.SizeFieldNameAttribute"/> class.</remarks>
            <param name="FieldName">Name of the field that contains the size of the array.</param>
        </member>
        <member name="P:Vanara.PInvoke.SizeFieldNameAttribute.FieldName">
            <summary>Gets the name of the field that contains the size of the array.</summary>
            <value>The name of the field that contains the size of the array.</value>
        </member>
        <member name="T:Vanara.PInvoke.SizeFieldNameAttributeExt">
            <summary>Extension methods for <see cref="T:Vanara.PInvoke.SizeFieldNameAttribute"/> to get the size of an array pointer within a structure via attribute.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SizeFieldNameAttributeExt.GetFieldSizeViaAttribute``1(``0,System.Reflection.FieldInfo)">
            <summary>Gets the field size of an array pointer within a structure via attribute.</summary>
            <typeparam name="T">The type of the structure.</typeparam>
            <param name="structInstance">The structure instance.</param>
            <param name="fi">The <see cref="T:System.Reflection.FieldInfo"/> of the array pointer.</param>
            <returns>
            The size of the array indicated by the referenced field, if available, or <see langword="null"/> if no attribute was found.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SizeFieldNameAttributeExt.GetFieldSizeViaAttribute``1(``0,System.String)">
            <summary>Gets the field size of an array pointer within a structure via attribute.</summary>
            <typeparam name="T">The type of the structure.</typeparam>
            <param name="structInstance">The structure instance.</param>
            <param name="fieldName">The name of the array pointer field.</param>
            <returns>
            The size of the array indicated by the referenced field, if available, or <see langword="null"/> if no attribute was found.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.time_t">
            <summary>Managed instance of the time_t type.</summary>
        </member>
        <member name="M:Vanara.PInvoke.time_t.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.time_t"/> struct.</summary>
            <param name="ticks">
            The number of seconds since the start of the epoch: midnight UTC of January 1, 1970 (not counting leap seconds).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.time_t.#ctor(System.DateTime)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.time_t"/> struct.</summary>
            <param name="dateTime">The date.</param>
        </member>
        <member name="F:Vanara.PInvoke.time_t.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Vanara.PInvoke.time_t"/>. This property is determined by the maximum bit-size of a pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.time_t.MinValue">
            <summary>Represents the smallest possible value of <see cref="T:Vanara.PInvoke.time_t"/>. This field is constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.time_t.Zero">
            <summary>Represents the zero value of <see cref="T:Vanara.PInvoke.time_t"/>. This field is constant.</summary>
        </member>
        <member name="P:Vanara.PInvoke.time_t.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Explicit(System.Int64)~Vanara.PInvoke.time_t">
            <summary>Performs an explicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Explicit(Vanara.PInvoke.time_t)~System.Int64">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.time_t"/> to <see cref="T:System.Int64"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Implicit(System.DateTime)~Vanara.PInvoke.time_t">
            <summary>Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.time_t"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Implicit(Vanara.PInvoke.time_t)~System.DateTime">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.time_t"/> to <see cref="T:System.DateTime"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Inequality(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether two <see cref="T:Vanara.PInvoke.time_t"/> instances are not equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is not equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_LessThan(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.time_t"/> is less than another specified <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_LessThanOrEqual(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.time_t"/> is less than or equal to another specified <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_Equality(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether two <see cref="T:Vanara.PInvoke.time_t"/> instances are equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_GreaterThan(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.time_t"/> is greater than another specified <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.op_GreaterThanOrEqual(Vanara.PInvoke.time_t,Vanara.PInvoke.time_t)">
            <summary>Indicates whether a specified <see cref="T:Vanara.PInvoke.time_t"/> is greater than or equal to another specified <see cref="T:Vanara.PInvoke.time_t"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.time_t.CompareTo(Vanara.PInvoke.time_t)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.CompareTo(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.Equals(Vanara.PInvoke.time_t)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.Equals(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.time_t.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Arg_BufferTooSmall">
            <summary>
              Looks up a localized string similar to Not enough space available in the buffer..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_InvalidOffLen">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_NotEnoughBytesToRead">
            <summary>
              Looks up a localized string similar to There are not enough bytes remaining in the accessor to read at this position..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_NotEnoughBytesToWrite">
            <summary>
              Looks up a localized string similar to There are not enough bytes remaining in the accessor to write at this position..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_OffsetAndCapacityOutOfBounds">
            <summary>
              Looks up a localized string similar to Offset and capacity were greater than the size of the view..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_OffsetAndLengthOutOfBounds">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.Argument_UnmanagedMemAccessorWrapAround">
            <summary>
              Looks up a localized string similar to The UnmanagedMemoryAccessor capacity and offset would wrap around the high end of the address space..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ArgumentNull_Buffer">
            <summary>
              Looks up a localized string similar to Buffer cannot be null..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ArgumentOutOfRange_AddressSpace">
            <summary>
              Looks up a localized string similar to The number of bytes cannot exceed the virtual address space on a 32 bit machine..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ArgumentOutOfRange_PositionLessThanCapacityRequired">
            <summary>
              Looks up a localized string similar to The position may not be greater or equal to the capacity of the accessor..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ArgumentOutOfRange_UIntPtrMax_1">
            <summary>
              Looks up a localized string similar to The length of the buffer must be less than the maximum UIntPtr value for your platform..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.InvalidOperation_CalledTwice">
            <summary>
              Looks up a localized string similar to The method cannot be called twice on the same instance..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.InvalidOperation_MustCallInitialize">
            <summary>
              Looks up a localized string similar to You must call Initialize on this object instance before using it..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.NotSupported_Reading">
            <summary>
              Looks up a localized string similar to Accessor does not support reading..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.NotSupported_Writing">
            <summary>
              Looks up a localized string similar to Accessor does not support writing..
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Properties.Resources.ObjectDisposed_ViewAccessorClosed">
            <summary>
              Looks up a localized string similar to Cannot access a closed accessor..
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.RefEnumerator`1">
            <summary>Enumerator with zero copy access using ref.</summary>
            <typeparam name="T">The structure type.</typeparam>
        </member>
        <member name="M:Vanara.PInvoke.RefEnumerator`1.#ctor(`0*,System.Int32)">
            <summary>Create RefEnumerator.</summary>
            <param name="arrayPtr">Pointer to unmanaged array</param>
            <param name="count">Number of elements in the <paramref name="arrayPtr"/></param>
        </member>
        <member name="P:Vanara.PInvoke.RefEnumerator`1.Count">
            <summary>Gets the number of elements available.</summary>
            <value>The number of elements available.</value>
        </member>
        <member name="P:Vanara.PInvoke.RefEnumerator`1.Current">
            <summary>Return current element.</summary>
        </member>
        <member name="P:Vanara.PInvoke.RefEnumerator`1.Item(System.Int32)">
            <summary>Gets the <typeparamref name="T"/> at the specified index.</summary>
            <value>The <typeparamref name="T"/>.</value>
            <param name="index">The index.</param>
            <returns>A reference to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.RefEnumerator`1.MoveNext">
            <summary>Move to next element.</summary>
        </member>
        <member name="M:Vanara.PInvoke.RefEnumerator`1.Reset">
            <summary>Resets this iterator.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SuppressAutoGenAttribute">
            <summary>An attribute that can be applied to a code element to suppress the automatic generation of P/Invoke methods for that element.</summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="T:Vanara.ByteSizeFormatter">
            <summary>
            A custom formatter for byte sizes (things like files, network bandwidth, etc.) that will automatically determine the best abbreviation.
            </summary>
        </member>
        <member name="F:Vanara.ByteSizeFormatter.Instance">
            <summary>A static instance of <see cref="T:Vanara.ByteSizeFormatter"/>.</summary>
        </member>
        <member name="M:Vanara.ByteSizeFormatter.TryParse(System.String,System.Int64@)">
            <summary>
            Converts the string representation of a byte size to its 64-bit signed integer equivalent. A return value indicates whether the
            conversion succeeded.
            </summary>
            <param name="input">A string containing a byte size to convert.</param>
            <param name="bytes">
            When this method returns, contains the 64-bit signed integer value equivalent of the value contained in <paramref name="input"/>, if
            the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="input"/> parameter is null or
            Empty, or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.
            </param>
            <returns><see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.ByteSizeFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific
            formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="T:Vanara.Collections.EnumerableEqualityComparer`1">
            <summary>
            Checks the linear equality of two enumerated lists. For lists to be equal, they must have the same number of elements and each index
            must hold the same value in each list.
            </summary>
            <typeparam name="T">The element type in the list.</typeparam>
        </member>
        <member name="M:Vanara.Collections.EnumerableEqualityComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the specified lists are equal.</summary>
            <param name="first">The first list of type T to compare.</param>
            <param name="second">The second list of type T to compare.</param>
            <returns><see langword="true"/> if the two lists are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Collections.EnumerableEqualityComparer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="list">The Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:Vanara.Collections.EventedList`1">
            <summary>A generic list that provides event for changes to the list. This is an alternative to ObservableCollection that provides distinct events for each action (add, insert, remove, changed).</summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1"/> class.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1"/> class that contains elements copied from the specified collection.</summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1"/> class providing an initial capacity.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="E:Vanara.Collections.EventedList`1.ItemAdded">
            <summary>Occurs when an item has been added.</summary>
        </member>
        <member name="E:Vanara.Collections.EventedList`1.ItemChanged">
            <summary>Occurs when an item has changed.</summary>
        </member>
        <member name="E:Vanara.Collections.EventedList`1.ItemDeleted">
            <summary>Occurs when an item has been deleted.</summary>
        </member>
        <member name="E:Vanara.Collections.EventedList`1.ItemPropertyChanged">
            <summary>Occurs when an item's property value has been changed.</summary>
        </member>
        <member name="E:Vanara.Collections.EventedList`1.Reset">
            <summary>Occurs when the list has been reset.</summary>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.Capacity">
            <summary>Gets or sets the capacity.</summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#IList#IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#IList#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Object"/> at the specified index.</summary>
            <value></value>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the range of items to the list.</summary>
            <param name="collection">The collection of items to add.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.AddRange(`0[])">
            <summary>Adds the range of items to the list.</summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.AsReadOnly">
            <summary>Determines if the collection is read-only.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:Vanara.Collections.EventedList`1"/> for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:Vanara.Collections.EventedList`1"/>, if item is found; otherwise, a negative number that is the bitwise
            complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:Vanara.Collections.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:Vanara.Collections.EventedList`1"/> for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:Vanara.Collections.EventedList`1"/>, if item is found; otherwise, a negative number that is the bitwise
            complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:Vanara.Collections.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted <see cref="T:Vanara.Collections.EventedList`1"/> for an element using the specified comparer and returns the zero-based index
            of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:Vanara.Collections.EventedList`1"/>, if item is found; otherwise, a negative number that is the bitwise
            complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:Vanara.Collections.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>Converts all.</summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The
            <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or- <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref
            name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <c>T</c> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>Copies to.</summary>
            <param name="index">The index.</param>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Exists(System.Predicate{`0})">
            <summary>Determines if an item matches the specified predicate.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Find(System.Predicate{`0})">
            <summary>Finds the specified match.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindAll(System.Predicate{`0})">
            <summary>Finds all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindIndex(System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindLast(System.Predicate{`0})">
            <summary>Finds the last.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindLastIndex(System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ForEach(System.Action{`0})">
            <summary>Performs an action on each item in the collection.</summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.GetRange(System.Int32,System.Int32)">
            <summary>Gets the range of items and returns then in another list.</summary>
            <param name="index">The starting index.</param>
            <param name="count">The count of items to place in the list.</param>
            <returns>An <see cref="T:Vanara.Collections.EventedList`1"/> with the requested items.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.IndexOf(`0,System.Int32)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Inserts the range.</summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.LastIndexOf(`0)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.LastIndexOf(`0,System.Int32)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if
            <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Removes the range.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Reverse">
            <summary>Reverses this instance.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Reverse(System.Int32,System.Int32)">
            <summary>Reverses the specified index.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Sort">
            <summary>Sorts this instance.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified comparer.</summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified index.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ToArray">
            <summary>Toes the array.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.TrimExcess">
            <summary>Trims the excess.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.TrueForAll(System.Predicate{`0})">
            <summary>Trues for all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IList#Add(System.Object)">
            <summary>Adds the specified item.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether [contains] [the specified item].</summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies list values to an array.</summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The index of the array at which to start copying into.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts the specified index.</summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the specified item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.OnItemAdded(System.Int32,`0)">
            <summary>Called when [insert].</summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.OnItemChanged(System.Int32,`0,`0)">
            <summary>Called when [set].</summary>
            <param name="index">The index.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.OnItemDeleted(System.Int32,`0)">
            <summary>Called when [remove].</summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.OnItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Called when [item property changed].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.OnReset">
            <summary>Called when [clear].</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.IsCompatibleObject(System.Object)">
            <summary>Determines whether [is compatible object] [the specified value].</summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is compatible object] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.VerifyValueType(System.Object)">
            <summary>Verifies the type of the value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.CheckIndex(System.Int32,System.String)">
            <summary>Checks the index to ensure it is valid and in the list.</summary>
            <param name="idx">The index to validate.</param>
            <param name="varName">Name of the variable this is being checked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Called with the index is out of range.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.CheckRange(System.Int32,System.Int32)">
            <summary>Checks the range.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.EnsureCapacity(System.Int32)">
            <summary>Ensures the capacity.</summary>
            <param name="min">The min.</param>
        </member>
        <member name="T:Vanara.Collections.EventedList`1.Enumerator">
            <summary>Enumerates over the <see cref="T:Vanara.Collections.EventedList`1"/>.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Enumerator.#ctor(Vanara.Collections.EventedList{`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1.Enumerator"/> struct.</summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.Enumerator.Current">
            <summary>Gets the current.</summary>
            <value>The current.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the current.</summary>
            <value>The current.</value>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Enumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Vanara.Collections.EventedList`1.ListChangedEventArgs`1">
            <summary>An <see cref="T:System.EventArgs"/> structure passed to events generated by an <see cref="T:Vanara.Collections.EventedList`1"/>.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
            <param name="item">The item that has changed.</param>
            <param name="itemIndex">Index of the changed item.</param>
        </member>
        <member name="M:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32,`1)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
            <param name="item">The item that has changed.</param>
            <param name="itemIndex">Index of the changed item.</param>
            <param name="oldItem">The old item when an item has changed.</param>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.Item">
            <summary>Gets the item that has changed.</summary>
            <value>The item.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.ItemIndex">
            <summary>Gets the index of the item.</summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.ListChangedType">
            <summary>Gets the type of change for the list.</summary>
            <value>The type of change for the list.</value>
        </member>
        <member name="P:Vanara.Collections.EventedList`1.ListChangedEventArgs`1.OldItem">
            <summary>Gets the item's previous value.</summary>
            <value>The old item.</value>
        </member>
        <member name="T:Vanara.Collections.IHistory`1">
            <summary>Provides an interface for a history of items.</summary>
        </member>
        <member name="P:Vanara.Collections.IHistory`1.CanSeekBackward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.IHistory`1.SeekBackward"/>.</summary>
            <value><see langword="true"/> if this instance can seek backward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Collections.IHistory`1.CanSeekForward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.IHistory`1.SeekForward"/>.</summary>
            <value><see langword="true"/> if this instance can seek forward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Collections.IHistory`1.Count">
            <summary>Gets the items in the history.</summary>
            <value>The number of items.</value>
        </member>
        <member name="P:Vanara.Collections.IHistory`1.Current">
            <summary>Gets the value at a pointer within the history that represents the current item.</summary>
            <value>The current item.</value>
            <exception cref="T:System.InvalidOperationException">There are no items in the history.</exception>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.Add(`0,System.Boolean)">
            <summary>Adds the specified item as the last history entry and sets the <see cref="P:Vanara.Collections.IHistory`1.Current"/> property to it's value.</summary>
            <param name="item">The item to add to the history.</param>
            <param name="removeForwardItems"><see langword="true" /> indicates to remove all items forward of the current pointer; <see langword="false"/> leaves the history intact.</param>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.Clear">
            <summary>Clears the history of all items.</summary>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.GetItems(System.Int32,System.IO.SeekOrigin)">
            <summary>Gets a specified number of items starting at a location within the history.</summary>
            <param name="count">The maximum number of items to retrieve. The actual number of items returned may be less if not avaialable.</param>
            <param name="origin">The reference point within the history at which to start fetching items.</param>
            <returns>A read-only list of items.</returns>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks through the history a given number of items starting at a known location within the history. This updates the <see
            cref="P:Vanara.Collections.IHistory`1.Current"/> property.
            </summary>
            <param name="count">The number of items to move. This value can be negative to search backwards or positive to search forwards.</param>
            <param name="origin">The reference point within the history at which to start seeking.</param>
            <returns>The value at the new current pointer position.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot seek on an empty history.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of items to move cannot be accomplished given the number of items in the history and the seek origin.
            </exception>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.SeekBackward">
            <summary>Seeks one position backwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Collections.IHistory`1.SeekForward">
            <summary>Seeks one position forwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="T:Vanara.Collections.History`1">
            <summary>Provides a history of items that lives efficiently in memory and whose size can change easily.</summary>
            <typeparam name="T">The type of item to hold.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:Vanara.Collections.History`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.History`1"/> class with a capacity of 256 items.</summary>
        </member>
        <member name="M:Vanara.Collections.History`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.History`1"/> class with a variable capacity.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Vanara.Collections.History`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.History`1"/> class with a initial list of items.</summary>
            <param name="items">The items with which to initialize the history.</param>
        </member>
        <member name="E:Vanara.Collections.History`1.CollectionChanged">
            <summary>Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.</summary>
        </member>
        <member name="E:Vanara.Collections.History`1.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Collections.History`1.CanSeekBackward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.History`1.SeekBackward"/>.</summary>
            <value><see langword="true"/> if this instance can seek backward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Collections.History`1.CanSeekForward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.History`1.SeekForward"/>.</summary>
            <value><see langword="true"/> if this instance can seek forward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Collections.History`1.Capacity">
            <summary>Gets or sets the capacity of the history, or the maximum number of items that it will hold.</summary>
            <value>The history's capacity.</value>
        </member>
        <member name="P:Vanara.Collections.History`1.Current">
            <summary>Gets the value at a pointer within the history that represents the current item.</summary>
            <value>The current item.</value>
            <exception cref="T:System.InvalidOperationException">There are no items in the history.</exception>
        </member>
        <member name="P:Vanara.Collections.History`1.Count">
            <summary>Gets the items in the history.</summary>
            <value>The number of items.</value>
        </member>
        <member name="M:Vanara.Collections.History`1.Add(`0,System.Boolean)">
            <summary>
            Adds the specified item as the last history entry and sets the <see cref="P:Vanara.Collections.History`1.Current" /> property to it's value.
            </summary>
            <param name="item">The item to add to the history.</param>
            <param name="removeForwardItems"><see langword="true" /> indicates to remove all items forward of the current pointer; <see langword="false"/> leaves the history intact.</param>
        </member>
        <member name="M:Vanara.Collections.History`1.Clear">
            <summary>Clears the history of all items.</summary>
        </member>
        <member name="M:Vanara.Collections.History`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.History`1.GetItems(System.Int32,System.IO.SeekOrigin)">
            <summary>Gets a specified number of items starting at a location within the history.</summary>
            <param name="count">The maximum number of items to retrieve. The actual number of items returned may be less if not avaialable.</param>
            <param name="origin">The reference point within the history at which to start fetching items.</param>
            <returns>A read-only list of items.</returns>
        </member>
        <member name="M:Vanara.Collections.History`1.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks through the history a given number of items starting at a known location within the history. This updates the <see
            cref="P:Vanara.Collections.History`1.Current"/> property.
            </summary>
            <param name="count">The number of items to move. This value can be negative to search backwards or positive to search forwards.</param>
            <param name="origin">The reference point within the history at which to start seeking.</param>
            <returns>The value at the new current pointer position.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot seek on an empty history.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of items to move cannot be accomplished given the number of items in the history and the seek origin.
            </exception>
        </member>
        <member name="M:Vanara.Collections.History`1.SeekBackward">
            <summary>Seeks one position backwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Collections.History`1.SeekForward">
            <summary>Seeks one position forwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Collections.History`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.History`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:Vanara.Collections.History`1.CollectionChanged"/> event.</summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vanara.Collections.History`1.OnPropertyChanged(System.String)">
            <summary>Raises the <see cref="E:Vanara.Collections.History`1.PropertyChanged"/> event.</summary>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="T:Vanara.Collections.SparseArray`1">
            <summary>A sparse array based on a dictionary.</summary>
        </member>
        <member name="F:Vanara.Collections.SparseArray`1.hashtable">
            <summary>Base hash table</summary>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.SparseArray`1"/> class.</summary>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.Contains(`0)">
            <summary>Determines whether the array contains the specified value.</summary>
            <param name="item">The value.</param>
            <returns><c>true</c> if the array contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.IndexOf(`0)">
            <summary>Gets the index of the specified item, or returns -1 if item is not in the array.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:Vanara.Collections.SparseArray`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The index of the element.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see
            cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or- <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <c>T</c> cannot be cast automatically
            to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Vanara.Collections.SparseArray`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Vanara.Collections.SparseArray`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also
            returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Vanara.Collections.SparseArray`1.ToArray">
            <summary>Collapses array into new, condensed array. Does not maintain indexes.</summary>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="T:Vanara.Collections.GenericVirtualReadOnlyDictionary`2">
            <summary>A generic class that creates a read-only dictionary from a list and getter function.</summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{`0},Vanara.Collections.GenericVirtualReadOnlyDictionary{`0,`1}.TryGetValueDelegate,System.Func{`0,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.GenericVirtualReadOnlyDictionary`2"/> class.</summary>
            <param name="keys">The enumerated list of keys.</param>
            <param name="getValue">The function used to get a value given a key. Called directly by <c>TryGetValue</c>.</param>
            <param name="hasKey">
            An optional function to directly determine if a key exists. If not supplied, the default implementation checks for equality on
            every value in <paramref name="keys"/>.
            </param>
        </member>
        <member name="T:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.TryGetValueDelegate">
            <summary>Delegate for the implementation of the <see cref="M:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.TryGetValue(`0,`1@)"/> method.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
            <value>An enumerable collection that contains the keys in the read-only dictionary.</value>
        </member>
        <member name="M:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.GenericVirtualReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Vanara.Collections.VirtualDictionary`2">
            <summary>
            A generic base class for providing a dictionary that gets and sets its values using virtual method calls. Useful for exposing lookups
            into existing list environments like the file system, registry, service controller, etc.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.VirtualDictionary`2"/> class.</summary>
            <param name="readOnly">if set to <c>true</c> makes the collection read-only.</param>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.IsReadOnly">
            <summary>Gets a value indicating whether this instance is read only.</summary>
            <value><see langword="true"/> if this instance is read only; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
            <remarks>
            The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the values are in
            the same order as the corresponding keys in the enumerable collection that is returned by the <see cref="P:Vanara.Collections.VirtualDictionary`2.Keys"/> property.
            </remarks>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
            <value>An enumerable collection that contains the keys in the read-only dictionary.</value>
            <remarks>
            The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the
            same order as the corresponding values in the enumerable collection that is returned by the <see cref="P:Vanara.Collections.VirtualDictionary`2.Values"/> property.
            </remarks>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.Items">
            <summary>Gets the enumerated list of items.</summary>
            <value>The enumerated list of items.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualDictionary`2.Item(`0)">
            <summary>Gets or sets the <typeparamref name="TValue"/> with the specified key.</summary>
            <value>The <typeparamref name="TValue"/>.</value>
            <param name="key">The key.</param>
            <returns>The <typeparamref name="TValue"/> with the specified key.</returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.Add(`0,`1)">
            <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.Remove(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. This method also returns false
            if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Determines whether this instance contains the object.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value that is associated with the specified key. If the value for <paramref name="key"/> does not exist, this method
            should create it. If the value does exist, this method should update it to match <paramref name="value"/>.
            </summary>
            <param name="key">The key for which to set the data.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="T:Vanara.Collections.VirtualReadOnlyDictionary`2">
            <summary>
            A generic base class for providing a read-only dictionary that gets its values using virtual method calls. Useful for exposing
            lookups into existing list environments like the file system, registry, service controller, etc.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
            <value>An enumerable collection that contains the keys in the read-only dictionary.</value>
            <remarks>
            The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the
            same order as the corresponding values in the enumerable collection that is returned by the <see cref="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Values"/> property.
            </remarks>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Values">
            <inheritdoc/>
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Items">
            <summary>Gets the enumerated list of items.</summary>
            <value>The enumerated list of items.</value>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the <typeparamref name="TValue"/> with the specified key.</summary>
            <value>The element with the specified key.</value>
            <param name="key">The key of the element to get.</param>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Vanara.Collections.IVirtualListMethods`1">
            <summary>Interface that defines the methods for a virtual list. This interface is used by the <see cref="T:Vanara.Collections.VirtualList`1"/> class.</summary>
            <typeparam name="T">The type of the element.</typeparam>
            <seealso cref="T:Vanara.Collections.IVirtualReadOnlyListMethods`1"/>
        </member>
        <member name="M:Vanara.Collections.IVirtualListMethods`1.AddItem(`0)">
            <summary>Adds an item to the end of the list.</summary>
            <param name="item">The object to add to the list.</param>
        </member>
        <member name="M:Vanara.Collections.IVirtualListMethods`1.InsertItemAt(System.Int32,`0)">
            <summary>Inserts an item to the list at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:Vanara.Collections.IVirtualListMethods`1.RemoveItemAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Vanara.Collections.IVirtualListMethods`1.SetItemAt(System.Int32,`0)">
            <summary>Sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to set.</param>
            <param name="value">The element at the specified index.</param>
        </member>
        <member name="T:Vanara.Collections.IVirtualReadOnlyListMethods`1">
            <summary>
            Interface that defines the methods for a virtual read-only list. This interface is used by the <see cref="T:Vanara.Collections.VirtualReadOnlyList`1"/> class.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="M:Vanara.Collections.IVirtualReadOnlyListMethods`1.GetItemCount">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection.</returns>
        </member>
        <member name="M:Vanara.Collections.IVirtualReadOnlyListMethods`1.TryGet(System.Int32,`0@)">
            <summary>Tries to get the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="value">The value, if <paramref name="index"/> is a valid index; or <see langword="default"/> if not.</param>
            <returns><see langword="true"/> if the list contains an element at the specified index; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.Collections.VirtualList`1">
            <summary>A virtual list that implements a lot of the scaffolding.</summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Vanara.Collections.VirtualList`1.impl">
            <summary>The implementation.</summary>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.#ctor(Vanara.Collections.IVirtualListMethods{`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.VirtualList`1"/> class.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.Collections.VirtualList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Collections.VirtualListMethodCarrier`1">
            <summary>Wrapper for <see cref="T:Vanara.Collections.IVirtualListMethods`1"/> that allows for the use of delegates instead of implementing the interface.</summary>
            <typeparam name="T">The element type.</typeparam>
            <seealso cref="T:Vanara.Collections.IVirtualListMethods`1"/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.#ctor(Vanara.Collections.VirtualReadOnlyList{`0}.TryGetDelegate,System.Func{System.Int32},System.Action{`0},System.Action{System.Int32,`0},System.Action{System.Int32},System.Action{System.Int32,`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.VirtualListMethodCarrier`1"/> class.</summary>
            <param name="tryGet">Delegate that tries to get the element at the specified index.</param>
            <param name="getCount">Delegate that gets the number of elements in the collection.</param>
            <param name="add">Delegate that adds an item to the end of the list.</param>
            <param name="insert">Delegate that inserts an item to the list at the specified index.</param>
            <param name="removeAt">Delegate that removes the item at the specified index.</param>
            <param name="setAt">Delegate that sets the element at the specified index.</param>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.Add">
            <summary>Delegate that adds an item to the end of the list.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.GetCount">
            <summary>Delegate that gets the number of elements in the collection.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.Insert">
            <summary>Delegate that inserts an item to the list at the specified index.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.RemoveAt">
            <summary>Delegate that removes the item at the specified index.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.SetAt">
            <summary>Delegate that sets the element at the specified index.</summary>
        </member>
        <member name="P:Vanara.Collections.VirtualListMethodCarrier`1.TryGet">
            <summary>Delegate that tries to get the element at the specified index.</summary>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualListMethods{T}#AddItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualReadOnlyListMethods{T}#GetItemCount">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualListMethods{T}#InsertItemAt(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualListMethods{T}#RemoveItemAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualListMethods{T}#SetItemAt(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualListMethodCarrier`1.Vanara#Collections#IVirtualReadOnlyListMethods{T}#TryGet(System.Int32,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Collections.VirtualReadOnlyList`1">
            <summary>A virtual read-only list that implements a lot of the scaffolding.</summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:Vanara.Collections.VirtualReadOnlyList`1.readOnlyImpl">
            <summary>The read only implementation.</summary>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.#ctor(Vanara.Collections.IVirtualReadOnlyListMethods{`0})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Collections.VirtualList`1"/> class.</summary>
        </member>
        <member name="T:Vanara.Collections.VirtualReadOnlyList`1.TryGetDelegate">
            <summary>Delegate for a method that tries to get the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="value">The value, if <paramref name="index"/> is a valid index; or <see langword="default"/> if not.</param>
            <returns><see langword="true"/> if the list contains an element at the specified index; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.Collections.VirtualReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Collections.VirtualReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.FormatterComposer">
            <summary>Extension method to combine formatter instances.</summary>
        </member>
        <member name="M:Vanara.FormatterComposer.Add``1(Vanara.Formatter,System.Globalization.CultureInfo)">
            <summary>Adds a chain of formatters with specific cultures to make a composite.</summary>
            <typeparam name="T">A <see cref="T:Vanara.Formatter"/> derived type.</typeparam>
            <param name="formatter">The formatter instance to start the chain.</param>
            <param name="culture">The culture.</param>
            <returns>A composite formatter.</returns>
            <example>
            <code lang="cs">
            // Build composite formatter from custom formatters derived from Formatter
            var formatter = Formatter.Default().Add&lt;CustomFormatter1&gt;().Add&lt;CustomFormatter2&gt;();
            // Use custom format extensions defined in the custom formatters to format the string
            var output = string.Format(formatter, "{0:cf1} = {0:cf2}", 512);
            </code>
            </example>
        </member>
        <member name="T:Vanara.CompositeFormatter">
            <summary>Binds multiple formatters together.</summary>
            <seealso cref="T:Vanara.Formatter"/>
        </member>
        <member name="M:Vanara.CompositeFormatter.#ctor(System.Globalization.CultureInfo,Vanara.Formatter[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.CompositeFormatter"/> class.</summary>
            <param name="culture">The culture.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Vanara.CompositeFormatter.Add(Vanara.Formatter)">
            <summary>Adds the specified formatter.</summary>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Vanara.CompositeFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific
            formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="T:Vanara.Formatter">
            <summary>Base class for expandable formatters.</summary>
        </member>
        <member name="M:Vanara.Formatter.#ctor(System.Globalization.CultureInfo)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Formatter"/> class.</summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="P:Vanara.Formatter.Culture">
            <summary>Gets the culture.</summary>
            <value>The culture.</value>
        </member>
        <member name="M:Vanara.Formatter.Default(System.Globalization.CultureInfo)">
            <summary>Gets a default instance of a composite formatter.</summary>
            <param name="culture">The culture.</param>
            <returns>A composite formatter.</returns>
        </member>
        <member name="M:Vanara.Formatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific
            formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="M:Vanara.Formatter.GetFormat(System.Type)">
            <summary>Returns an object that provides formatting services for the specified type.</summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>
            An instance of the object specified by <paramref name="formatType"/>, if the IFormatProvider implementation can supply that type of
            object; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Vanara.Formatter.HandleOtherFormats(System.String,System.Object)">
            <summary>Helper method that can be used inside the Format method to handle unrecognized formats.</summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="T:Vanara.BitField`1">
            <summary>A struct that allows for bit manipulation of a value type.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="data">The initial value of the bitfield.</param>
        </member>
        <member name="M:Vanara.BitField`1.#ctor(`0)">
            <summary>A struct that allows for bit manipulation of a value type.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="data">The initial value of the bitfield.</param>
        </member>
        <member name="P:Vanara.BitField`1.Item(System.Int32)">
            <summary>Gets or sets the value of the bit at the specified index.</summary>
            <param name="index">The zero-based index of the bit to get.</param>
            <returns><see langword="true"/> if the bit is set (1); <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Vanara.BitField`1.Item(System.Range)">
            <summary>Gets the bit array value from the specified range in a bit vector.</summary>
            <param name="range">The zero-based start and end indicies of the bit range to get or set.</param>
            <returns>The value of the requested bit range.</returns>
        </member>
        <member name="M:Vanara.BitField`1.op_Implicit(Vanara.BitField{`0})~`0">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.BitField`1"/> to <typeparamref name="T"/>.</summary>
            <param name="bf">The <see cref="T:Vanara.BitField`1"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.Extensions.BitHelper">
            <summary>Static methods to help with bit manipulation.</summary>
            <remarks>
            This class is intended to support whole numbers. Without a specific constraint for numbers, the list of constraints helps to limit
            incorrect types, but is NOT foolproof.
            </remarks>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.BitMaskToHitList``1(``0)">
            <summary>Converts a bitmask into a sequence of indices representing the positions of set bits.</summary>
            <typeparam name="T">The type of the bitmask. Must be an integer type.</typeparam>
            <param name="bitMask">The bitmask to convert. Each bit in the bitmask corresponds to a potential index in the resulting sequence.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.UInt32"/> values, where each value represents the zero-based index of a bit that is set
            to <see langword="true"/> in the bitmask.
            </returns>
            <remarks>
            This method iterates through the bits of the provided bitmask and yields the indices of all bits that are set to <see
            langword="true"/>. The sequence is ordered from the least significant bit (index 0) to the most significant bit.
            </remarks>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.GetBit``1(``0,System.Byte)">
            <summary>Gets the bit value at the specified index in a bit vector.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="bits">The bit vector.</param>
            <param name="idx">The zero-based index of the bit to get.</param>
            <returns><see langword="true"/> if the bit is set (1); <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.GetBits``1(``0,System.Byte,System.Byte)">
            <summary>Gets the bit array value from the specified range in a bit vector.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="bits">The bit vector.</param>
            <param name="startIdx">The zero-based start index of the bit range to get.</param>
            <param name="count">The number of sequential bits to fetch starting at <paramref name="startIdx"/>.</param>
            <returns>The value of the requested bit range.</returns>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.HitListToBitMask``1(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>Converts a collection of hit indices into a bitmask of the specified numeric type.</summary>
            <typeparam name="T">The type of the bitmask. Must be an integer type.</typeparam>
            <remarks>
            The method calculates the bitmask by setting the bits at the specified indices in a zero-initialized value. The maximum number of
            usable bits is determined by the size of the type <typeparamref name="T"/>.
            </remarks>
            <param name="hitIndices">
            A collection of zero-based indices representing the positions to set in the bitmask. Each index must be less than the maximum number
            of usable bits for the specified type <typeparamref name="T"/>.
            </param>
            <returns>A bitmask of type <typeparamref name="T"/> where the bits at the specified indices are set to <see langword="true"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any index in <paramref name="hitIndices"/> is greater than or equal to the maximum number of usable bits for the specified
            type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.SetBit``1(``0@,System.Byte,System.Boolean)">
            <summary>Sets the bit value at the specified index in a bit vector.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="bits">The bit vector.</param>
            <param name="idx">The index of the bit to set.</param>
            <param name="value">If set to <see langword="true"/>, set the bit (= 1); otherwise, clear the bit (= 0).</param>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.SetBits``2(``0@,System.Byte,System.Byte,``1)">
            <summary>Sets the bit values at the specified range in a bit vector.</summary>
            <typeparam name="T">The type of the bit vector. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <typeparam name="TValue">The type of the value. Must be of type <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="bits">The bit vector.</param>
            <param name="startIdx">The zero-based start index of the bit range to set.</param>
            <param name="count">The number of sequential bits to set starting at <paramref name="startIdx"/>.</param>
            <param name="value">The value to set within the specified range of <paramref name="bits"/>.</param>
        </member>
        <member name="M:Vanara.Extensions.BitHelper.UsableBits``1">
            <summary>Calculates the number of usable bits for the specified numeric type.</summary>
            <typeparam name="T">The type of the bitmask. Must be an integer type.</typeparam>
            <returns>The total number of bits available for the specified type, minus one if the type is signed.</returns>
        </member>
        <member name="T:Vanara.Extensions.ComTypeExtensions">
            <summary>Extensions for types in System.Runtime.InteropServices.ComTypes.</summary>
        </member>
        <member name="M:Vanara.Extensions.ComTypeExtensions.Enum(System.Runtime.InteropServices.ComTypes.IEnumString)">
            <summary>Enumerates the strings from an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/> instance.</summary>
            <param name="iEnumString">The <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/> instance.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Vanara.Extensions.ComTypeExtensions.Enum(System.Runtime.InteropServices.ComTypes.IEnumVARIANT)">
            <summary>Enumerates the objects from an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT"/> instance.</summary>
            <param name="iEnumVar">The <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT"/> instance.</param>
            <returns>A list of objects.</returns>
        </member>
        <member name="T:Vanara.Extensions.EnumExtensions">
            <summary>Extensions for enumerated types.</summary>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.BitPosition``1(``0)">
            <summary>Gets the bit position of a flag that has a single bit, starting at 0.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">The enumerated value.</param>
            <returns>The bit position, starting at 0, of the single bit flag specified in <paramref name="flags"/>.</returns>
            <exception cref="T:System.ArgumentException">The flag value is zero and has no bit position.</exception>
            <exception cref="T:System.ArithmeticException">The flag value has more than a single bit set.</exception>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.CheckHasValue``1(``0,System.String)">
            <summary>Throws an exception if a flag value does not exist in a specified enumeration.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="value">The value to check.</param>
            <param name="argName">Name of the argument to display in the exception. "value" is used if no value or <c>null</c> is supplied.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"></exception>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ClearFlags``1(``0,``0)">
            <summary>Clears the specified flags from an enumerated value and returns the new value.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">The enumerated value.</param>
            <param name="flag">The flags to clear or unset.</param>
            <returns>The resulting enumerated value after the <paramref name="flag"/> has been unset.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Combines enumerated list of values into a single enumerated value.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">The flags to combine.</param>
            <returns>A single enumerated value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.GetDescription``1(``0)">
            <summary>Gets the description supplied by a <see cref="T:System.ComponentModel.DescriptionAttribute"/> if one is set.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="value">The enumerated value.</param>
            <returns>The description, or <c>null</c> if one is not set.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.GetFlags``1(``0)">
            <summary>Gets the flags of an enumerated value as an enumerated list.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="value">The enumerated value.</param>
            <returns>An enumeration of individual flags that compose the <paramref name="value"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.IsFlagSet``1(``0,``0)">
            <summary>Determines whether the enumerated flag value has the specified flag set.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">The enumerated flag value.</param>
            <param name="flag">The flag value to check.</param>
            <returns><c>true</c> if is flag set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.IsValid``1(``0)">
            <summary>Returns an indication if the enumerated value is either defined or can be defined by a set of known flags.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="value">The enumerated value.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.SetFlags``1(``0@,``0,System.Boolean)">
            <summary>Set or unsets flags in a referenced enumerated value.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">A reference to an enumerated value.</param>
            <param name="flag">The flag to set or unset.</param>
            <param name="set">if set to <c>true</c> sets the flag; otherwise the flag is unset.</param>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.SetFlags``1(``0,``0,System.Boolean)">
            <summary>Set or unsets flags in an enumerated value and returns the new value.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <param name="flags">The enumerated value.</param>
            <param name="flag">The flag to set or unset.</param>
            <param name="set">if set to <c>true</c> sets the flag; otherwise the flag is unset.</param>
            <returns>The resulting enumerated value after the <paramref name="flag"/> has been set or unset.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.To``2(``0)">
            <summary>Converts an enumerated value to another fixed type.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.ArgumentException">The size of TResult cannot be smaller than the size of TEnum.</exception>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``2(``0)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TValue">The type of the value to convert.</typeparam>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.ArgumentException">The size of TEnum cannot be smaller than the size of TValue.</exception>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.Byte)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.SByte)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.UInt16)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.Int16)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.UInt32)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.Int32)">
            <summary>Converts a fixed type to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.ToEnum``1(System.Byte[])">
            <summary>Converts a byte array to an enumerated value.</summary>
            <typeparam name="TEnum">The enumerated type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.CheckHasFlags``1">
            <summary>Checks if <typeparamref name="T"/> represents an enumeration and throws an exception if not.</summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to validate.</typeparam>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Vanara.Extensions.EnumExtensions.IsFlags``1">
            <summary>Determines whether this enumerations has the <see cref="T:System.FlagsAttribute"/> set.</summary>
            <typeparam name="T">The enumerated type.</typeparam>
            <returns><c>true</c> if this instance has the <see cref="T:System.FlagsAttribute"/> set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Vanara.Extensions.EnumFlagIndexer`1">
             <summary>
             Structure to use in place of a enumerated type with the <see cref="T:System.FlagsAttribute"/> set. Allows for indexer access to flags and
             simplifies boolean logic.
             </summary>
             <typeparam name="TEnum">An enumerated type.</typeparam>
             <example>
             <para>Use this structure by replacing an enumerated type field for simpler access. See old and new way examples below:</para>
             <code title="Old way">var fileInfo = new FileInfo(@"C:\MyFile.txt");
            FileAttributes fileAttr = fileInfo.Attributes;
            if ((fileAttr &amp; FileAttributes.Hidden) != FileAttributes.Hidden)
            {
              Console.WriteLine("The file is hidden. Trying to unhide now.");
              fileInfo.Attributes = (fileAttr &amp; ~FileAttributes.Hidden);
            }</code>
             <code title="New way">var fileInfo = new FileInfo(@"C:\MyFile.txt");
            EnumFlagIndexer&lt;FileAttributes&gt; fileAttr = fileInfo.Attributes;
            if (fileAttr[FileAttributes.Hidden])
            {
              Console.WriteLine("The file is hidden. Trying to unhide now.");
              fileAttr[FileAttributes.Hidden] = false;
              fileInfo.Attributes = fileAttr;
            }</code>
             </example>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/> struct.</summary>
            <param name="initialValue">The initial value. Defaults to <c>default(E)</c>.</param>
        </member>
        <member name="P:Vanara.Extensions.EnumFlagIndexer`1.Item(`0)">
            <summary>Gets or sets the specified flag.</summary>
            <value>A boolean value representing the presence of the specified enumerated flag.</value>
            <param name="flag">A value in the enumerated type to check.</param>
            <returns><c>true</c> if the flag is set; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_Inequality(Vanara.Extensions.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator !=.</summary>
            <param name="a">An instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="TEnum"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_BitwiseAnd(Vanara.Extensions.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator &amp;.</summary>
            <param name="a">An instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="TEnum"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_BitwiseOr(Vanara.Extensions.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator |.</summary>
            <param name="a">An instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="TEnum"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_Equality(Vanara.Extensions.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator ==.</summary>
            <param name="a">An instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="TEnum"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_Implicit(Vanara.Extensions.EnumFlagIndexer{`0})~`0">
            <summary>Implicitly converts an instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/> to the value of enumerated type E.</summary>
            <param name="f">The f.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.op_Implicit(`0)~Vanara.Extensions.EnumFlagIndexer{`0}">
            <summary>Implicitly converts a value of E to an instance of <see cref="T:Vanara.Extensions.EnumFlagIndexer`1"/>.</summary>
            <param name="e">The e.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Clear">
            <summary>Clears and sets to <c>default(E)</c>.</summary>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Equals(Vanara.Extensions.EnumFlagIndexer{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator{TEnum}"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the flags to the intersection of the current flags and the specified flags.</summary>
            <param name="enumValues">The flags with which to intersect.</param>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Union(`0)">
            <summary>Unions the specified flags.</summary>
            <param name="enumVal">The flags.</param>
        </member>
        <member name="M:Vanara.Extensions.EnumFlagIndexer`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>Unions the specified flags.</summary>
            <param name="enumValues">The flags.</param>
        </member>
        <member name="T:Vanara.Extensions.FileTimeExtensions">
            <summary>Extensions for <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/>.</summary>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.CompareTo(System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME)">
             <summary>Compares two instances of <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
             <param name="ft">The first object to compare. </param>
             <param name="other">The second object to compare. </param>
             <returns>A signed number indicating the relative values of t1 and t2.
             <list type="table">
             <listheader><term>Value Type</term><term>Condition</term></listheader>
             <item><term>Less than zero</term><term>t1 is earlier than t2.</term></item>
             <item><term>Zero</term><term>t1 is the same as t2.</term></item>
             <item><term>Greater than zero</term><term>t1 is later than t2.</term></item>
             </list>
            </returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.Equals(System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>Compares two <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structures for equality.</summary>
            <param name="ft1">The first <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> value.</param>
            <param name="ft2">The second <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> value.</param>
            <returns>true if the current object is equal to the <paramref name="ft2"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.MakeFILETIME(System.UInt64)">
            <summary>Creates a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> from a 64-bit value.</summary>
            <param name="ul">The value to be converted.</param>
            <returns>The return value is a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> created from the supplied 64-bit value.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToDateTime(System.Runtime.InteropServices.ComTypes.FILETIME,System.DateTimeKind)">
            <summary>Converts a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure to a <see cref="T:System.DateTime"/> structure.</summary>
            <param name="ft">The <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> value to convert.</param>
            <param name="kind">The <see cref="T:System.DateTimeKind"/> value to use to determine local or UTC time.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> structure.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToFileTimeStruct(System.DateTime)">
            <summary>Converts a <see cref="T:System.DateTime"/> structure to a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure using the local time.</summary>
            <param name="dt">The <see cref="T:System.DateTime"/> value to convert.</param>
            <returns>The resulting <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure as the local time.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToFileTimeStruct(System.TimeSpan)">
            <summary>Converts a <see cref="T:System.TimeSpan"/> structure to a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure.</summary>
            <param name="ts">The <see cref="T:System.TimeSpan"/> value to convert.</param>
            <returns>The resulting <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure as a time span.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToInt64(System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>Converts a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure to its signed 64-bit representation.</summary>
            <param name="ft">The value to be converted.</param>
            <returns>The return value is a signed 64-bit value that represented the <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToString(System.Runtime.InteropServices.ComTypes.FILETIME,System.String,System.IFormatProvider)">
            <summary>Returns a <see cref="T:System.String"/> that represents the <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> instance.</summary>
            <param name="ft">The <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> to convert.</param>
            <param name="format">A standard or custom date and time format string. See notes for <a href="https://msdn.microsoft.com/en-us/library/8tfzyc64(v=vs.110).aspx">DateTime.ToString()</a>.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> object as specified by <paramref name="format"/> and <paramref name="provider"/>.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToTimeSpan(System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>Converts a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure to a <see cref="T:System.TimeSpan"/> structure.</summary>
            <param name="ft">The <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> value to convert.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> structure.</returns>
        </member>
        <member name="M:Vanara.Extensions.FileTimeExtensions.ToUInt64(System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>Converts a <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure to its 64-bit representation.</summary>
            <param name="ft">The value to be converted.</param>
            <returns>The return value is a 64-bit value that represented the <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/>.</returns>
        </member>
        <member name="T:Vanara.Extensions.HexDumpHelpers">
            <summary>Extension to dump a byte array.</summary>
        </member>
        <member name="M:Vanara.Extensions.HexDumpHelpers.ToHexDumpString(System.Byte[],System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>Creates a multi-line dump of a byte array using hexadecimal values.</summary>
            <param name="bytes">The byte array to dump. This value cannot be <see langword="null"/>.</param>
            <param name="bytesPerRow">The number of bytes to display on each line.</param>
            <param name="gapEvery">The number of bytes to display before inserting an extra space to create a visual gap.</param>
            <param name="rowIdLen">
            The number of hexadecimal digits to display on the left side of each line to indicate position. If this value is 0, then no
            position indicator will be shown. If this value is -1, then the size will be computed in increments of 4 based on the size of <paramref name="bytes"/>.
            </param>
            <param name="location">
            A pointer location to show to the left of the row identifier. If set to <c>IntPtr.Zero</c>, no location value is shown.
            </param>
            <returns>A multi-line string that contains a hexadecimal dump of <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
        </member>
        <member name="M:Vanara.Extensions.HexDumpHelpers.ToHexDumpString(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a multi-line dump of a byte array using hexadecimal values.
            </summary>
            <param name="ptr">A pointer to the memory to dump.</param>
            <param name="byteCount">The number of bytes to display starting at the location pointed to by <paramref name="ptr" />.</param>
            <param name="bytesPerRow">The number of bytes to display on each line.</param>
            <param name="gapEvery">The number of bytes to display before inserting an extra space to create a visual gap.</param>
            <param name="rowIdLen">The number of hexadecimal digits to display on the left side of each line to indicate position. If this value is 0, then no
            position indicator will be shown. If this value is -1, then the size will be computed in increments of 4 based on the size of <paramref name="byteCount" />.</param>
            <param name="showLocation">If set to <c>true</c>, the pointer location value is shown to the left of the row identifier.</param>
            <returns>
            A multi-line string that contains a hexadecimal dump of <paramref name="ptr" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
        </member>
        <member name="T:Vanara.Extensions.InteropExtensions">
            <summary>Extension methods for System.Runtime.InteropServices.</summary>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Align(System.IntPtr)">
            <summary>
            Aligns the specified pointer to an adjacent memory location that can be accessed by a adding a constant and its multiples.
            </summary>
            <param name="ptr">The pointer to align.</param>
            <returns>The aligned pointer. This value may be the same as <paramref name="ptr"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.AsReadOnlySpan``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Returns the pointer as a <see cref="T:System.ReadOnlySpan`1"/>.</summary>
            <typeparam name="T">The type of items in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="ptr">A pointer to the starting address of a specified number of <typeparamref name="T"/> elements in memory.</param>
            <param name="length">The number of <typeparamref name="T"/> elements to be included in the <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <param name="prefixBytes">Bytes to skip before starting the span.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> that represents the memory.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.AsRef``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Gets a reference to a structure based on this allocated memory.</summary>
            <typeparam name="T">The type of items in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="ptr">A pointer to the starting address of a specified number of <typeparamref name="T"/> elements in memory.</param>
            <param name="prefixBytes">Bytes to skip before starting the span.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>A referenced structure.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.AsSpan``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Returns the pointer as a <see cref="T:System.Span`1"/>.</summary>
            <typeparam name="T">The type of items in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="ptr">A pointer to the starting address of a specified number of <typeparamref name="T"/> elements in memory.</param>
            <param name="length">The number of <typeparamref name="T"/> elements to be included in the <see cref="T:System.Span`1"/>.</param>
            <param name="prefixBytes">Bytes to skip before starting the span.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> that represents the memory.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.AsUnmanagedArrayPointer``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Returns the pointer.</summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="ptr">A pointer to the starting address of a specified number of <typeparamref name="T"/> elements in memory.</param>
            <param name="length">The number of <typeparamref name="T"/> elements to be included in the pointer.</param>
            <param name="prefixBytes">Bytes to skip before starting the span.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>A pointer that represents the memory.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.CopyTo(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>Copies the number of specified bytes from one unmanaged memory block to another.</summary>
            <param name="ptr">The allocated memory pointer.</param>
            <param name="dest">The allocated memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy from <paramref name="ptr"/> to <paramref name="dest"/>.</param>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.CopyTo(System.IntPtr,System.Int64,System.IntPtr,System.Int64)">
            <summary>Copies the number of specified bytes from one unmanaged memory block to another.</summary>
            <param name="source">The allocated memory pointer.</param>
            <param name="start">The offset from <paramref name="source"/> at which to start the copying.</param>
            <param name="dest">The allocated memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy from <paramref name="source"/> to <paramref name="dest"/>.</param>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.FillMemory(System.IntPtr,System.Byte,System.Int64)">
            <summary>
            Fills the memory with a particular byte value. <note type="warning">This is a very dangerous function that can cause memory
            access errors if the provided <paramref name="length"/> is bigger than allocated memory of if the <paramref name="ptr"/> is not
            a valid memory pointer.</note>
            </summary>
            <param name="ptr">The allocated memory pointer.</param>
            <param name="value">The byte value with which to fill the memory.</param>
            <param name="length">The number of bytes to fill with the value.</param>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.GetEnumerator``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.GetEnumerator(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into an <see cref="T:System.Collections.IEnumerator"/>.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="type">Type of native structure used by the C-style array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.GetNulledArrayLength(System.IntPtr,System.Type)">
            <summary>
            Gets the length of a null terminated array of numeric values. <note type="warning">This is a very dangerous function and can result
            in memory access errors if the <paramref name="lptr"/> does not point to a null-terminated array of pointers.</note>
            </summary>
            <param name="lptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="elemType">Type of the array element.</param>
            <returns>The number of non-zero values in the array. If <paramref name="lptr"/> is equal to IntPtr.Zero, this result is 0.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.GetNulledPtrArrayLength(System.IntPtr)">
            <summary>
            Gets the length of a null terminated array of pointers. <note type="warning">This is a very dangerous function and can result in
            memory access errors if the <paramref name="lptr"/> does not point to a null-terminated array of pointers.</note>
            </summary>
            <param name="lptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <returns>
            The number of non-null pointers in the array. If <paramref name="lptr"/> is equal to IntPtr.Zero, this result is 0.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.IsBlittable(System.Type)">
            <summary>Determines whether this type is formatted or blittable.</summary>
            <param name="T">The type to check.</param>
            <returns><see langword="true"/> if the specified type is blittable; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.IsMarshalable(System.Type)">
            <summary>Determines whether this type is marshalable.</summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the specified type is marshalable; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.IsNullable(System.Type)">
            <summary>Determines whether this type is nullable (derived from <see cref="T:System.Nullable`1"/>).</summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the specified type is nullable; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.LinkedListToIEnum``1(System.IntPtr,System.Func{``0,System.IntPtr})">
            <summary>Marshals an unmanaged linked list of structures to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of that structure.</summary>
            <typeparam name="T">Type of native structure used by the unmanaged linked list.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="next">The expression to be used to fetch the pointer to the next item in the list.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the linked list.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.LinkedListToIEnum``1(System.IntPtr,System.Func{``0,System.Int64},Vanara.PInvoke.SizeT)">
            <summary>Marshals an unmanaged linked list of structures to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of that structure.</summary>
            <typeparam name="T">Type of native structure used by the unmanaged linked list.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="nextOffset">The expression to be used to fetch the offset from the current pointer to the next item in the list.</param>
            <param name="allocatedBytes">
            The number of allocated bytes behind <paramref name="ptr"/>. This value is used to determine when to stop enumerating.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the linked list.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalObjectsToPtr(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Int32,System.IntPtr},System.Int32@,System.Boolean,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from a managed list of objects to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <param name="values">The enumerated list of objects to marshal.</param>
            <param name="memAlloc">
            The function that allocates the memory for the block of objects (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="referencePointers">
            if set to <see langword="true"/> the pointer will be processed by storing a reference to the value; if <see langword="false"/>,
            the pointer value will be directly inserted into the array of pointers.
            </param>
            <param name="charSet">The character set to use for strings.</param>
            <param name="prefixBytes">Number of bytes preceding the allocated objects.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>
            Pointer to the allocated native (unmanaged) array of objects stored using the character set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr``1(System.Collections.Generic.IEnumerable{``0},System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Marshals data from a managed list of specified type to a pre-allocated unmanaged block of memory.</summary>
            <typeparam name="T">
            A type of the enumerated managed object that holds the data to be marshaled. The object must be a structure or an instance of a
            formatted class.
            </typeparam>
            <param name="items">The enumerated list of items to marshal.</param>
            <param name="ptr">
            A pointer to a pre-allocated block of memory. The allocated memory must be sufficient to hold the size of <typeparamref
            name="T"/> times the number of items in the enumeration plus the number of bytes specified by <paramref name="prefixBytes"/>.
            </param>
            <param name="prefixBytes">The number of bytes to skip before writing the first element of <paramref name="items"/>.</param>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr``1(``0,System.Func{System.Int32,System.IntPtr},System.Int32@,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>Marshals data from a managed object to an unmanaged block of memory that is allocated using <paramref name="memAlloc"/>.</summary>
            <typeparam name="T">The type of the managed object.</typeparam>
            <param name="value">
            A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.
            </param>
            <param name="memAlloc">
            The function that allocates the memory for the structure (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>A pointer to the memory allocated by <paramref name="memAlloc"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr(System.Array,System.Func{System.Int32,System.IntPtr},System.Int32@,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from a managed list of specified type to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <param name="items">
            The array of items to marshal. If this is an array of strings, it will be marshaled as a concatenated list with default character encoding.
            </param>
            <param name="memAlloc">
            The function that allocates the memory for the block of items (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>Pointer to the allocated native (unmanaged) array of items stored.</returns>
            <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,System.IntPtr},System.Int32@,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from a managed list of specified type to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <typeparam name="T">
            A type of the enumerated managed object that holds the data to be marshaled. The object must be a structure or an instance of a
            formatted class.
            </typeparam>
            <param name="items">The enumerated list of items to marshal.</param>
            <param name="memAlloc">
            The function that allocates the memory for the block of items (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will
            be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>Pointer to the allocated native (unmanaged) array of items stored.</returns>
            <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr``1(``0[],System.Func{System.Int32,System.IntPtr},System.Int32@,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from an array of a specified type to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <typeparam name="T">
            A type of the array element that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.
            </typeparam>
            <param name="items">The array of items to marshal.</param>
            <param name="memAlloc">
            The function that allocates the memory for the block of items (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will
            be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>Pointer to the allocated native (unmanaged) array of items stored.</returns>
            <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Func{System.Int32,System.IntPtr},System.Int32@,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from a managed list of strings to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <param name="values">The enumerated list of strings to marshal.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="memAlloc">
            The function that allocates the memory for the block of strings (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will
            be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>
            Pointer to the allocated native (unmanaged) array of strings stored using the <paramref name="packing"/> model and the character
            set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.MarshalToPtr(System.String[],Vanara.InteropServices.StringListPackMethod,System.Func{System.Int32,System.IntPtr},System.Int32@,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Marshals data from a managed array of strings to an unmanaged block of memory allocated by the <paramref name="memAlloc"/> method.
            </summary>
            <param name="values">The array of strings to marshal.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="memAlloc">
            The function that allocates the memory for the block of strings (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will
            be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>
            Pointer to the allocated native (unmanaged) array of strings stored using the <paramref name="packing"/> model and the character
            set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Offset(System.IntPtr,System.Int64)">
            <summary>Adds an offset to the value of a pointer.</summary>
            <param name="pointer">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of <paramref name="offset"/> to <paramref name="pointer"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.QueryInterface(System.Object,System.Guid,System.Object@)">
            <summary>Queries the object for a COM interface and returns it, if found, in <paramref name="ppv"/>.</summary>
            <param name="iUnk">The object to query.</param>
            <param name="iid">The interface identifier (IID) of the requested interface.</param>
            <param name="ppv">When this method returns, contains a reference to the returned interface.</param>
            <returns>An HRESULT that indicates the success or failure of the call.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.SizeOf``1">
            <summary>Returns the native memory size of a type, if possible.</summary>
            <typeparam name="T">The type whose size is to be returned.</typeparam>
            <returns>The size, in bytes, of the type that is specified by the <typeparamref name="T"/> type parameter.</returns>
            <exception cref="T:System.ArgumentException">Unable to get size of type.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.SizeOf(System.Type)">
            <summary>Returns the native memory size of a type, if possible.</summary>
            <param name="type">The type whose size is to be returned.</param>
            <returns>The size, in bytes, of the type that is specified by the <paramref name="type"/> parameter.</returns>
            <exception cref="T:System.ArgumentException">Unable to get size of type. - type</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.SizeOf(System.Object,System.Runtime.InteropServices.CharSet)">
            <summary>Returns the native memory size of a value, if possible.</summary>
            <param name="value">The value whose native size is to be returned.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <returns>The size, in bytes, of the value that is specified by the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentException">Unable to get the size of the value.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.StructureToPtr``1(``0,System.Func{System.Int32,System.IntPtr},System.Int32@,System.Func{System.IntPtr,System.IntPtr},System.Func{System.IntPtr,System.Boolean})">
            <summary>Marshals data from a managed object to an unmanaged block of memory that is allocated using <paramref name="memAlloc"/>.</summary>
            <typeparam name="T">The type of the managed object.</typeparam>
            <param name="value">
            A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.
            </param>
            <param name="memAlloc">
            The function that allocates the memory for the structure (typically <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/> or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </param>
            <param name="bytesAllocated">The bytes allocated by the <paramref name="memAlloc"/> method.</param>
            <param name="memLock">
            The function used to lock memory before assignment. If <see langword="null"/>, the result from <paramref name="memAlloc"/> will be used.
            </param>
            <param name="memUnlock">The optional function to unlock memory after assignment.</param>
            <returns>A pointer to the memory allocated by <paramref name="memAlloc"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToArray``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An array of type <typeparamref name="T"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToArray``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,System.Int32@)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>An array of type <typeparamref name="T"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToArray(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="type">Type of native structure used by the C-style array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An array of type <paramref name="type"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToArray(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,System.Int32@)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="type">Type of native structure used by the C-style array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>An array of type <paramref name="type"/> containing the elements of the native array.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToByteArray(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to allocated memory into an array of bytes.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native memory.</param>
            <param name="count">The number of bytes to extract.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An array of <see cref="T:System.Byte"/> of length <paramref name="count"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToIEnum``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToIEnum(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="type">Type of native structure used by the C-style array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToInsecureString(System.Security.SecureString)">
            <summary>Converts a <see cref="T:System.Security.SecureString"/> to a string.</summary>
            <param name="s">The <see cref="T:System.Security.SecureString"/> value.</param>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToIntPtr(System.UIntPtr)">
            <summary>Converts a <see cref="T:System.UIntPtr"/> to a <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The <see cref="T:System.UIntPtr"/>.</param>
            <returns>An equivalent <see cref="T:System.IntPtr"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToNullableStructure``1(System.IntPtr)">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a structure. If pointer has no value, <c>null</c> is returned.</summary>
            <typeparam name="T">Type of the structure.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> that points to allocated memory holding a structure or <see cref="F:System.IntPtr.Zero"/>.</param>
            <returns>The converted structure or <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToNullableStructure``1(System.IntPtr,System.Int32@)">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a structure. If pointer has no value, <c>null</c> is returned.</summary>
            <typeparam name="T">Type of the structure.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> that points to allocated memory holding a structure or <see cref="F:System.IntPtr.Zero"/>.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>The converted structure or <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToSecureString(System.IntPtr)">
            <summary>Converts a pointer to an unmanaged Unicode string to a <see cref="T:System.Security.SecureString"/>.</summary>
            <param name="p">A pointer to an unmanaged Unicode string.</param>
            <returns>A <see cref="T:System.Security.SecureString"/> with the contents of the in memory string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToSecureString(System.IntPtr,System.Int32@)">
            <summary>Converts a pointer to an unmanaged Unicode string to a <see cref="T:System.Security.SecureString"/>.</summary>
            <param name="p">A pointer to an unmanaged Unicode string.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>A <see cref="T:System.Security.SecureString"/> with the contents of the in memory string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToSecureString(System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Converts a pointer to an unmanaged Unicode string of a specified length to a <see cref="T:System.Security.SecureString"/>.</summary>
            <param name="p">A pointer to an unmanaged Unicode string.</param>
            <param name="length">The number of Unicode characters in the unmanaged string, excluding any terminating null values.</param>
            <returns>A <see cref="T:System.Security.SecureString"/> with the contents of the in memory string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToSecureString(System.IntPtr,Vanara.PInvoke.SizeT,System.Int32@)">
            <summary>Converts a pointer to an unmanaged Unicode string of a specified length to a <see cref="T:System.Security.SecureString"/>.</summary>
            <param name="p">A pointer to an unmanaged Unicode string.</param>
            <param name="length">The number of Unicode characters in the unmanaged string, excluding any terminating null values.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>A <see cref="T:System.Security.SecureString"/> with the contents of the in memory string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToSecureString(System.String)">
            <summary>Converts a string to a <see cref="T:System.Security.SecureString"/>.</summary>
            <param name="s">A string.</param>
            <returns>A <see cref="T:System.Security.SecureString"/> with the contents of the string.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStringEnum(System.IntPtr,Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Returns an enumeration of strings from memory where each string is pointed to by a preceding list of pointers of length
            <paramref name="count"/>.
            </summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The count of expected strings.</param>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>Enumeration of strings.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStringEnum(System.IntPtr,Vanara.PInvoke.SizeT,System.Text.Encoding,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Returns an enumeration of strings from memory where each string is pointed to by a preceding list of pointers of length
            <paramref name="count"/>.
            </summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The count of expected strings.</param>
            <param name="encoder">The character encoding of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>Enumeration of strings.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStringEnum(System.IntPtr,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Gets an enumerated list of strings from a block of unmanaged memory where each string is separated by a single '\0' character
            and is terminated by two '\0' characters.
            </summary>
            <param name="lptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="lptr"/>.</param>
            <returns>An enumerated list of strings.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStringEnum(System.IntPtr,System.Text.Encoding,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Gets an enumerated list of strings from a block of unmanaged memory where each string is separated by a single '\0' character and is
            terminated by two '\0' characters.
            </summary>
            <param name="lptr">The <see cref="T:System.IntPtr" /> pointing to the native array.</param>
            <param name="encoder">The character encoding of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="lptr" />.</param>
            <returns>An enumerated list of strings.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStructure(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by <paramref name="destType"/>.
            </summary>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="destType">The type of the object to which the data is to be copied. This must be a structure.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="offset">The number of bytes to skip before reading the element.</param>
            <returns>A managed object that contains the data that the <paramref name="ptr"/> parameter points to.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allocatedBytes"/> cannot be negative.</exception>
            <exception cref="T:System.NotSupportedException">Type specified by <paramref name="destType"/> cannot be marshaled.</exception>
            <exception cref="T:System.InsufficientMemoryException">The amount of allocated memory specified is insufficient to marshal the type specified.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStructure(System.IntPtr,System.Type,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,System.Int32@)">
            <summary>
            Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by <paramref name="destType"/>.
            </summary>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="destType">The type of the object to which the data is to be copied. This must be a structure.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="offset">The number of bytes to skip before reading the element.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>A managed object that contains the data that the <paramref name="ptr"/> parameter points to.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allocatedBytes"/> cannot be negative.</exception>
            <exception cref="T:System.NotSupportedException">Type specified by <paramref name="destType"/> cannot be marshaled.</exception>
            <exception cref="T:System.InsufficientMemoryException">The amount of allocated memory specified is insufficient to marshal the type specified.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStructure``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.
            </summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="offset">The number of bytes to skip before reading the element.</param>
            <returns>A managed object that contains the data that the <paramref name="ptr"/> parameter points to.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allocatedBytes"/> cannot be negative.</exception>
            <exception cref="T:System.NotSupportedException">Type specified by <typeparamref name="T"/> cannot be marshaled.</exception>
            <exception cref="T:System.InsufficientMemoryException">The amount of allocated memory specified is insufficient to marshal the type specified.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStructure``1(System.IntPtr,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,System.Int32@)">
            <summary>
            Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.
            </summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="offset">The number of bytes to skip before reading the element.</param>
            <param name="bytesRead">The number of bytes read during the conversion.</param>
            <returns>A managed object that contains the data that the <paramref name="ptr"/> parameter points to.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allocatedBytes"/> cannot be negative.</exception>
            <exception cref="T:System.NotSupportedException">Type specified by <typeparamref name="T"/> cannot be marshaled.</exception>
            <exception cref="T:System.InsufficientMemoryException">The amount of allocated memory specified is insufficient to marshal the type specified.</exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToStructure``1(System.IntPtr,``0,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Marshals data from an unmanaged block of memory to a managed object.</summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a formatted class.</typeparam>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="instance">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <param name="offset">The number of bytes to skip before reading the element.</param>
            <returns>A managed object that contains the data that the <paramref name="ptr"/> parameter points to.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToTypedArray``1(System.Array)">
            <summary>Converts a single-dimensional <see cref="T:System.Array"/> to an array of <typeparamref name="T"/>.</summary>
            <typeparam name="T">
            The type of the output array. All elements in the array supplied as <paramref name="input"/> must be of this type.
            </typeparam>
            <param name="input">The input array.</param>
            <returns>An array of <typeparamref name="T"/> elements.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.ToUIntPtr(System.IntPtr)">
            <summary>Converts a <see cref="T:System.IntPtr"/> to a <see cref="T:System.UIntPtr"/>.</summary>
            <param name="p">The <see cref="T:System.IntPtr"/>.</param>
            <returns>An equivalent <see cref="T:System.UIntPtr"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.UnsafePtrToArray``1(``0*,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Converts an unsafe structure pointer into a managed array.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The pointer to the first structure in the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>An array of type <typeparamref name="T"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Write``1(System.IntPtr,System.Collections.Generic.IEnumerable{``0},Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Marshals data from a managed list of specified type to a pre-allocated unmanaged block of memory.</summary>
            <typeparam name="T">
            A type of the enumerated managed object that holds the data to be marshaled. The object must be a structure or an instance of a
            formatted class.
            </typeparam>
            <param name="ptr">
            A pointer to a pre-allocated block of memory. The allocated memory must be sufficient to hold the size of <typeparamref
            name="T"/> times the number of items in the enumeration plus the number of bytes specified by <paramref name="offset"/>.
            </param>
            <param name="items">The enumerated list of items to marshal.</param>
            <param name="offset">The number of bytes to skip before writing the first element of <paramref name="items"/>.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>The number of bytes written. The offset is not included.</returns>
            <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Write(System.IntPtr,System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Marshals data from a managed list of strings to a pre-allocated unmanaged block of memory.</summary>
            <param name="ptr">
            A pointer to a pre-allocated block of memory. The allocated memory must be sufficient to hold the size of all the strings in the
            enumeration plus pointers or '\0' characters required by <paramref name="packing"/>.
            </param>
            <param name="items">The enumerated list of items to marshal.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="offset">The number of bytes to skip before writing the first element of <paramref name="items"/>.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>The number of bytes written. The offset is not included.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
            <exception cref="T:System.ArgumentException">Concatenated string arrays cannot contain empty or null strings.</exception>
            <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Write(System.IntPtr,System.Object,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Writes the specified value to pre-allocated memory.</summary>
            <param name="ptr">The address of the memory where the value is to be written.</param>
            <param name="value">The value to write.</param>
            <param name="offset">The number of bytes to offset from <paramref name="ptr"/> before writing.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>The number of bytes written. The offset is not included.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="M:Vanara.Extensions.InteropExtensions.Write``1(System.IntPtr,``0@,Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>Writes the specified value to pre-allocated memory.</summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="ptr">The address of the memory where the value is to be written.</param>
            <param name="value">The value to write.</param>
            <param name="offset">The number of bytes to offset from <paramref name="ptr"/> before writing.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>The number of bytes written. The offset is not included.</returns>
            <exception cref="T:System.InsufficientMemoryException"></exception>
        </member>
        <member name="T:Vanara.Extensions.IOExtensions">
            <summary>Extensions for classes in System.IO.</summary>
        </member>
        <member name="M:Vanara.Extensions.IOExtensions.Write``1(System.IO.BinaryWriter,``0)">
            <summary>Writes the specified structure value of type <typeparamref name="T"/> into a binary stream.</summary>
            <typeparam name="T">The type of the structure value to write.</typeparam>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> instance to write into.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Vanara.Extensions.IOExtensions.Read``1(System.IO.BinaryReader)">
            <summary>Reads the specified structure value of type <typeparamref name="T"/> from a binary stream.</summary>
            <typeparam name="T">The type of the structure value to read.</typeparam>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> instance to read from.</param>
            <returns>The value to read from the stream.</returns>
        </member>
        <member name="T:Vanara.Extensions.Reflection.ReflectionExtensions">
            <summary>Extensions for <see cref="T:System.Object"/> related to <c>System.Reflection</c></summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.AlignOf``1">
            <summary>Gets the alignment of a type.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.AsNonNullable(System.Type)">
            <summary>Retrieves the non-<see cref="T:System.Nullable`1"/> type for the provided type.</summary>
            <param name="type">The type.</param>
            <returns>If the type is <see cref="T:System.Nullable`1"/>, returns <c>T</c>; otherwise, returns <paramref name="type"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.CastTo(System.Object,System.Type)">
            <summary>Converts the given value object to the specified type.</summary>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to conver the <paramref name="value"/> paramter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <remarks>
            This will convert <see langword="null"/> or <see cref="T:System.DBNull"/> to itself, values of the requested <paramref name="type"/>, to
            themselves, or will use available <see cref="T:System.ComponentModel.TypeConverter"/> s or <see cref="T:System.IConvertible"/> associations to perform the conversion.
            </remarks>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.EnumInheritance(System.Type)">
            <summary>Get a sequence of types that represent all base types and interfaces.</summary>
            <param name="type">The type to evaluate.</param>
            <returns>A sequence of types that represent all base types and interfaces.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetAlignment(System.Type)">
            <summary>Gets the alignment of the type.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetBitSize(System.Type)">
            <summary>Gets the number of bits in the type's blitted value.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetConstants(System.Type,System.Reflection.BindingFlags)">
            <summary>Searches for the constants defined for <paramref name="type"/>, using the specified binding constraints.</summary>
            <param name="type">The type to search.</param>
            <param name="bindingFlags">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <returns>
            <para>
            A sequence of <see cref="T:System.Reflection.FieldInfo"/> objects representing all fields defined for <paramref name="type"/> that match the
            specified binding constraints.
            </para>
            <para>-or-</para>
            <para>
            An empty sequence of type <see cref="T:System.Reflection.FieldInfo"/>, if no fields are defined for <paramref name="type"/>, or if none of the
            defined fields match the binding constraints.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetFieldValue``1(System.Object,System.String)">
            <summary>Gets a named field value from an object.</summary>
            <typeparam name="T">The expected type of the field to be returned.</typeparam>
            <param name="obj">The object from which to retrieve the field.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetFieldValue``1(System.Object,System.String,``0)">
            <summary>Gets a named field value from an object.</summary>
            <typeparam name="T">The expected type of the field to be returned.</typeparam>
            <param name="obj">The object from which to retrieve the field.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="defaultValue">The default value to return in the instance that the field is not found.</param>
            <returns>The field value, if found, or the <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>Gets a named property value from an object.</summary>
            <typeparam name="T">The expected type of the property to be returned.</typeparam>
            <param name="obj">The object from which to retrieve the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>Gets a named property value from an object.</summary>
            <typeparam name="T">The expected type of the property to be returned.</typeparam>
            <param name="obj">The object from which to retrieve the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">The default value to return in the instance that the property is not found.</param>
            <returns>The property value, if found, or the <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InheritsFrom(System.Type,System.Type)">
            <summary>Determines if a type inherits from another type. The <paramref name="baseType"/> may be a generic type definition.</summary>
            <param name="type">The type.</param>
            <param name="baseType">The base type.</param>
            <returns>
            <see langword="true"/> if <paramref name="baseType"/> is found in the inheritance list for <paramref name="type"/>;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InheritsFrom``1(System.Type)">
            <summary>Determines if a type inherits from another type. The <typeparamref name="T"/> may be a generic type definition.</summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="type">The type.</param>
            <returns>
            <see langword="true"/> if <typeparamref name="T"/> is found in the inheritance list for <paramref name="type"/>;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InvokeGenericMethod(System.Object,System.String,System.Type[],System.Type[],System.Object[])">
            <summary>
            Invokes a generic named method on an object with parameters and no return value.
            </summary>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
            <param name="methodName">The string containing the name of the public method to get.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic method definition.</param>
            <param name="argTypes">An array of Type objects representing the number, order, and type of the parameters for the method to get.
            <para>-or-</para>
            <para>An empty array of Type objects(as provided by the EmptyTypes field) to get a method that takes no parameters.</para></param>
            <param name="args">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.</param>
            <returns>An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verifies that the parameters are valid.</returns>
            <exception cref="T:System.ArgumentException">Method not found - methodName</exception>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>Invokes a named method on an object with parameters and no return value.</summary>
            <param name="obj">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>Invokes a named method on an object with parameters and no return value.</summary>
            <typeparam name="T">The expected type of the method's return value.</typeparam>
            <param name="obj">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InvokeMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>Invokes a named method on an object with parameters and no return value.</summary>
            <param name="obj">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argTypes">The argument types.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.InvokeMethod``1(System.Object,System.String,System.Type[],System.Object[])">
            <summary>Invokes a named method on an object with parameters and no return value.</summary>
            <typeparam name="T">The expected type of the method's return value.</typeparam>
            <param name="obj">The object on which to invoke the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argTypes">The argument types.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsBlittableArray(System.Type)">
            <summary>Gets a value that determines if the type is an array that can be blitted.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsBlittableField(System.Reflection.FieldInfo)">
            <summary>Gets a value that determines if the field is a blittable type.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsBlittablePrimitive(System.Type)">
            <summary>Gets a value that determines if the type is a primitive type that can be blitted.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsFloatingPoint(System.Type)">
            <summary>Gets a value that determines if the type is a floating point type.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsIntegral(System.Type)">
            <summary>Gets a value that determines if the type is an integral type.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsNativeSized(System.Type)">
            <summary>Gets a value that determines if the type is <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.IsPow2(System.Int32)">
            <summary>Gets a value that determines if this integer is a factorial of 2.</summary>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.SetFieldValue``2(``1,System.String,``0)">
            <summary>Sets a named field on an object.</summary>
            <typeparam name="T">The type of the field to be set.</typeparam>
            <typeparam name="TS">The type of the object on which to the set the field.</typeparam>
            <param name="obj">The object on which to set the field.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The field value to set on the object.</param>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.SetFieldValue``2(``1@,System.String,``0)">
            <summary>Sets a named field on an object.</summary>
            <typeparam name="T">The type of the field to be set.</typeparam>
            <typeparam name="TS">The type of the structure on which to the set the field.</typeparam>
            <param name="obj">The object on which to set the field.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The field value to set on the object.</param>
        </member>
        <member name="M:Vanara.Extensions.Reflection.ReflectionExtensions.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>Sets a named property on an object.</summary>
            <typeparam name="T">The type of the property to be set.</typeparam>
            <param name="obj">The object on which to set the property.</param>
            <param name="propName">Name of the property.</param>
            <param name="value">The property value to set on the object.</param>
        </member>
        <member name="T:Vanara.Extensions.ReflectionExtensions">
            <summary>Extensions related to <c>System.Reflection</c></summary>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.CreateOrDefault``1">
            <summary>For a structure, gets either the result of the static Create method or the default.</summary>
            <typeparam name="T">The structure's type.</typeparam>
            <returns>The result of the static Create method or the default.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.FindElementType(System.Type)">
            <summary>Finds the type of the element of a type. Returns null if this type does not enumerate.</summary>
            <param name="type">The type to check.</param>
            <returns>The element type, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.GetAllTypes(System.AppDomain)">
            <summary>Gets all loaded types in the <see cref="T:System.AppDomain"/>.</summary>
            <param name="appDomain">The application domain.</param>
            <returns>All loaded types.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>Returns an array of custom attributes applied to this member and identified by <typeparamref name="TAttr"/>.</summary>
            <typeparam name="TAttr">The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>. This parameter is ignored for properties and events.</param>
            <param name="predicate">An optional predicate to refine the results.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.GetCustomAttributes``1(System.Type,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>Returns an array of custom attributes applied to this member and identified by <typeparamref name="TAttr"/>.</summary>
            <typeparam name="TAttr">The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="type">The type of the <see cref="T:System.Type"/> to examine.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>. This parameter is ignored for properties and events.</param>
            <param name="predicate">An optional predicate to refine the results.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.GetOrderedFields(System.Type,System.Reflection.BindingFlags)">
            <summary>Gets the fields of a structure with sequential layout in the order in which they appear in memory.</summary>
            <param name="type">The type of the structure.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns>An ordered sequence of <see cref="T:System.Reflection.FieldInfo"/> instances representing the fields in the structure.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.GetStaticFieldValue``1(System.String)">
            <summary>Gets a named field value from an object.</summary>
            <typeparam name="T">The expected type of the field to be returned.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.InvokeMethod``1(System.Type,System.String,System.Object[])">
            <summary>Invokes a named method on a created instance of a type with parameters.</summary>
            <typeparam name="T">The expected type of the method's return value.</typeparam>
            <param name="type">The type to be instantiated and then used to invoke the method. This method assumes the type has a default public constructor.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.InvokeMethod``1(System.Type,System.Object[],System.String,System.Object[])">
            <summary>Invokes a named method on a created instance of a type with parameters.</summary>
            <typeparam name="T">The expected type of the method's return value.</typeparam>
            <param name="type">The type to be instantiated and then used to invoke the method.</param>
            <param name="instArgs">The arguments to supply to the constructor.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.InvokeStaticMethod``1(System.Type,System.String,System.Object[])">
            <summary>Invokes a named static method of a type with parameters.</summary>
            <typeparam name="T">The expected type of the method's return value.</typeparam>
            <param name="type">The type containing the static method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments to provide to the method invocation.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.IsMethodCompatibleWithDelegate``1(System.Reflection.MethodInfo)">
            <summary>Determines whether the specified method is compatible with a delegate.</summary>
            <typeparam name="TDel">The type of the delegate.</typeparam>
            <param name="method">The method information.</param>
            <returns><see langword="true"/> if method is compatible with the delegate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.LoadType(System.String,System.String)">
            <summary>Loads a type from a named assembly.</summary>
            <param name="typeName">Name of the type.</param>
            <param name="asmRef">The name or path of the file that contains the manifest of the assembly.</param>
            <returns>The <see cref="T:System.Type"/> reference, or <c>null</c> if type or assembly not found.</returns>
        </member>
        <member name="M:Vanara.Extensions.ReflectionExtensions.TryGetType(System.Reflection.Assembly,System.String,System.Type@)">
            <summary>Tries the retrieve a <see cref="T:System.Type"/> reference from an assembly.</summary>
            <param name="typeName">Name of the type.</param>
            <param name="asm">The assembly from which to load the type.</param>
            <param name="type">The <see cref="T:System.Type"/> reference, if found.</param>
            <returns><c>true</c> if the type was found in the assembly; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Vanara.Extensions.StringHelper">
            <summary>A safe class that represents an object that is pinned in memory.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocChars(Vanara.PInvoke.SizeT,System.Func{System.Int32,System.IntPtr},System.Runtime.InteropServices.CharSet)">
            <summary>Allocates a block of memory allocated from the unmanaged COM task allocator sufficient to hold the number of specified characters.</summary>
            <param name="count">The number of characters, inclusive of the null terminator.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <param name="charSet">The character set.</param>
            <returns>The address of the block of memory allocated.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocChars(Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet)">
            <summary>Allocates a block of memory allocated from the unmanaged COM task allocator sufficient to hold the number of specified characters.</summary>
            <param name="count">The number of characters, inclusive of the null terminator.</param>
            <param name="charSet">The character set.</param>
            <returns>The address of the block of memory allocated.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocSecureString(System.Security.SecureString,System.Runtime.InteropServices.CharSet)">
            <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"/> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
            <param name="s">The managed object to copy.</param>
            <param name="charSet">The character set.</param>
            <returns>The address, in unmanaged memory, where the <paramref name="s"/> parameter was copied to, or 0 if a null object was supplied.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocSecureString(System.Security.SecureString,System.Runtime.InteropServices.CharSet,System.Func{System.Int32,System.IntPtr})">
            <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"/> object to a block of memory allocated from a supplied allocation method.</summary>
            <param name="s">The managed object to copy.</param>
            <param name="charSet">The character set.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <returns>The address, in unmanaged memory, where the <paramref name="s"/> parameter was copied to, or 0 if a null object was supplied.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocSecureString(System.Security.SecureString,System.Runtime.InteropServices.CharSet,System.Func{System.Int32,System.IntPtr},System.Int32@)">
            <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"/> object to a block of memory allocated from a supplied allocation method.</summary>
            <param name="s">The managed object to copy.</param>
            <param name="charSet">The character set.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <param name="allocatedBytes">Returns the number of allocated bytes for the string.</param>
            <returns>The address, in unmanaged memory, where the <paramref name="s"/> parameter was copied to, or 0 if a null object was supplied.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocString(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Copies the contents of a managed String to a block of memory allocated from the unmanaged COM task allocator.</summary>
            <param name="s">A managed string to be copied.</param>
            <param name="charSet">The character set.</param>
            <returns>The allocated memory block, or 0 if <paramref name="s"/> is null.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocString(System.String,System.Runtime.InteropServices.CharSet,System.Func{System.Int32,System.IntPtr})">
            <summary>Copies the contents of a managed String to a block of memory allocated from a supplied allocation method.</summary>
            <param name="s">A managed string to be copied.</param>
            <param name="charSet">The character set.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <returns>The allocated memory block, or 0 if <paramref name="s"/> is null.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocString(System.String,System.Runtime.InteropServices.CharSet,System.Func{System.Int32,System.IntPtr},System.Int32@)">
            <summary>
            Copies the contents of a managed String to a block of memory allocated from a supplied allocation method.
            </summary>
            <param name="s">A managed string to be copied.</param>
            <param name="charSet">The character set.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <param name="allocatedBytes">Returns the number of allocated bytes for the string.</param>
            <returns>The allocated memory block, or 0 if <paramref name="s" /> is null.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.AllocString(System.String,System.Text.Encoding,System.Func{System.Int32,System.IntPtr},System.Int32@)">
            <summary>Copies the contents of a managed String to a block of memory allocated from a supplied allocation method.</summary>
            <param name="s">A managed string to be copied.</param>
            <param name="encoder">The character encoder.</param>
            <param name="memAllocator">The method used to allocate the memory.</param>
            <param name="allocatedBytes">Returns the number of allocated bytes for the string.</param>
            <returns>The allocated memory block, or 0 if <paramref name="s"/> is null.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.FreeSecureString(System.IntPtr,System.Int32,System.Action{System.IntPtr})">
            <summary>
            Zeros out the allocated memory behind a secure string and then frees that memory.
            </summary>
            <param name="ptr">The address of the memory to be freed.</param>
            <param name="sizeInBytes">The size in bytes of the memory pointed to by <paramref name="ptr"/>.</param>
            <param name="memFreer">The memory freer.</param>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.FreeString(System.IntPtr,System.Runtime.InteropServices.CharSet)">
            <summary>Frees a block of memory allocated by the unmanaged COM task memory allocator for a string.</summary>
            <param name="ptr">The address of the memory to be freed.</param>
            <param name="charSet">The character set of the string.</param>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetBytes(System.String,System.Boolean,System.Runtime.InteropServices.CharSet)">
            <summary>Gets the encoded bytes for a string including an optional null terminator.</summary>
            <param name="value">The string value to convert.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the resulting byte array.</param>
            <param name="charSet">The character set.</param>
            <returns>A byte array including <paramref name="value"/> encoded as per <paramref name="charSet"/> and the optional null terminator.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetBytes(System.String,System.Text.Encoding,System.Boolean)">
            <summary>Gets the encoded bytes for a string including an optional null terminator.</summary>
            <param name="value">The string value to convert.</param>
            <param name="enc">The character encoding.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the resulting byte array.</param>
            <returns>A byte array including <paramref name="value"/> encoded as per <paramref name="enc"/> and the optional null terminator.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetByteCount(System.String,System.Boolean,System.Runtime.InteropServices.CharSet)">
            <summary>Gets the number of bytes required to store the string.</summary>
            <param name="value">The string value.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the count if <paramref name="value"/> does not equal <c>null</c>.</param>
            <param name="charSet">The character set.</param>
            <returns>The number of bytes required to store <paramref name="value"/>. Returns 0 if <paramref name="value"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetByteCount(System.String,System.Text.Encoding,System.Boolean)">
            <summary>Gets the number of bytes required to store the string.</summary>
            <param name="value">The string value.</param>
            <param name="enc">The character encoding.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the count if <paramref name="value"/> does not equal <c>null</c>.</param>
            <returns>The number of bytes required to store <paramref name="value"/>. Returns 0 if <paramref name="value"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetChar(System.Text.Encoding,System.IntPtr)">
            <summary>Gets the encoded character from a pointer to a character array</summary>
            <param name="enc">The character encoding type.</param>
            <param name="ptr">The pointer from which to read the character.</param>
            <returns>The encoded character read at <paramref name="ptr"/>, or <see langword="null"/> if <paramref name="ptr"/> is 0.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetCharSize(System.Runtime.InteropServices.CharSet)">
            <summary>Gets the size of a character defined by the supplied <see cref="T:System.Runtime.InteropServices.CharSet"/>.</summary>
            <param name="charSet">The character set to size.</param>
            <returns>The size of a standard character, in bytes, from <paramref name="charSet"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetCharSize(System.Text.Encoding)">
            <summary>Gets the size of a character defined by the supplied <see cref="T:System.Text.Encoding"/>.</summary>
            <param name="enc">The character encoding type.</param>
            <returns>The size of a standard character, in bytes, from <paramref name="enc"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetString(System.IntPtr,System.Runtime.InteropServices.CharSet,System.Int64)">
            <summary>
            Allocates a managed String and copies all characters up to the first null character or the end of the allocated memory pool from a string stored in unmanaged memory into it.
            </summary>
            <param name="ptr">The address of the first character.</param>
            <param name="charSet">The character set of the string.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>
            A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr"/> parameter is not null;
            otherwise, this method returns null.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetString(System.IntPtr,System.Text.Encoding,Vanara.PInvoke.SizeT@,System.Int64)">
            <summary>
            Allocates a managed String and copies all characters up to the first null character or the end of the allocated memory pool from a
            string stored in unmanaged memory into it.
            </summary>
            <param name="ptr">The address of the first character.</param>
            <param name="encoding">The character encoding of the string.</param>
            <param name="readBytes">The number of bytes read.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr" />.</param>
            <returns>
            A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not null;
            otherwise, this method returns null.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.GetString(System.IntPtr,Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet)">
            <summary>
            Allocates a managed String and copies all characters up to the first null character or at most <paramref name="length"/> characters from a string stored in unmanaged memory into it.
            </summary>
            <param name="ptr">The address of the first character.</param>
            <param name="length">The number of characters to copy.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>
            A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr"/> parameter is not null;
            otherwise, this method returns null.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>Indicates whether a specified string is <see langword="null"/>, empty, or consists only of white-space characters.</summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, or if
            value consists exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.RefreshString(System.IntPtr@,System.UInt32@,System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Refreshes the memory block from the unmanaged COM task allocator and copies the contents of a new managed String.</summary>
            <param name="ptr">The address of the first character.</param>
            <param name="charLen">Receives the new character length of the allocated memory block.</param>
            <param name="s">A managed string to be copied.</param>
            <param name="charSet">The character set of the string.</param>
            <returns><c>true</c> if the memory block was reallocated; <c>false</c> if set to null.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.Resolve(System.Runtime.InteropServices.CharSet)">
            <summary>Resolves the specified character set, when set to <see cref="F:System.Runtime.InteropServices.CharSet.Auto"/> to the correct value for the system.</summary>
            <param name="charSet">The character set to resolve.</param>
            <returns>Either <see cref="F:System.Runtime.InteropServices.CharSet.Ansi"/> or <see cref="F:System.Runtime.InteropServices.CharSet.Unicode"/>.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.ToEncoding(System.Runtime.InteropServices.CharSet)">
            <summary>Converts the specified <see cref="T:System.Runtime.InteropServices.CharSet"/> value to its encoding.</summary>
            <param name="charSet">The character set.</param>
            <returns>The matching encoding.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.Write(System.String,System.IntPtr,System.Text.Encoding,System.Boolean,System.Int64)">
            <summary>Writes the specified string to a pointer to allocated memory.</summary>
            <param name="value">The string value.</param>
            <param name="ptr">The pointer to the allocated memory.</param>
            <param name="encoder">The character encoding of the string.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the count if <paramref name="value"/> does not equal <c>null</c>.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
            <returns>The resulting number of bytes written.</returns>
        </member>
        <member name="M:Vanara.Extensions.StringHelper.Write(System.String,System.IntPtr,System.Int32@,System.Boolean,System.Runtime.InteropServices.CharSet,System.Int64)">
            <summary>Writes the specified string to a pointer to allocated memory.</summary>
            <param name="value">The string value.</param>
            <param name="ptr">The pointer to the allocated memory.</param>
            <param name="byteCnt">The resulting number of bytes written.</param>
            <param name="nullTerm">if set to <c>true</c> include a null terminator at the end of the string in the count if <paramref name="value"/> does not equal <c>null</c>.</param>
            <param name="charSet">The character set of the string.</param>
            <param name="allocatedBytes">If known, the total number of bytes allocated to the native memory in <paramref name="ptr"/>.</param>
        </member>
        <member name="T:Vanara.InteropServices.AlignedMemory`1">
            <summary>A memory block aligned on a specific byte boundary.</summary>
            <typeparam name="TMem">The type of the memory.</typeparam>
            <seealso cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/>
        </member>
        <member name="F:Vanara.InteropServices.AlignedMemory`1.mm">
            <summary>The <see cref="T:Vanara.InteropServices.IMemoryMethods"/> implementation instance.</summary>
        </member>
        <member name="F:Vanara.InteropServices.AlignedMemory`1.sz">
            <summary>The number of bytes currently allocated.</summary>
        </member>
        <member name="M:Vanara.InteropServices.AlignedMemory`1.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.AlignedMemory`1"/> class.</summary>
            <param name="sizeInBytes">The number of aligned bytes to allocate.</param>
            <param name="alignmentBoundary">The memory offset to which the memory is aligned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            sizeInBytes - The value of this argument must be non-negative or alignmentBoundary - Alignment must be a power of 2.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.AlignedMemory`1.#ctor(System.Int32,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.AlignedMemory`1"/> class.</summary>
            <param name="sizeInBytes">The number of aligned bytes to allocate.</param>
            <param name="alignemntType">The type to which to align the memory. Memory will be aligned to the byte size of this type.</param>
        </member>
        <member name="P:Vanara.InteropServices.AlignedMemory`1.IsInvalid">
            <summary>Gets a value indicating whether the handle value is invalid.</summary>
        </member>
        <member name="P:Vanara.InteropServices.AlignedMemory`1.Size">
            <summary>Gets or sets the size in bytes of the allocated memory block.</summary>
            <value>The size in bytes of the allocated memory block.</value>
        </member>
        <member name="M:Vanara.InteropServices.AlignedMemory`1.DangerousOverrideSize(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.AlignedMemory`1.InternalReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns>
            <see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure,
            <see langword="false"/>. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Vanara.InteropServices.AnySizeStructUnmanagedFieldArray`1">
            <summary>
            For structures that end with an ANYSIZE array field, this structure can be used to represent the value rather than using <see
            cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray"/> but only when using an <c>unmanaged</c> type for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
        </member>
        <member name="P:Vanara.InteropServices.AnySizeStructUnmanagedFieldArray`1.Item(System.Int32)">
            <summary>Gets a reference to the element of type <typeparamref name="T"/> at the specified index.</summary>
            <value>A reference to the element at <paramref name="index"/>.</value>
            <param name="index">The index.</param>
            <returns>A reference to the element at <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Vanara.InteropServices.AnySizeStructUnmanagedFieldArray`1.AsSpan(System.Int32)">
            <summary>Gets a <see cref="T:System.Span`1"/> of the elements.</summary>
            <param name="length">The length of spanned elements.</param>
            <returns>A <see cref="T:System.Span`1"/> of the elements.</returns>
        </member>
        <member name="T:Vanara.InteropServices.AnySizeStructFieldArray`1">
            <summary>
            For structures that end with an ANYSIZE array field, this structure can be used to represent the value rather than using <see
            cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray"/> but only when using an <c>unmanaged</c> type for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
        </member>
        <member name="F:Vanara.InteropServices.AnySizeStructFieldArray`1.elem">
            <summary>The elem</summary>
        </member>
        <member name="P:Vanara.InteropServices.AnySizeStructFieldArray`1.Item(System.Int32)">
            <summary>Gets a copy of the element of type <typeparamref name="T"/> at the specified index.</summary>
            <value>A copy of the element at <paramref name="index"/>.</value>
            <param name="index">The index.</param>
            <returns>A copy of the element at <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="T:Vanara.InteropServices.ComConnectionPoint">
            <summary>
            Helper class to create an advised COM sink. When this class is constructed, the source is queried for an <see
            cref="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer"/> reference.
            </summary>
        </member>
        <member name="F:Vanara.InteropServices.ComConnectionPoint.connectionPoints">
            <summary>List of connection points.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ComConnectionPoint.#ctor(System.Object,System.Object,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.ComConnectionPoint"/> class.</summary>
            <param name="source">The COM object from which to query the <see cref="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer"/> reference.</param>
            <param name="sink">The object which implements the COM interface or interfaces signaled by an event.</param>
            <param name="interfaces">The interfaces supported by <paramref name="source"/> that support events.</param>
        </member>
        <member name="M:Vanara.InteropServices.ComConnectionPoint.#ctor(System.Object,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.ComConnectionPoint"/> class.</summary>
            <param name="source">The COM object from which to query the <see cref="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer"/> reference.</param>
            <param name="sink">
            The object which implements the COM interface or interfaces signaled by an event. All COM interfaces implemented by this object will
            be used to setup the connection points. If this object implements COM interfaces that cannot be used as connection points, use the
            constructor that allows for supported interfaces to be specified.
            </param>
        </member>
        <member name="P:Vanara.InteropServices.ComConnectionPoint.Sink">
            <summary>Gets the sink.</summary>
            <value>The sink.</value>
        </member>
        <member name="M:Vanara.InteropServices.ComConnectionPoint.Dispose">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ComConnectionPoint.TryGetValue(System.Guid,System.ValueTuple{System.Runtime.InteropServices.ComTypes.IConnectionPoint,System.Int32}@)">
            <summary>Attempts to retrieve the connection point and associated cookie for the specified IID.</summary>
            <param name="key">The IID of the connection point to retrieve.</param>
            <param name="value">
            When this method returns, contains a tuple with the connection point and its associated cookie if the key exists; otherwise, the
            default value for the tuple.
            </param>
            <returns><see langword="true"/> if the key exists and the value was successfully retrieved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.ComReleaserFactory">
            <summary>Factory for creating <see cref="T:Vanara.InteropServices.ComReleaser`1"/> objects.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaserFactory.Create``1(``0)">
            <summary>Factory method to create a <see cref="T:Vanara.InteropServices.ComReleaser`1"/> using type inference.</summary>
            <typeparam name="TObj">The type of the object.</typeparam>
            <param name="obj">The object.</param>
            <returns>A <see cref="T:Vanara.InteropServices.ComReleaser`1"/> instance.</returns>
        </member>
        <member name="T:Vanara.InteropServices.ComReleaser`1">
            <summary>A safe variable to hold an instance of a COM class that automatically releases the instance on disposal.</summary>
            <typeparam name="T">The type of the COM object.</typeparam>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaser`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.ComReleaser`1"/> class.</summary>
            <param name="obj">The COM object instance.</param>
            <exception cref="T:System.ArgumentNullException">obj</exception>
            <exception cref="T:System.ArgumentException">Argument value must be a COM object. - obj</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaser`1.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.ComReleaser`1"/> class.</summary>
            <param name="obj">The COM object instance.</param>
            <exception cref="T:System.ArgumentNullException">obj</exception>
            <exception cref="T:System.ArgumentException">Argument value must be a COM object and expose <typeparamref name="T"/>.</exception>
        </member>
        <member name="P:Vanara.InteropServices.ComReleaser`1.Item">
            <summary>Gets the COM object.</summary>
            <value>The COM object.</value>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaser`1.op_Explicit(`0)~Vanara.InteropServices.ComReleaser{`0}">
            <summary>Performs an implicit conversion from <typeparamref name="T"/> to <see cref="T:Vanara.InteropServices.ComReleaser`1"/>.</summary>
            <param name="obj">The COM object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaser`1.op_Explicit(Vanara.InteropServices.ComReleaser{`0})~`0">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.ComReleaser`1"/> to <typeparamref name="T"/>.</summary>
            <param name="co">The <see cref="T:Vanara.InteropServices.ComReleaser`1"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ComReleaser`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.InteropServices.ComStream">
            <summary>Implements a .NET stream derivation and a COM IStream instance.</summary>
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Runtime.InteropServices.ComTypes.IStream"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Initializes a new instance of the ComStream class.</summary>
            <param name="stream">An IO.Stream</param>
            <param name="leaveOpen">
            <see langword="true"/> to leave the stream open after the <see cref="T:Vanara.InteropServices.ComStream"/> object is disposed; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <summary>Initializes a new instance of the ComStream class.</summary>
            <param name="stream">A ComTypes.IStream</param>
            <param name="leaveOpen">
            <see langword="true"/> to leave the stream open after the <see cref="T:Vanara.InteropServices.ComStream"/> object is disposed; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.CanRead">
            <summary>Gets a value indicating whether this instance can read.</summary>
            <value><see langword="true"/> if this instance can read; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.CanSeek">
            <summary>Gets a value indicating whether this instance can seek.</summary>
            <value><see langword="true"/> if this instance can seek; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.CanTimeout">
            <summary>Gets a value indicating whether this instance can timeout.</summary>
            <value><see langword="true"/> if this instance can timeout; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.CanWrite">
            <summary>Gets a value indicating whether this instance can write.</summary>
            <value><see langword="true"/> if this instance can write; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
        </member>
        <member name="P:Vanara.InteropServices.ComStream.Position">
            <summary>Gets or sets the position.</summary>
            <value>The position.</value>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.ToIStream(System.Object)">
            <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> instance from the <paramref name="stream"/> value, if possible.</summary>
            <param name="stream">The stream.</param>
            <returns>An <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> instance or <see langword="null"/> if not available.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.ToStream(System.Object)">
            <summary>Gets the <see cref="T:System.IO.Stream"/> instance from the <paramref name="stream"/> value, if possible.</summary>
            <param name="stream">The stream.</param>
            <returns>An <see cref="T:System.IO.Stream"/> instance or <see langword="null"/> if not available.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset
            + count - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">Only a zero offset is supported.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.SetLength(System.Int64)">
            <summary>Sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Only a zero offset is supported.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>Creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
            <param name="ppstm">When successful, pointer to the location of an IStream pointer to the new stream object.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">The IO.Streamtream cannot be cloned.</exception>
            <remarks>This method is not used and always throws the exception.</remarks>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Commit(System.Int32)">
            <summary>Ensures that any changes made to an stream object that is open in transacted mode are reflected in the parent storage.</summary>
            <param name="grfCommitFlags">
            Controls how the changes for the stream object are committed. See the STGC enumeration for a definition of these values.
            </param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <remarks>The <paramref name="grfCommitFlags"/> parameter is not used and this method only does Stream.Flush()</remarks>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="pstm">The destination stream. The pstm stream can be a new stream or a clone of the source stream.</param>
            <param name="cb">The number of bytes to copy from the source stream.</param>
            <param name="pcbRead">
            The actual number of bytes read from the source. It can be set to IntPtr.Zero. In this case, this method does not provide the actual
            number of bytes read.
            </param>
            <param name="pcbWritten">
            The actual number of bytes written to the destination. It can be set this to IntPtr.Zero. In this case, this method does not provide
            the actual number of bytes written.
            </param>
            <returns>The actual number of bytes read ( <paramref name="pcbRead"/>) and written ( <paramref name="pcbWritten"/>) from the source.</returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>Restricts access to a specified range of bytes in the stream.</summary>
            <param name="libOffset">Integer that specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Integer that specifies the length of the range, in bytes, to be restricted.</param>
            <param name="dwLockType">Specifies the restrictions being requested on accessing the range.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">The IO.Stream does not support locking.</exception>
            <remarks>This method is not used and always throws the exception.</remarks>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.</summary>
            <param name="pv">The buffer which the stream data is read into.</param>
            <param name="cb">The number of bytes of data to read from the stream object.</param>
            <param name="pcbRead">
            A pointer to a ULONG variable that receives the actual number of bytes read from the stream object. It can be set to IntPtr.Zero. In
            this case, this method does not return the number of bytes read.
            </param>
            <returns>The actual number of bytes read ( <paramref name="pcbRead"/>) from the source.</returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Revert">
            <summary>Discards all changes that have been made to a transacted stream since the last stream.Commit call</summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">The IO.Stream does not support reverting.</exception>
            <remarks>This method is not used and always throws the exception.</remarks>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the stream, the end of the stream, or the current seek pointer
            </summary>
            <param name="dlibMove">
            The displacement to be added to the location indicated by the dwOrigin parameter. If dwOrigin is STREAM_SEEK_SET, this is interpreted
            as an unsigned value rather than a signed value.
            </param>
            <param name="dwOrigin">
            The origin for the displacement specified in dlibMove. The origin can be the beginning of the file (STREAM_SEEK_SET), the current
            seek pointer (STREAM_SEEK_CUR), or the end of the file (STREAM_SEEK_END).
            </param>
            <param name="plibNewPosition">
            The location where this method writes the value of the new seek pointer from the beginning of the stream. It can be set to
            IntPtr.Zero. In this case, this method does not provide the new seek pointer.
            </param>
            <returns>
            Returns in <paramref name="plibNewPosition"/> the location where this method writes the value of the new seek pointer from the
            beginning of the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#SetSize(System.Int64)">
            <summary>Changes the size of the stream object.</summary>
            <param name="libNewSize">Specifies the new size of the stream as a number of bytes.</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>Retrieves the STATSTG structure for this stream.</summary>
            <param name="pstatstg">The STATSTG structure where this method places information about this stream object.</param>
            <param name="grfStatFlag">
            Specifies that this method does not return some of the members in the STATSTG structure, thus saving a memory allocation operation.
            This parameter is not used internally.
            </param>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>Removes the access restriction on a range of bytes previously restricted with the LockRegion method.</summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="dwLockType">Specifies the access restrictions previously placed on the range.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">The IO.Stream does not support unlocking.</exception>
            <remarks>This method is not used and always throws the exception.</remarks>
        </member>
        <member name="M:Vanara.InteropServices.ComStream.System#Runtime#InteropServices#ComTypes#IStream#Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
            <param name="pv">
            The buffer that contains the data that is to be written to the stream. A valid buffer must be provided for this parameter even when
            cb is zero.
            </param>
            <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
            <param name="pcbWritten">
            A variable where this method writes the actual number of bytes written to the stream object. The caller can set this to IntPtr.Zero,
            in which case this method does not provide the actual number of bytes written.
            </param>
            <returns>The actual number of bytes written ( <paramref name="pcbWritten"/>).</returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The IO.Stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="T:Vanara.InteropServices.CorrespondingAction">
            <summary>Actions that can be taken with a corresponding type.</summary>
        </member>
        <member name="F:Vanara.InteropServices.CorrespondingAction.None">
            <summary>No actions may be taken.</summary>
        </member>
        <member name="F:Vanara.InteropServices.CorrespondingAction.Get">
            <summary>The type can be retrieved.</summary>
        </member>
        <member name="F:Vanara.InteropServices.CorrespondingAction.Set">
            <summary>The type can be set.</summary>
        </member>
        <member name="F:Vanara.InteropServices.CorrespondingAction.GetSet">
            <summary>The type can be retrieved and set.</summary>
        </member>
        <member name="F:Vanara.InteropServices.CorrespondingAction.Exception">
            <summary>Throw a <see cref="F:Vanara.InteropServices.CorrespondingAction.Exception"/> if this enumeration value is used.</summary>
        </member>
        <member name="T:Vanara.InteropServices.CorrespondingTypeAttribute">
            <summary>
            Attribute for enum values that provides information about corresponding types and related actions. Useful for Get/Set methods that use an
            enumeration value to determine the type to get or set.
            </summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.#ctor(System.Type,Vanara.InteropServices.CorrespondingAction)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.CorrespondingTypeAttribute"/> class.</summary>
            <param name="typeRef">The type that corresponds to this enumeration value.</param>
            <param name="action">The actions allowed for the type.</param>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.#ctor(Vanara.InteropServices.CorrespondingAction)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.CorrespondingTypeAttribute"/> class.</summary>
            <param name="action">The actions allowed for the type.</param>
        </member>
        <member name="P:Vanara.InteropServices.CorrespondingTypeAttribute.Action">
            <summary>Gets the action allowed for the type.</summary>
            <value>The action allowed for the type.</value>
        </member>
        <member name="P:Vanara.InteropServices.CorrespondingTypeAttribute.EncodingType">
            <summary>Gets or sets the optional encoding type associated with the corresponding type.</summary>
            <value>The encoding type.</value>
        </member>
        <member name="P:Vanara.InteropServices.CorrespondingTypeAttribute.TypeRef">
            <summary>Gets the type that corresponds to this enumeration value.</summary>
            <value>The type that corresponds to this enumeration value.</value>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet(System.Object,System.Type)">
            <summary>Determines whether this instance can get the type for the specified enum value or class.</summary>
            <param name="value">The enumeration value or class instance.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this instance can get the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet``1(``0,System.Type)">
            <summary>Determines whether this instance can get the type for the specified enum type.</summary>
            <param name="value">The enumeration type.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this instance can get the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet(System.Type,System.Type)">
            <summary>Determines whether this type can get the specified reference type.</summary>
            <param name="type">The class type.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this type can get the specified reference type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet``2(``1@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The corresponding type to look for.</typeparam>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if this instance can get the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet``1(System.Type,``0@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <paramref name="typeRef"/>.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="typeRef">The corresponding type to look for.</param>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <paramref name="typeRef"/>.</param>
            <returns><see langword="true"/> if this instance can get the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanGet``2(System.Nullable{``1},``1@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The corresponding type to look for.</typeparam>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="input">If not <see langword="null"/>, the enumeration value to check.</param>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if this instance can get the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet(System.Object,System.Type)">
            <summary>Determines whether this instance can set the type for the specified enum value or class.</summary>
            <param name="value">The enumeration value or class instance.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this instance can set the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet``1(``0,System.Type)">
            <summary>Determines whether this instance can set the type for the specified enum value or class.</summary>
            <param name="value">The enumeration value or class instance.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this instance can set the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet(System.Type,System.Type)">
            <summary>Determines whether this type can set the specified reference type.</summary>
            <param name="type">The class type.</param>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <returns><c>true</c> if this type can set the specified reference type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet``2(``1@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The corresponding type to look for.</typeparam>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if this instance can set the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet``2(System.Nullable{``1},``1@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The corresponding type to look for.</typeparam>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="input">If not <see langword="null"/>, the enumeration value to check.</param>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if this instance can set the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.CanSet``1(System.Type,``0@)">
            <summary>Determines whether an enum value exists that supports a corresponding type of <paramref name="typeRef"/>.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="typeRef">The type supplied by the user to validate.</param>
            <param name="value">The value of type <typeparamref name="TEnum"/> that has the corresponding type <paramref name="typeRef"/>.</param>
            <returns><see langword="true"/> if this instance can get the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetAttrForEnum``1(``0,Vanara.InteropServices.CorrespondingAction)">
            <summary>Gets the CorrespondingTypeAttribute instances associated with an enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The enum value.</param>
            <param name="action">The action to filter for.</param>
            <returns>An enumeration of all associated CorrespondingTypeAttribute instances.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetCorrespondingTypes(System.Object)">
            <summary>Gets the corresponding types for the supplied enumeration value.</summary>
            <param name="enumValue">The class or structure instance.</param>
            <returns>The types defined by the attribute.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetCorrespondingTypes``1(``0)">
            <summary>Gets the corresponding types for the supplied enumeration value.</summary>
            <param name="enumValue">The enumeration value.</param>
            <returns>The types defined by the attribute.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetCorrespondingTypes``1(``0,Vanara.InteropServices.CorrespondingAction)">
            <summary>Gets the corresponding types for the supplied enumeration value.</summary>
            <param name="enumValue">The enumeration value.</param>
            <param name="action">The action to filter for.</param>
            <returns>The types defined by the attribute.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetCorrespondingTypes(System.Type)">
            <summary>Gets the corresponding types for the supplied enumeration value.</summary>
            <param name="type">The class type.</param>
            <returns>The types defined by the attribute.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetAttrForObj(System.Object)">
            <summary>Gets the CorrespondingTypeAttribute instances associated with an enum value or class instance.</summary>
            <param name="value">The enum value or class instance.</param>
            <returns>An enumeration of all associated CorrespondingTypeAttribute instances.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CorrespondingTypeAttribute.GetAttrForType(System.Type)">
            <summary>Gets the CorrespondingTypeAttribute instances associated with a type.</summary>
            <param name="type">The type.</param>
            <returns>An enumeration of all associated CorrespondingTypeAttribute instances.</returns>
        </member>
        <member name="T:Vanara.InteropServices.GenericSafeHandle">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> that takes a delegate in the constructor that closes the supplied handle.</summary>
            <seealso cref="T:System.Runtime.InteropServices.SafeHandle"/>
        </member>
        <member name="M:Vanara.InteropServices.GenericSafeHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GenericSafeHandle"/> class.</summary>
        </member>
        <member name="M:Vanara.InteropServices.GenericSafeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GenericSafeHandle"/> class.</summary>
            <param name="ptr">The pre-existing handle to use.</param>
            <param name="ownsHandle"><see langword="true"/> to reliably release the handle during the finalization phase; <see langword="false"/> to prevent reliable release (not recommended).</param>
        </member>
        <member name="M:Vanara.InteropServices.GenericSafeHandle.#ctor(System.Func{System.IntPtr,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GenericSafeHandle"/> class.</summary>
            <param name="closeMethod">The delegate method for closing the handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.GenericSafeHandle.#ctor(System.IntPtr,System.Func{System.IntPtr,System.Boolean},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GenericSafeHandle"/> class.</summary>
            <param name="ptr">The pre-existing handle to use.</param>
            <param name="closeMethod">The delegate method for closing the handle.</param>
            <param name="ownsHandle"><see langword="true"/> to reliably release the handle during the finalization phase; <see langword="false"/> to prevent reliable release (not recommended).</param>
            <exception cref="T:System.ArgumentNullException">closeMethod</exception>
        </member>
        <member name="P:Vanara.InteropServices.GenericSafeHandle.CloseMethod">
            <summary>Gets or sets the close method.</summary>
            <value>The close method.</value>
        </member>
        <member name="M:Vanara.InteropServices.GenericSafeHandle.InternalReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:Vanara.InteropServices.GuidToStringMarshaler">
            <summary>Provides a custom marshaler for converting <see cref="T:System.Guid"/> objects to and from native string representations.</summary>
            <remarks>
            This marshaler is designed to handle the conversion of <see cref="T:System.Guid"/> instances to native strings and back, using a specified format
            and character set.
            </remarks>
        </member>
        <member name="F:Vanara.InteropServices.GuidToStringMarshaler.fmt">
            <summary>Format specifier for the GUID string representation.</summary>
        </member>
        <member name="F:Vanara.InteropServices.GuidToStringMarshaler.charSet">
            <summary>Character set used for the string representation.</summary>
        </member>
        <member name="M:Vanara.InteropServices.GuidToStringMarshaler.GetInstance(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GuidToStringMarshaler"/> class.</summary>
        </member>
        <member name="M:Vanara.InteropServices.GuidToStringMarshaler.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GuidToStringMarshaler"/> class.</summary>
            <param name="format">
            The format string can include a standard GUID format specifier (e.g., "D", "N", "B", "P", or "X") and an optional <see cref="T:System.Runtime.InteropServices.CharSet"/>
            value (e.g., "Ansi", "Unicode") separated by a comma. If no format is provided, the default format is "D" with the default character set
            determined by the runtime.
            </param>
        </member>
        <member name="T:Vanara.InteropServices.IntPtrConverter">
            <summary>Functions to safely convert a memory pointer to a type.</summary>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.Convert``1(System.IntPtr,System.UInt32,System.Runtime.InteropServices.CharSet)">
            <summary>Converts the specified pointer to <typeparamref name="T"/>.</summary>
            <typeparam name="T">The destination type.</typeparam>
            <param name="ptr">The pointer to a block of memory.</param>
            <param name="sz">The size of the allocated memory block.</param>
            <param name="charSet">The character set.</param>
            <returns>A value of the type specified.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.Convert``1(System.IntPtr,System.UInt32,System.Text.Encoding)">
            <summary>Converts the specified pointer to <typeparamref name="T"/>.</summary>
            <typeparam name="T">The destination type.</typeparam>
            <param name="ptr">The pointer to a block of memory.</param>
            <param name="sz">The size of the allocated memory block.</param>
            <param name="encoding">The character encoding.</param>
            <returns>A value of the type specified.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.ToType``1(Vanara.InteropServices.SafeAllocatedMemoryHandle,System.Runtime.InteropServices.CharSet)">
            <summary>Converts the specified pointer to <typeparamref name="T"/>.</summary>
            <typeparam name="T">The destination type.</typeparam>
            <param name="hMem">A block of allocated memory.</param>
            <param name="charSet">The character set.</param>
            <returns>A value of the type specified.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.ToType``1(Vanara.InteropServices.SafeAllocatedMemoryHandle,System.Text.Encoding)">
            <summary>Converts the specified pointer to <typeparamref name="T"/>.</summary>
            <typeparam name="T">The destination type.</typeparam>
            <param name="hMem">A block of allocated memory.</param>
            <param name="encoding">The character encoding.</param>
            <returns>A value of the type specified.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.Convert(System.IntPtr,System.UInt32,System.Type,System.Runtime.InteropServices.CharSet)">
            <summary>Converts the specified pointer to type specified in <paramref name="destType"/>.</summary>
            <param name="ptr">The pointer to a block of memory.</param>
            <param name="sz">The size of the allocated memory block.</param>
            <param name="destType">The destination type.</param>
            <param name="charSet">The character set.</param>
            <returns>A value of the type specified.</returns>
            <exception cref="T:System.ArgumentException">Cannot convert a null pointer. - ptr or Cannot convert a pointer with no Size. - sz</exception>
            <exception cref="T:System.NotSupportedException">Thrown if type cannot be converted from memory.</exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.IntPtrConverter.Convert(System.IntPtr,System.UInt32,System.Type,System.Text.Encoding)">
            <summary>Converts the specified pointer to type specified in <paramref name="destType"/>.</summary>
            <param name="ptr">The pointer to a block of memory.</param>
            <param name="sz">The size of the allocated memory block.</param>
            <param name="destType">The destination type.</param>
            <param name="encoding">The character encoding.</param>
            <returns>A value of the type specified.</returns>
            <exception cref="T:System.ArgumentException">Cannot convert a null pointer. - ptr or Cannot convert a pointer with no Size. - sz</exception>
            <exception cref="T:System.NotSupportedException">Thrown if type cannot be converted from memory.</exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
        </member>
        <member name="T:Vanara.InteropServices.LibHelper">
            <summary>General functions to support library calls.</summary>
        </member>
        <member name="P:Vanara.InteropServices.LibHelper.Is64BitProcess">
            <summary>Determines whether the current process is a 64-bit process.</summary>
            <value><see langword="true"/> if the process is 64-bit; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.InteropServices.LibHelper.DoesWin32MethodExist(System.String,System.String)">
            <summary>Determines if the specified function name is exported from a module.</summary>
            <param name="moduleName">Name of the module.</param>
            <param name="methodName">Name of the method.</param>
            <returns><see langword="true"/> if the function is exported; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.MarshalingStream">
            <summary>A <see cref="T:System.IO.Stream"/> derivative for working with unmanaged memory.</summary>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.#ctor(System.IntPtr,System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.MarshalingStream"/> class.</summary>
            <param name="unmanagedPtr">The unmanaged PTR.</param>
            <param name="bytesAllocated">The bytes allocated.</param>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.SetLength(System.Int64)">
            <summary>Sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (
            <paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Read``1">
            <summary>Reads a blittable type from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <returns>An object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Type to be read must be blittable. - T</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Poke(System.Byte[],System.Int64)">
            <summary>Pokes the specified buffer at the offset from the starting pointer without changing the <see cref="P:Vanara.InteropServices.MarshalingStream.Position"/>.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offsetFromStart">The offset from start.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Poke(System.IntPtr,System.Int64)">
            <summary>Pokes the specified IntPtr value at the offset from the starting pointer without changing the <see cref="P:Vanara.InteropServices.MarshalingStream.Position"/>.</summary>
            <param name="value">The value.</param>
            <param name="offsetFromStart">The offset from start.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Write``1(``0)">
            <summary>Writes the specified value into the stream.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.InteropServices.MarshalingStream.Write``1(``0[])">
            <summary>Writes the specified array into the stream.</summary>
            <typeparam name="T">The type of the array item.</typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.Capacity">
            <summary>Gets the capacity.</summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.CharSet">
            <summary>Gets or sets the character set.</summary>
            <value>The character set.</value>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.Pointer">
            <summary>Gets the initial pointer supplied to the constructor.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
        </member>
        <member name="P:Vanara.InteropServices.MarshalingStream.PositionPtr">
            <summary>Gets the position PTR.</summary>
            <value>The position PTR.</value>
        </member>
        <member name="T:Vanara.InteropServices.NativeMemoryStream">
            <summary>A <see cref="T:System.IO.Stream"/> derivative for working with unmanaged memory.</summary>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.#ctor(System.Int64,System.Int64,System.Int64,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.NativeMemoryStream"/> class.</summary>
            <param name="capacity">The initial capacity.</param>
            <param name="addCapacitySize">Size of additional blocks of memory to add when capacity is exceeded.</param>
            <param name="maxCapacity">The maximum capacity.</param>
            <param name="access">The mode of file access to the native memory stream.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.#ctor(Vanara.InteropServices.SafeAllocatedMemoryHandle,System.Int64,System.Int64,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.NativeMemoryStream"/> class.</summary>
            <param name="memoryAllocator">The memory allocator used to create and extend the native memory.</param>
            <param name="addCapacitySize">Size of additional blocks of memory to add when capacity is exceeded.</param>
            <param name="maxCapacity">The maximum capacity.</param>
            <param name="access">The mode of file access to the native memory stream.</param>
            <exception cref="T:System.ArgumentNullException">memoryAllocator</exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.#ctor(System.IntPtr,System.Int64,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.NativeMemoryStream"/> class with a pointer and allows for dynamic growth.</summary>
            <param name="unmanagedPtr">The pointer to unmanaged, preallocated memory.</param>
            <param name="bytesAllocated">The bytes allocated to <paramref name="unmanagedPtr"/>.</param>
            <param name="access">The mode of file access to the native memory stream.</param>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.Capacity">
            <summary>Gets or sets the capacity of the underlying buffer.</summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.CharSet">
            <summary>Gets or sets the character set used when processing strings.</summary>
            <value>The character set.</value>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.Length">
            <summary>Gets the length in bytes of the stream.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.MaxCapacity">
            <summary>Gets or sets the maximum capacity.</summary>
            <value>The maximum capacity.</value>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.Pointer">
            <summary>Gets the pointer to the underlying buffer.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.Position">
            <summary>Gets or sets the position within the current stream.</summary>
        </member>
        <member name="P:Vanara.InteropServices.NativeMemoryStream.PositionPtr">
            <summary>Gets the position PTR.</summary>
            <value>The position PTR.</value>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.EnsureCapacity(System.Int64)">
            <summary>Ensures the allocated buffer is large enough for the supplied capacity.</summary>
            <param name="value">The new capacity.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the values between
            <paramref name="offset"/> and ( <paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the
            current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Read(System.Byte[])">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the values replaced by the bytes read
            from the current source.
            </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Read``1(System.Runtime.InteropServices.CharSet)">
            <summary>
            Reads a blittable type from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="charSet">The character set.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Type to be read must be blittable. - T</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Read(System.Type,System.Runtime.InteropServices.CharSet)">
            <summary>
            Reads a blittable type from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="typeToRead">The type of the object to read.</param>
            <param name="charSet">The character set.</param>
            <returns>An object of type <paramref name="typeToRead"/>.</returns>
            <exception cref="T:System.ArgumentException">Type to be read must be blittable. - T</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.ReadArray``1(System.Int32,System.Boolean)">
            <summary>Reads the array.</summary>
            <typeparam name="T">Type of the array element.</typeparam>
            <param name="fsize">The number of elements in the array.</param>
            <param name="byRef">if set to <see langword="true"/>, get the values by reference.</param>
            <returns>An array of length <paramref name="fsize"/> with values of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.ReadArray(System.Type,System.Int32,System.Boolean)">
            <summary>Reads the array.</summary>
            <param name="elemType">Type of the array element.</param>
            <param name="fsize">The number of elements in the array.</param>
            <param name="byRef">if set to <see langword="true"/>, get the values by reference.</param>
            <returns>An array of length <paramref name="fsize"/> with values of type <paramref name="elemType"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.ReadReference``1(System.Runtime.InteropServices.CharSet)">
            <summary>
            Reads a type reference from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="charSet">The character set.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.ReadNullableReference``1">
            <summary>
            Reads a blittable type from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <returns>An object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Type to be read must be blittable. - T</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.ReadToPtr(System.IntPtr,System.Int64)">
            <summary>Copies a specified number of bytes from the stream to a memory location.</summary>
            <param name="ptr">
            The pointer to the memory location that will recieve the bytes. The caller must ensure that sufficient memory has been allocated
            to this pointer.
            </param>
            <param name="bytesToRead">The number of bytes to read.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.SetLength(System.Int64)">
            <summary>Sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.Byte[])">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies all bytes from <paramref name="buffer"/> to the current stream.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write``1(``0@)">
            <summary>Writes the specified value into the stream.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Writes the specified string into the stream.</summary>
            <param name="value">The string value.</param>
            <param name="charSetOverride">The character set override.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.String)">
            <summary>Writes the specified string into the stream.</summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.Collections.IEnumerable,System.Boolean)">
            <summary>Writes the specified array into the stream.</summary>
            <param name="items">The items.</param>
            <param name="byRef">Write values as a referenced array.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Write(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod)">
            <summary>Writes the specified array into the stream.</summary>
            <param name="items">The items.</param>
            <param name="method">The packing method for the strings.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteFromPtr(System.IntPtr,System.Int64)">
            <summary>Writes bytes from a memory location into the stream.</summary>
            <param name="ptr">
            The pointer to the memory location from which to retrieve the bytes to write. The caller must ensure that this memory location
            has at least <paramref name="bytesToWrite"/> of allocated memory.
            </param>
            <param name="bytesToWrite">The number of bytes to write from <paramref name="ptr"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteObject(System.Object)">
            <summary>Writes the specified value into the stream. This function should fail if the object cannot be blitted.</summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteReference``1(``0)">
            <summary>
            Writes a reference to the object (memory address as IntPtr) into the stream and then appends the object to the stream when closed
            or flushed.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteReference``1(System.Nullable{``0})">
            <summary>
            Writes a reference to the object (memory address as IntPtr) into the stream and then appends the object to the stream when closed
            or flushed.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteReference(System.String)">
            <summary>
            Writes a reference to the string (memory address as IntPtr) into the stream and then appends the string to the stream when closed
            or flushed.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.WriteReferenceObject(System.Object)">
            <summary>Writes the specified value into the stream. This function should fail if the object cannot be blitted.</summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Vanara.InteropServices.NativeMemoryStream.GetSize(System.Object,System.Runtime.InteropServices.CharSet)">
            <summary>Gets the size of the object in bytes.</summary>
            <param name="obj">The object to check.</param>
            <param name="charSet">The character set.</param>
            <returns>The size, in bytes, of the object.</returns>
        </member>
        <member name="T:Vanara.InteropServices.PinnedObject">
            <summary>A safe class that represents an object that is pinned in memory.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.#ctor(System.Object,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.PinnedObject"/> class.</summary>
            <param name="obj">The object to pin.</param>
            <param name="offset">The offset into the pinned bytes used to return a pointer.</param>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.FromNullable``1(System.Nullable{``0},System.Int32)">
            <summary>Creates a pinned object from a nullable structure.</summary>
            <typeparam name="T">The type of the structure.</typeparam>
            <param name="obj">The value to pin.</param>
            <param name="offset">The offset into the pinned bytes used to return a pointer.</param>
            <returns>A new instance of <see cref="T:Vanara.InteropServices.PinnedObject"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.PinnedObject"/> class.</summary>
        </member>
        <member name="P:Vanara.InteropServices.PinnedObject.IsInvalid">
            <summary>Gets a value indicating whether the object is no longer pinned.</summary>
            <value><c>true</c> if the object is no longer pinned; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.op_Implicit(Vanara.InteropServices.PinnedObject)~System.IntPtr">
            <summary>Get a pointer ( <see cref="T:System.IntPtr"/>) to the pinned memory of the object with any preset offset.</summary>
            <param name="ap">The <see cref="T:Vanara.InteropServices.PinnedObject"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.op_Implicit(Vanara.InteropServices.PinnedObject)~System.Void*">
            <summary>Get an unsafe pointer to the pinned memory of the object with any preset offset.</summary>
            <param name="ap">The <see cref="T:Vanara.InteropServices.PinnedObject"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.InteropServices.PinnedObject.SetObject(System.Object)">
            <summary>Sets the object. This should only be called once per instance in the constructor.</summary>
            <param name="obj">The object to pin.</param>
        </member>
        <member name="T:Vanara.InteropServices.SafeByteArray">
            <summary>An safe unmanaged array of bytes allocated on the global heap.</summary>
            <seealso cref="T:System.Byte"/>
            <seealso cref="T:System.ICloneable"/>
            <seealso cref="T:System.Collections.IList"/>
            <seealso cref="T:Vanara.InteropServices.SafeHGlobalHandle"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeByteArray"/> class from a copy of a managed byte array.</summary>
            <param name="array">The array of bytes to copy.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeByteArray"/> class and allocates <paramref name="byteCount"/> bytes.</summary>
            <param name="byteCount">The byte count to allocate.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.#ctor(Vanara.InteropServices.SafeByteArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeByteArray"/> class by copying the bytes from another unmanaged array.
            </summary>
            <param name="src">Another unmanaged array.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.System#Collections#IList#IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Byte"/> at the specified index.</summary>
            <value>The <see cref="T:System.Byte"/>.</value>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
            <exception cref="T:System.InvalidOperationException">Object is not valid.</exception>
        </member>
        <member name="P:Vanara.InteropServices.SafeByteArray.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Object"/> at the specified index.</summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.Contains(System.Byte)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection{T}"/> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection{T}"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection{T}"/> to an <see cref="T:System.Array"/>, starting
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see
            cref="T:System.Collections.Generic.ICollection{T}"/> . The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">array</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.IndexOf(System.Byte)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList{T}"/>.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList{T}"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.ToArray">
            <summary>Copies unmanaged bytes to a managed byte array.</summary>
            <returns>Copied byte array.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <param name="comparer">
            An object that compares members of the current collection object with the corresponding members of <paramref name="other"/>.
            </param>
            <returns>
            An integer that indicates the relationship of the current collection object to <paramref name="other"/>, as shown in the
            following table.Return valueDescription-1The current instance precedes <paramref name="other"/>.0The current instance and
            <paramref name="other"/> are equal.1The current instance follows <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see
            cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">array</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <param name="comparer">The comparer.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
            <summary>Returns a hash code for this instance.</summary>
            <param name="comparer">The comparer.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <exception cref="T:System.ArgumentNullException">comparer</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <paramref name="value"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList{T}"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList{T}"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection{T}"/>;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection{T}"/>.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList{T}"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeByteArray.System#Collections#Generic#IList{System#Byte}#RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList{T}"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:Vanara.InteropServices.CoTaskMemoryMethods">
            <summary>Unmanaged memory methods for COM.</summary>
            <seealso cref="T:Vanara.InteropServices.IMemoryMethods"/>
        </member>
        <member name="P:Vanara.InteropServices.CoTaskMemoryMethods.Vanara#InteropServices#ISimpleMemoryMethods#AllocZeroes">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.InteropServices.CoTaskMemoryMethods.Vanara#InteropServices#ISimpleMemoryMethods#Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.CoTaskMemoryMethods.Instance">
            <summary>Static instance to methods.</summary>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.AllocMem(System.Int32)">
            <summary>Gets a handle to a memory allocation of the specified size.</summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.AllocSecureStringAnsi(System.Security.SecureString)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.AllocSecureStringUni(System.Security.SecureString)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.AllocStringAnsi(System.String)">
            <summary>Gets the Ansi string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.AllocStringUni(System.String)">
            <summary>Gets the Unicode string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.FreeSecureStringAnsi(System.IntPtr)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.FreeSecureStringUni(System.IntPtr)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.LockMem(System.IntPtr)">
            <summary>Locks the memory of a specified handle and gets a pointer to it.</summary>
            <param name="hMem">A memory handle.</param>
            <returns>A pointer to the locked memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.CoTaskMemoryMethods.UnlockMem(System.IntPtr)">
            <summary>Unlocks the memory of a specified handle.</summary>
            <param name="hMem">A memory handle.</param>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeCoTaskMemHandle">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for memory allocated via COM.</summary>
            <seealso cref="T:System.Runtime.InteropServices.SafeHandle"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor(System.Byte[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeCoTaskMemHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor(System.IntPtr[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="values">Array of unmanaged pointers</param>
            <returns>SafeCoTaskMemHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor(System.String)">
            <summary>Allocates from unmanaged memory to represent a Unicode string (WSTR) and marshal this to a native PWSTR.</summary>
            <param name="s">The string value.</param>
            <returns>SafeCoTaskMemHandle object to an native (unmanaged) Unicode string</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> class.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeCoTaskMemHandle.Null">
            <summary>Represents a NULL memory pointer.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.Create(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.Create(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.Create(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.CreateFromList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Allocates from unmanaged memory to represent a structure with a variable length array at the end and marshal these structure
            elements. It is the callers responsibility to marshal what precedes the trailing array into the unmanaged memory. ONLY
            structures with attribute StructLayout of LayoutKind.Sequential are supported.
            </summary>
            <typeparam name="T">Type of the trailing array of structures</typeparam>
            <param name="values">Collection of structure objects</param>
            <param name="count">
            Number of items in <paramref name="values"/>. Setting this value to -1 will cause the method to get the count by iterating
            through <paramref name="values"/>.
            </param>
            <param name="prefixBytes">Number of bytes preceding the trailing array of structures</param>
            <returns><see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> object to an native (unmanaged) structure with a trail array of structures</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.CreateFromStringList(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet,System.Int32)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an array of strings.</summary>
            <param name="values">The list of strings.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <returns>
            <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> object to an native (unmanaged) array of strings stored using the <paramref name="packing"/>
            model and the character set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.CreateFromStructure``1(``0@)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an object of type T.</summary>
            <typeparam name="T">Native type</typeparam>
            <param name="value">The value.</param>
            <returns><see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> object to an native (unmanaged) memory block the size of T.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemHandle.op_Implicit(System.IntPtr)~Vanara.InteropServices.SafeCoTaskMemHandle">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> where it owns the reference.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeCoTaskMemString">
            <summary>Safely handles an unmanaged memory allocated Unicode string.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor(System.String,System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="capacity">The size of the buffer in characters.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor(System.Security.SecureString,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor(System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class.</summary>
            <param name="capacity">The size of the buffer in characters, including the null character terminator.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class from being created.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemString.#ctor(System.IntPtr,System.Runtime.InteropServices.CharSet,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemString"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="charSet">The character set.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeCoTaskMemString.Null">
            <summary>Represents a <c>null</c> value. Used primarily for comparison.</summary>
            <value>A null value.</value>
        </member>
        <member name="T:Vanara.InteropServices.HGlobalMemoryMethods">
            <summary>Unmanaged memory methods for HGlobal.</summary>
            <seealso cref="T:Vanara.InteropServices.IMemoryMethods"/>
        </member>
        <member name="P:Vanara.InteropServices.HGlobalMemoryMethods.Vanara#InteropServices#ISimpleMemoryMethods#AllocZeroes">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.InteropServices.HGlobalMemoryMethods.Vanara#InteropServices#ISimpleMemoryMethods#Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.HGlobalMemoryMethods.Instance">
            <summary>Static instance to methods.</summary>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.AllocMem(System.Int32)">
            <summary>Gets a handle to a memory allocation of the specified size.</summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.AllocSecureStringAnsi(System.Security.SecureString)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.AllocSecureStringUni(System.Security.SecureString)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.AllocStringAnsi(System.String)">
            <summary>Gets the Ansi string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.AllocStringUni(System.String)">
            <summary>Gets the Unicode string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.FreeSecureStringAnsi(System.IntPtr)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.FreeSecureStringUni(System.IntPtr)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.LockMem(System.IntPtr)">
            <summary>Locks the memory of a specified handle and gets a pointer to it.</summary>
            <param name="hMem">A memory handle.</param>
            <returns>A pointer to the locked memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.HGlobalMemoryMethods.UnlockMem(System.IntPtr)">
            <summary>Unlocks the memory of a specified handle.</summary>
            <param name="hMem">A memory handle.</param>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeHGlobalHandle">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for memory allocated via LocalAlloc.</summary>
            <seealso cref="T:System.Runtime.InteropServices.SafeHandle"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(System.Byte[])">
            <summary>Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native array equivalent.</summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(System.IntPtr[])">
            <summary>Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native array equivalent.</summary>
            <param name="values">Array of unmanaged pointers</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor(System.String)">
            <summary>Allocates from unmanaged memory to represent a Unicode string (WSTR) and marshal this to a native PWSTR.</summary>
            <param name="s">The string value.</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) Unicode string</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> class.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeHGlobalHandle.Null">
            <summary>Represents a NULL memory pointer.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.op_Implicit(System.IntPtr)~Vanara.InteropServices.SafeHGlobalHandle">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a <see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> where it owns the reference.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.Create(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.Create(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.Create(Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.CreateFromStructure``1(``0@)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an object of type T.</summary>
            <typeparam name="T">Native type</typeparam>
            <param name="value">The value.</param>
            <returns><see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> object to an native (unmanaged) memory block the size of T.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.CreateFromList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Allocates from unmanaged memory to represent a structure with a variable length array at the end and marshal these structure elements. It is the
            callers responsibility to marshal what precedes the trailing array into the unmanaged memory. ONLY structures with attribute StructLayout of
            LayoutKind.Sequential are supported.
            </summary>
            <typeparam name="T">Type of the trailing array of structures</typeparam>
            <param name="values">Collection of structure objects</param>
            <param name="count">Number of items in <paramref name="values"/>.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing array of structures</param>
            <returns><see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> object to an native (unmanaged) structure with a trail array of structures</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalHandle.CreateFromStringList(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet,System.Int32)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an array of strings.</summary>
            <param name="values">The list of strings.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <returns><see cref="T:Vanara.InteropServices.SafeHGlobalHandle"/> object to an native (unmanaged) array of strings stored using the <paramref name="packing"/> model and the character set defined by <paramref name="charSet"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeLPSTR">
            <summary>Class that reprents a LPSTR with allocated memory behind it.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="capacity">The size of the buffer in characters.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor(System.Security.SecureString)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class.</summary>
            <param name="capacity">The size of the buffer in characters, including the null character terminator.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class from being created.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.#ctor(Vanara.InteropServices.StrPtrAnsi,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeLPSTR.Null">
            <summary>Represents a <c>null</c> value. Used primarily for comparison.</summary>
            <value>A null value.</value>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.op_Implicit(Vanara.InteropServices.SafeLPSTR)~Vanara.InteropServices.StrPtrAnsi">
            <summary>Returns the StrPtrAnsi value held by a <see cref="T:Vanara.InteropServices.SafeLPSTR"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeLPSTR"/> instance.</param>
            <returns>A <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> value held by the <see cref="T:Vanara.InteropServices.SafeLPSTR"/> or <c>default</c> if the handle or value is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Append(System.String)">
            <summary>Appends a copy of the specified string to this instance.</summary>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Append(Vanara.InteropServices.SafeLPSTR)">
            <summary>Appends a copy of the specified value to this instance.</summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Insert(System.Int32,System.String)">
            <summary>Inserts a string into this instance at the specified character position.</summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than the current length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Remove(System.Int32,System.Int32)">
            <summary>Removes the specified range of characters from this instance.</summary>
            <param name="startIndex">The zero-based position in this instance where removal begins.</param>
            <param name="length">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="startIndex"/> or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref
            name="length"/> is greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Replace(System.String,System.String)">
            <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>Replaces the specified old value.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Replace(System.Char,System.Char)">
            <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPSTR.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> + <paramref name="count"/> is greater than the length of the value of this instance.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than zero.</para>
            </exception>
        </member>
        <member name="T:Vanara.InteropServices.SafeLPTSTR">
            <summary>Class that reprents a LPTSTR with allocated memory behind it.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="capacity">The size of the buffer in characters.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor(System.Security.SecureString)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class.</summary>
            <param name="capacity">The size of the buffer in characters, including the null character terminator.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class from being created.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.#ctor(Vanara.InteropServices.StrPtrAuto,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeLPTSTR.Null">
            <summary>Represents a <c>null</c> value. Used primarily for comparison.</summary>
            <value>A null value.</value>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.op_Implicit(Vanara.InteropServices.SafeLPTSTR)~Vanara.InteropServices.StrPtrAuto">
            <summary>Returns the StrPtrAuto value held by a <see cref="T:Vanara.InteropServices.SafeLPTSTR"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> instance.</param>
            <returns>A <see cref="T:Vanara.InteropServices.StrPtrAuto"/> value held by the <see cref="T:Vanara.InteropServices.SafeLPTSTR"/> or <c>default</c> if the handle or value is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Append(System.String)">
            <summary>Appends a copy of the specified string to this instance.</summary>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Append(Vanara.InteropServices.SafeLPTSTR)">
            <summary>Appends a copy of the specified value to this instance.</summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Insert(System.Int32,System.String)">
            <summary>Inserts a string into this instance at the specified character position.</summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than the current length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Remove(System.Int32,System.Int32)">
            <summary>Removes the specified range of characters from this instance.</summary>
            <param name="startIndex">The zero-based position in this instance where removal begins.</param>
            <param name="length">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="startIndex"/> or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref
            name="length"/> is greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Replace(System.String,System.String)">
            <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>Replaces the specified old value.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Replace(System.Char,System.Char)">
            <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPTSTR.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> + <paramref name="count"/> is greater than the length of the value of this instance.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than zero.</para>
            </exception>
        </member>
        <member name="T:Vanara.InteropServices.SafeLPWSTR">
            <summary>Class that reprents a LPWSTR with allocated memory behind it.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="capacity">The size of the buffer in characters.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor(System.Security.SecureString)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class.</summary>
            <param name="capacity">The size of the buffer in characters, including the null character terminator.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class from being created.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.#ctor(Vanara.InteropServices.StrPtrUni,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeLPWSTR.Null">
            <summary>Represents a <c>null</c> value. Used primarily for comparison.</summary>
            <value>A null value.</value>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.op_Implicit(Vanara.InteropServices.SafeLPWSTR)~Vanara.InteropServices.StrPtrUni">
            <summary>Returns the StrPtrUni value held by a <see cref="T:Vanara.InteropServices.SafeLPWSTR"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> instance.</param>
            <returns>A <see cref="T:Vanara.InteropServices.StrPtrUni"/> value held by the <see cref="T:Vanara.InteropServices.SafeLPWSTR"/> or <c>default</c> if the handle or value is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Append(System.String)">
            <summary>Appends a copy of the specified string to this instance.</summary>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Append(Vanara.InteropServices.SafeLPWSTR)">
            <summary>Appends a copy of the specified value to this instance.</summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Insert(System.Int32,System.String)">
            <summary>Inserts a string into this instance at the specified character position.</summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than the current length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Remove(System.Int32,System.Int32)">
            <summary>Removes the specified range of characters from this instance.</summary>
            <param name="startIndex">The zero-based position in this instance where removal begins.</param>
            <param name="length">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="startIndex"/> or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref
            name="length"/> is greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Replace(System.String,System.String)">
            <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>Replaces the specified old value.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Replace(System.Char,System.Char)">
            <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeLPWSTR.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> + <paramref name="count"/> is greater than the length of the value of this instance.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than zero.</para>
            </exception>
        </member>
        <member name="T:Vanara.InteropServices.StringListPackMethod">
            <summary>Method used to pack a list of strings into memory.</summary>
        </member>
        <member name="F:Vanara.InteropServices.StringListPackMethod.Concatenated">
            <summary>Each string is separated by a single '\0' character and is terminated by two '\0' characters.</summary>
        </member>
        <member name="F:Vanara.InteropServices.StringListPackMethod.Packed">
            <summary>
            A contiguous block of memory containing an array of pointers to strings followed by a NULL pointer and then followed by the
            actual strings.
            </summary>
        </member>
        <member name="T:Vanara.InteropServices.IMemoryMethods">
            <summary>Interface to capture unmanaged memory methods.</summary>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.AllocSecureStringAnsi(System.Security.SecureString)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.AllocSecureStringUni(System.Security.SecureString)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.AllocStringAnsi(System.String)">
            <summary>Gets the Ansi string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.AllocStringUni(System.String)">
            <summary>Gets the Unicode string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.FreeSecureStringAnsi(System.IntPtr)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.FreeSecureStringUni(System.IntPtr)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.IMemoryMethods.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="T:Vanara.InteropServices.ISafeMemoryHandleBase">
            <summary>Defines the base functionality for a safe memory handle, providing methods and properties for managing allocated memory.</summary>
            <remarks>
            This interface represents a safe memory handle that supports operations such as copying memory, retrieving bytes, locking, and unlocking.
            It is designed to abstract memory management in scenarios where direct memory manipulation is required. Implementations of this interface
            may provide additional functionality, such as span-based access or event handling.
            </remarks>
        </member>
        <member name="P:Vanara.InteropServices.ISafeMemoryHandleBase.Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.ISafeMemoryHandleBase.Size">
            <summary>Gets or sets the size in bytes of the allocated memory block.</summary>
            <value>The size in bytes of the allocated memory block.</value>
        </member>
        <member name="E:Vanara.InteropServices.ISafeMemoryHandleBase.HandleChanged">
            <summary>Occurs when the handle has changed.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.AsBytes">
            <summary>Casts this allocated memory to a <c>Span&lt;Byte&gt;</c>.</summary>
            <returns>A span of type <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.AsReadOnlySpan``1(System.Int32)">
            <summary>Creates a new span over this allocated memory.</summary>
            <returns>The span representation of the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.AsSpan``1(System.Int32)">
            <summary>Creates a new span over this allocated memory.</summary>
            <returns>The span representation of the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.CopyTo(System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Copies memory from this allocation to an allocated memory pointer.</summary>
            <param name="dest">A pointer to allocated memory that must be at least <paramref name="length"/> bytes.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.CopyTo(Vanara.PInvoke.SizeT,System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Copies memory from this allocation to an allocated memory pointer.</summary>
            <param name="start">The starting offset within this allocation at which to start copying.</param>
            <param name="dest">A pointer to allocated memory that must be at least <paramref name="length" /> bytes.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.CopyTo(Vanara.InteropServices.ISafeMemoryHandleBase)">
            <summary>Copies memory from this allocation to an allocated memory handle.</summary>
            <param name="dest">A safe handle to allocated memory.</param>
            <exception cref="T:System.ArgumentNullException">dest</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destOffset</exception>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.CopyTo(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.InteropServices.ISafeMemoryHandleBase,Vanara.PInvoke.SizeT)">
            <summary>Copies memory from this allocation to an allocated memory handle.</summary>
            <param name="start">The starting offset within this allocation at which to start copying.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="dest">A safe handle to allocated memory.</param>
            <param name="destOffset">The offset within <paramref name="dest"/> at which to start copying.</param>
            <exception cref="T:System.ArgumentNullException">dest</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destOffset - The destination buffer is not large enough.</exception>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.DangerousOverrideSize(Vanara.PInvoke.SizeT)">
            <summary>
            Overrides the stored size of the allocated memory. This should be used with extreme caution only in cases where the the derived class
            is returned from a P/Invoke call and no size has been set in a constructor.
            </summary>
            <param name="newSize">The size to be set as the new size of the allocated memory.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.GetBytes">
            <summary>Gets a copy of bytes from the allocated memory block.</summary>
            <returns>A byte array with the copied bytes.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.GetBytes(System.Int32,System.Int32)">
            <summary>Gets a copy of bytes from the allocated memory block.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of bytes to retrieve.</param>
            <returns>A byte array with the copied bytes.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.GetContentHashCode">
            <summary>Gets a hash code value for all bytes within the allocated memory.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.Lock">
            <summary>Locks this instance.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.TakeOwnership">
            <summary>Releases the owned handle without releasing the allocated memory and returns a pointer to the current memory.</summary>
            <returns>A pointer to the currently allocated memory. The caller now has the responsibility to free this memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandleBase.Unlock">
            <summary>Decrements the lock count.</summary>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.ISafeMemoryHandle">
            <summary>Interface for classes that support safe memory pointers.</summary>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.AddSubReference(System.IDisposable[])">
            <summary>
            Adds reference to other SafeMemoryHandle objects, the pointer to which are referred to by this object. This is to ensure that
            such objects being referred to wouldn't be unreferenced until this object is active. For e.g. when this object is an array of
            pointers to other objects
            </summary>
            <param name="children">Collection of SafeMemoryHandle objects referred to by this object.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.Fill(System.Byte,System.Int32)">
            <summary>Fills the allocated memory with a specific byte value.</summary>
            <param name="value">The byte value.</param>
            <param name="length">The number of bytes in the block of memory to be filled.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToArray``1(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Extracts an array of structures of <typeparamref name="T"/> containing <paramref name="count"/> items. <note type="note">This
            call can cause memory exceptions if the pointer does not have sufficient allocated memory to retrieve all the structures.</note>
            </summary>
            <typeparam name="T">The type of the structures to retrieve.</typeparam>
            <param name="count">The number of structures to retrieve.</param>
            <param name="prefixBytes">The number of bytes to skip before reading the structures.</param>
            <returns>An array of structures of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToEnumerable``1(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Extracts an enumeration of structures of <typeparamref name="T"/> containing <paramref name="count"/> items. <note
            type="note">This call can cause memory exceptions if the pointer does not have sufficient allocated memory to retrieve all the structures.</note>
            </summary>
            <typeparam name="T">The type of the structures to retrieve.</typeparam>
            <param name="count">The number of structures to retrieve.</param>
            <param name="prefixBytes">The number of bytes to skip before reading the structures.</param>
            <returns>An enumeration of structures of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToString(System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <param name="len">The length.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToString(System.Int32,Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet)">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <param name="len">The length.</param>
            <param name="prefixBytes">Number of bytes preceding the string pointer.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToStringEnum(System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT)">
            <summary>
            Gets an enumerated list of strings from a block of unmanaged memory where each string is separated by a single '\0' character
            and is terminated by two '\0' characters.
            </summary>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <returns>Enumeration of strings.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToStringEnum(Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT)">
            <summary>
            Returns an enumeration of strings from memory where each string is pointed to by a preceding list of pointers of length
            <paramref name="count"/>.
            </summary>
            <param name="count">The count.</param>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <returns>An enumerated list of strings.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISafeMemoryHandle.ToStructure``1(Vanara.PInvoke.SizeT)">
            <summary>
            Marshals data from this block of memory to a newly allocated managed object of the type specified by a generic type parameter.
            </summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <param name="prefixBytes">Number of bytes preceding the structure.</param>
            <returns>A managed object that contains the data that this <see cref="T:Vanara.InteropServices.SafeMemoryHandleExt`1"/> holds.</returns>
        </member>
        <member name="T:Vanara.InteropServices.ISafeMemoryHandleFactory">
            <summary>
            Extension interface for <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> that allows the creation of a new instance of the memory handle.
            </summary>
        </member>
        <member name="T:Vanara.InteropServices.ISimpleMemoryMethods">
            <summary>Interface to capture unmanaged simple (alloc/free) memory methods.</summary>
        </member>
        <member name="P:Vanara.InteropServices.ISimpleMemoryMethods.Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.InteropServices.ISimpleMemoryMethods.AllocMem(System.Int32)">
            <summary>Gets a handle to a memory allocation of the specified size.</summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISimpleMemoryMethods.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.ISimpleMemoryMethods.LockMem(System.IntPtr)">
            <summary>Locks the memory of a specified handle and gets a pointer to it.</summary>
            <param name="hMem">A memory handle.</param>
            <returns>A pointer to the locked memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.ISimpleMemoryMethods.UnlockMem(System.IntPtr)">
            <summary>Unlocks the memory of a specified handle.</summary>
            <param name="hMem">A memory handle.</param>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Vanara.InteropServices.ISimpleMemoryMethods.AllocZeroes">
            <summary>Gets a value indicating whether <see cref="M:Vanara.InteropServices.ISimpleMemoryMethods.AllocMem(System.Int32)"/> zeroes memory before returning.</summary>
            <value><see langword="true"/> if <see cref="M:Vanara.InteropServices.ISimpleMemoryMethods.AllocMem(System.Int32)"/> zeroes memory before returning; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Vanara.InteropServices.MemoryMethodsBase">
            <summary>Implementation of <see cref="T:Vanara.InteropServices.IMemoryMethods"/> using just the methods from <see cref="T:Vanara.InteropServices.ISimpleMemoryMethods"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.IMemoryMethods"/>
        </member>
        <member name="P:Vanara.InteropServices.MemoryMethodsBase.AllocZeroes">
            <summary>Gets a value indicating whether <see cref="M:Vanara.InteropServices.MemoryMethodsBase.AllocMem(System.Int32)"/> zeroes memory before returning.</summary>
            <value><see langword="true"/> if <see cref="M:Vanara.InteropServices.MemoryMethodsBase.AllocMem(System.Int32)"/> zeroes memory before returning; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.MemoryMethodsBase.Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.AllocMem(System.Int32)">
            <summary>
            Gets a handle to a memory allocation of the specified size.
            </summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>
            A memory handle.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.AllocSecureStringAnsi(System.Security.SecureString)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.AllocSecureStringUni(System.Security.SecureString)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> allocation method.</summary>
            <param name="secureString">The secure string.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.AllocStringAnsi(System.String)">
            <summary>Gets the Ansi string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.AllocStringUni(System.String)">
            <summary>Gets the Unicode string allocation method.</summary>
            <param name="value">The value.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.FreeSecureStringAnsi(System.IntPtr)">
            <summary>Gets the Ansi <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.FreeSecureStringUni(System.IntPtr)">
            <summary>Gets the Unicode <see cref="T:System.Security.SecureString"/> free method.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.LockMem(System.IntPtr)">
            <summary>Locks the memory of a specified handle and gets a pointer to it.</summary>
            <param name="hMem">A memory handle.</param>
            <returns>A pointer to the locked memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.InteropServices.MemoryMethodsBase.UnlockMem(System.IntPtr)">
            <summary>Unlocks the memory of a specified handle.</summary>
            <param name="hMem">A memory handle.</param>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase">
            <summary>
            Abstract base class for all SafeHandle derivatives that encapsulate handling unmanaged memory. This class assumes read-only memory.
            </summary>
            <seealso cref="T:System.IComparable`1" />
            <seealso cref="T:System.IComparable`1" />
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:Vanara.PInvoke.SafeHANDLE" />
        </member>
        <member name="E:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.HandleChanged">
            <summary>Occurs when the handle has changed.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Size">
            <summary>Gets or sets the size in bytes of the allocated memory block.</summary>
            <value>The size in bytes of the allocated memory block.</value>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.op_Explicit(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)~System.Byte*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> to <see cref="T:System.Byte"/> pointer.</summary>
            <param name="hMem">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The safe handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.op_Explicit(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)~System.Runtime.InteropServices.SafeBuffer">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> to <see cref="T:System.Runtime.InteropServices.SafeBuffer"/>.</summary>
            <param name="hMem">The <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.AsReadOnlySpan``1(System.Int32)">
            <summary>Creates a new span over this allocated memory.</summary>
            <returns>The span representation of the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.AsSpan``1(System.Int32)">
            <summary>Creates a new span over this allocated memory.</summary>
            <returns>The span representation of the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.AsBytes">
            <summary>Casts this allocated memory to a <c>Span&lt;Byte&gt;</c>.</summary>
            <returns>A span of type <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CompareTo(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CompareTo(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CompareTo(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CopyTo(System.IntPtr,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CopyTo(Vanara.PInvoke.SizeT,System.IntPtr,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CopyTo(Vanara.InteropServices.ISafeMemoryHandleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CopyTo(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT,Vanara.InteropServices.ISafeMemoryHandleBase,Vanara.PInvoke.SizeT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.DangerousOverrideSize(Vanara.PInvoke.SizeT)">
            <summary>
            Overrides the stored size of the allocated memory. This should be used with extreme caution only in cases where the the derived class
            is returned from a P/Invoke call and no size has been set in a constructor.
            </summary>
            <param name="newSize">The size to be set as the new size of the allocated memory.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Equals(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.GetContentHashCode">
            <summary>Gets a hash code value for all bytes within the allocated memory.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Lock">
            <summary>Locks this instance.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.Unlock">
            <summary>Decrements the lock count.</summary>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.ReleaseOwnership">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.TakeOwnership">
            <summary>Releases the owned handle without releasing the allocated memory and returns a pointer to the current memory.</summary>
            <returns>A pointer to the currently allocated memory. The caller now has the responsibility to free this memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.GetBytes">
            <summary>Gets a copy of bytes from the allocated memory block.</summary>
            <returns>A byte array with the copied bytes.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.GetBytes(System.Int32,System.Int32)">
            <summary>Gets a copy of bytes from the allocated memory block.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of bytes to retrieve.</param>
            <returns>A byte array with the copied bytes.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CallLocked(System.Action{System.IntPtr})">
            <summary>Runs a delegate method while locking the memory.</summary>
            <param name="action">The action to perform while memory is locked.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.CallLocked``1(System.Func{System.IntPtr,``0})">
            <summary>Runs a delegate method while locking the memory.</summary>
            <param name="action">The action to perform while memory is locked.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandleBase.SetHandle(System.IntPtr)">
            <summary>Sets the handle to the specified pre-existing handle.</summary>
            <param name="h">The pre-existing handle to use.</param>
            <remarks>
            Use the SetHandle method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure)
            because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.
            </remarks>
        </member>
        <member name="T:Vanara.InteropServices.SafeAllocatedMemoryHandle">
            <summary>Abstract base class for all SafeHandle derivatives that encapsulate handling unmanaged memory.</summary>
            <seealso cref="T:System.Runtime.InteropServices.SafeHandle"/>
        </member>
        <member name="F:Vanara.InteropServices.SafeAllocatedMemoryHandle.references">
            <summary>
            Maintains reference to other SafeMemoryHandleExt objects, the pointer to which are referred to by this object. This is to ensure
            that such objects being referred to wouldn't be unreferenced until this object is active.
            </summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.AddSubReference(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Adds reference to other SafeMemoryHandle objects, the pointer to which are referred to by this object. This is to ensure that
            such objects being referred to wouldn't be unreferenced until this object is active. For e.g. when this object is an array of
            pointers to other objects
            </summary>
            <param name="children">Collection of SafeMemoryHandle objects referred to by this object.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.AddSubReference(System.IDisposable[])">
            <summary>
            Adds reference to other SafeMemoryHandle objects, the pointer to which are referred to by this object. This is to ensure that
            such objects being referred to wouldn't be unreferenced until this object is active. For e.g. when this object is an array of
            pointers to other objects
            </summary>
            <param name="children">Collection of SafeMemoryHandle objects referred to by this object.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.Fill(System.Byte)">
            <summary>Fills the allocated memory with a specific byte value.</summary>
            <param name="value">The byte value.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.Fill(System.Byte,System.Int32)">
            <summary>Fills the allocated memory with a specific byte value.</summary>
            <param name="value">The byte value.</param>
            <param name="length">The number of bytes in the block of memory to be filled.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.Zero">
            <summary>Zero out all allocated memory.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeAllocatedMemoryHandle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.InteropServices.SafeMemoryHandle`1">
            <summary>Abstract base class for all SafeAllocatedMemoryHandle derivatives that apply a specific memory handling routine set.</summary>
            <typeparam name="TMem">The <see cref="T:Vanara.InteropServices.IMemoryMethods"/> implementation.</typeparam>
        </member>
        <member name="F:Vanara.InteropServices.SafeMemoryHandle`1.mm">
            <summary>The <see cref="T:Vanara.InteropServices.IMemoryMethods"/> implementation instance.</summary>
        </member>
        <member name="F:Vanara.InteropServices.SafeMemoryHandle`1.sz">
            <summary>The number of bytes currently allocated.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.#ctor(System.Byte[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.#ctor(Vanara.InteropServices.SafeAllocatedMemoryHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/> class from a <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/>
            instance, copying all the memory.
            </summary>
            <param name="source">The source memory block.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryHandle`1.IsInvalid">
            <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryHandle`1.Lockable">
            <summary>Gets a value indicating whether this memory supports locking.</summary>
            <value><see langword="true"/> if lockable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryHandle`1.Size">
            <summary>Gets or sets the size in bytes of the allocated memory block.</summary>
            <value>The size in bytes of the allocated memory block.</value>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.DangerousOverrideSize(Vanara.PInvoke.SizeT)">
            <summary>
            Overrides the stored size of the allocated memory. This should be used with extreme caution only in cases where the the derived class
            is returned from a P/Invoke call and no size has been set in a constructor.
            </summary>
            <param name="newSize">The size to be set as the new size of the allocated memory.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.Lock">
            <summary>Locks this instance.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.Unlock">
            <summary>Decrements the lock count.</summary>
            <returns><see langword="true"/> if the memory object is still locked after decrementing the lock count; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.CloneMemory">
            <summary>
            Clones the memory tied to this instance using <see cref="M:Vanara.InteropServices.ISimpleMemoryMethods.AllocMem(System.Int32)"/> and returns a pointer to the
            copied memory.
            </summary>
            <returns>
            A pointer, allocated using <see cref="M:Vanara.InteropServices.ISimpleMemoryMethods.AllocMem(System.Int32)"/>, to a copy of the memory allocated to this instance.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandle`1.InternalReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it
            generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeMemoryHandleExt`1">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for memory allocated via COM.</summary>
            <seealso cref="T:System.Runtime.InteropServices.SafeHandle"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandleExt`1"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandleExt`1"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(System.Byte[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(System.IntPtr[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="values">Array of unmanaged pointers</param>
            <returns>SafeMemoryHandleExt object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Allocates from unmanaged memory to represent a Unicode string (WSTR) and marshal this to a native PWSTR.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>SafeMemoryHandleExt object to an native (unmanaged) string</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.#ctor(Vanara.InteropServices.SafeAllocatedMemoryHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandleExt`1"/> class from a <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/>
            instance, copying all the memory.
            </summary>
            <param name="source">The source memory block.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToArray``1(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Extracts an array of structures of <typeparamref name="T"/> containing <paramref name="count"/> items. <note type="note">This
            call can cause memory exceptions if the pointer does not have sufficient allocated memory to retrieve all the structures.</note>
            </summary>
            <typeparam name="T">The type of the structures to retrieve.</typeparam>
            <param name="count">The number of structures to retrieve.</param>
            <param name="prefixBytes">The number of bytes to skip before reading the structures.</param>
            <returns>An array of structures of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToEnumerable``1(Vanara.PInvoke.SizeT,Vanara.PInvoke.SizeT)">
            <summary>
            Extracts an enumeration of structures of <typeparamref name="T"/> containing <paramref name="count"/> items. <note
            type="note">This call can cause memory exceptions if the pointer does not have sufficient allocated memory to retrieve all the structures.</note>
            </summary>
            <typeparam name="T">The type of the structures to retrieve.</typeparam>
            <param name="count">The number of structures to retrieve.</param>
            <param name="prefixBytes">The number of bytes to skip before reading the structures.</param>
            <returns>An enumeration of structures of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToString(System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <param name="len">The length.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToString(System.Int32,Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet)">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <param name="len">The length.</param>
            <param name="prefixBytes">Number of bytes preceding the string pointer.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToStringEnum(Vanara.PInvoke.SizeT,System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT)">
            <summary>
            Returns an enumeration of strings from memory where each string is pointed to by a preceding list of pointers of length
            <paramref name="count"/>.
            </summary>
            <param name="count">The count of expected strings.</param>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <returns>Enumeration of strings.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToStringEnum(System.Runtime.InteropServices.CharSet,Vanara.PInvoke.SizeT)">
            <summary>
            Gets an enumerated list of strings from a block of unmanaged memory where each string is separated by a single '\0' character
            and is terminated by two '\0' characters.
            </summary>
            <param name="charSet">The character set of the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the array of string pointers.</param>
            <returns>An enumerated list of strings.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ToStructure``1(Vanara.PInvoke.SizeT)">
            <summary>
            Marshals data from this block of memory to a newly allocated managed object of the type specified by a generic type parameter.
            </summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <param name="prefixBytes">Number of bytes preceding the structure.</param>
            <returns>A managed object that contains the data that this <see cref="T:Vanara.InteropServices.SafeMemoryHandleExt`1"/> holds.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.Write``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Marshals data from a managed list of specified type to an offset within this allocated memory.</summary>
            <typeparam name="T">
            A type of the enumerated managed object that holds the data to be marshaled. The object must be a structure or an instance of a
            formatted class.
            </typeparam>
            <param name="items">The enumerated list of items to marshal.</param>
            <param name="autoExtend">
            if set to <c>true</c> automatically extend the allocated memory to the size required to hold <paramref name="items"/>.
            </param>
            <param name="offset">The number of bytes to skip before writing the first element of <paramref name="items"/>.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.Write``1(``0@,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Writes the specified value to an offset within this allocated memory.</summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="value">The value to write.</param>
            <param name="autoExtend">
            if set to <c>true</c> automatically extend the allocated memory to the size required to hold <paramref name="value"/>.
            </param>
            <param name="offset">The number of bytes to offset from the beginning of this allocated memory before writing.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.Write(System.Object,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Writes the specified value to an offset within this allocated memory.</summary>
            <param name="value">The value to write.</param>
            <param name="autoExtend">
            if set to <c>true</c> automatically extend the allocated memory to the size required to hold <paramref name="value"/>.
            </param>
            <param name="offset">The number of bytes to offset from the beginning of this allocated memory before writing.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it
            generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryHandleExt`1.AsRef``1">
            <summary>Gets a reference to a structure based on this allocated memory.</summary>
            <returns>A referenced structure.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeMemoryPool`1">
            <summary>A memory pool that will automatically release all memory pointers on disposal.</summary>
            <typeparam name="TMem">The type of the memory allocator.</typeparam>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Vanara.InteropServices.SafeMemoryPool`1"/> class.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryPool`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryPool`1.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemoryPool`1.Values">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add(System.IntPtr)">
            <summary>Adds the specified pointer to the memory pool.</summary>
            <param name="ptr">The pointer to memory allocated with the same allocator as specified by <typeparamref name="TMem"/>.</param>
            <returns>The value of <paramref name="ptr"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Adds the specified string to the memory pool.</summary>
            <param name="value">The string value.</param>
            <param name="charSet">The character set.</param>
            <returns>The pointer to the allocated memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add``1(``0)">
            <summary>Adds the specified value to the memory pool.</summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <returns>The pointer to the allocated memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add(System.String,System.IntPtr)">
            <summary>Adds the specified pointer to the memory pool.</summary>
            <param name="key">The key used to identify the entry.</param>
            <param name="ptr">The pointer to memory allocated with the same allocator as specified by <typeparamref name="TMem"/>.</param>
            <returns>The value of <paramref name="ptr"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add(System.String,System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Adds the specified string to the memory pool.</summary>
            <param name="key">The key used to identify the entry.</param>
            <param name="value">The string value.</param>
            <param name="charSet">The character set.</param>
            <returns>The pointer to the allocated memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Add``1(System.String,``0)">
            <summary>Adds the specified value to the memory pool.</summary>
            <param name="key">The key used to identify the entry.</param>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <returns>The pointer to the allocated memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Contains(System.Collections.Generic.KeyValuePair{System.String,System.IntPtr})">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.TryGetValue(System.String,System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemoryPool`1.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.InteropServices.SafeMemString`1">
            <summary>Base abstract class for a string handler based on <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/>.</summary>
            <typeparam name="TMem">The type of the memory.</typeparam>
            <seealso cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/>
        </member>
        <member name="F:Vanara.InteropServices.SafeMemString`1.defaultCharSet">
            <summary>The system default character set for evaluating CharSet.Auto.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor(System.String,System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="capacity">The capacity of the buffer, in characters.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor(System.Security.SecureString,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor(System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class.</summary>
            <param name="charLen">The size of the buffer in characters, including the null character terminator.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class from being created.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.#ctor(System.IntPtr,System.Runtime.InteropServices.CharSet,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="charSet">The character set.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemString`1.Capacity">
            <summary>Gets the number of allocated characters or 0 if the size is unknown (for example if it is holding a <see cref="T:System.Security.SecureString"/>.</summary>
            <value>The number of allocated characters.</value>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemString`1.CharSet">
            <summary>Gets the character set of the assigned string.</summary>
            <value>The character set.</value>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemString`1.Length">
            <summary>Gets the number of characters in the current <see cref="T:Vanara.InteropServices.SafeMemString`1"/> object.</summary>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemString`1.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Char"/> at the specified index.</summary>
            <value>The <see cref="T:System.Char"/>.</value>
            <param name="index">The index of the character in the in-memory string.</param>
            <returns>The character.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Explicit(Vanara.InteropServices.SafeMemString{`0})~System.Char*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.SafeMemString`1"/> to <see cref="T:System.Char"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemString`1"/> instance.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">Cannot convert an ANSI string to a Char pointer.</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Implicit(Vanara.InteropServices.SafeMemString{`0})~System.IntPtr">
            <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"/> field.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemString`1"/> instance.</param>
            <returns>
            An <see cref="T:System.IntPtr"/> representing the value of the handle field. If the handle has been marked invalid with <see
            cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"/>, this method still returns the original handle value, which can be a stale value.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Implicit(Vanara.InteropServices.SafeMemString{`0})~System.ReadOnlySpan{System.Char}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeMemString`1"/> to <see cref="T:System.ReadOnlySpan`1"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Implicit(Vanara.InteropServices.SafeMemString{`0})~System.Span{System.Char}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeMemString`1"/> to <see cref="T:System.Span`1"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Implicit(Vanara.InteropServices.SafeMemString{`0})~System.String">
            <summary>Returns the string value held by a <see cref="T:Vanara.InteropServices.SafeMemString`1"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemString`1"/> instance.</param>
            <returns>A <see cref="T:System.String"/> value held by the <see cref="T:Vanara.InteropServices.SafeMemString`1"/> or <c>null</c> if the handle or value is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Inequality(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator !=.</summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Inequality(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator !=.</summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_LessThan(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_LessThan(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator &lt;.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_LessThanOrEqual(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_LessThanOrEqual(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator &lt;=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Equality(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator ==.</summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_Equality(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator ==.</summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_GreaterThan(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_GreaterThan(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator &gt;.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_GreaterThanOrEqual(Vanara.InteropServices.SafeMemString{`0},Vanara.InteropServices.SafeMemString{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.op_GreaterThanOrEqual(Vanara.InteropServices.SafeMemString{`0},System.String)">
            <summary>Implements the operator &gt;=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Clear">
            <summary>Removes all characters from the current instance.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.CompareTo(Vanara.InteropServices.SafeMemString{`0})">
            <summary>Compares the current object with another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <para>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>Less than zero</description>
            <description>This object is less than the <paramref name="other"/> parameter.</description>
            </item>
            <item>
            <description>Zero</description>
            <description>This object is equal to <paramref name="other"/>.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description>This object is greater than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.CompareTo(System.String)">
            <summary>Compares the current object with a <see cref="T:System.String"/>.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <para>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>Less than zero</description>
            <description>This object is less than the <paramref name="other"/> parameter.</description>
            </item>
            <item>
            <description>Zero</description>
            <description>This object is equal to <paramref name="other"/>.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description>This object is greater than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance
            precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <para>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>Less than zero</description>
            <description>This object is less than the <paramref name="other"/> parameter.</description>
            </item>
            <item>
            <description>Zero</description>
            <description>This object is equal to <paramref name="other"/>.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description>This object is greater than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Equals(Vanara.InteropServices.SafeMemString{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Equals(System.String)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.GetEnumerator">
            <summary>Retrieves an enumerator that can iterate through the individual characters in this string.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through individual characters in this string.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Set(System.String)">
            <summary>Assigns a new string to this memory.</summary>
            <param name="value">
            The string value. This value can be <see langword="null"/>, but its length cannot be greater than the current <see cref="P:Vanara.InteropServices.SafeMemString`1.Capacity"/>.
            </param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.ToString">
            <summary>Returns the string value held by this instance.</summary>
            <returns>A <see cref="T:System.String"/> value held by this instance or <c>null</c> if the handle is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Append(System.String)">
            <summary>Appends a copy of the specified string to this instance.</summary>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Insert(System.Int32,System.String)">
            <summary>Inserts a string into this instance at the specified character position.</summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The string to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than the current length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Remove(System.Int32,System.Int32)">
            <summary>Removes the specified range of characters from this instance.</summary>
            <param name="startIndex">The zero-based position in this instance where removal begins.</param>
            <param name="length">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="startIndex"/> or <paramref name="length"/> is less than zero, or <paramref name="startIndex"/> + <paramref
            name="length"/> is greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>Replaces the specified old value.</summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces <paramref name="oldValue"/>, or <see langword="null"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemString`1.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character that replaces <paramref name="oldChar"/>.</param>
            <param name="startIndex">The position in this instance where the substring begins.</param>
            <param name="count">The length of the substring.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> + <paramref name="count"/> is greater than the length of the value of this instance.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than zero.</para>
            </exception>
        </member>
        <member name="T:Vanara.InteropServices.SafeMemStruct`2">
            <summary>Base abstract class for a structure handler based on <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/>.</summary>
            <typeparam name="TStruct">The type of the structure.</typeparam>
            <typeparam name="TMem">The type of the memory.</typeparam>
            <seealso cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/>
        </member>
        <member name="F:Vanara.InteropServices.SafeMemStruct`2.BaseStructSize">
            <summary>The structure size, in bytes, of TStruct.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.#ctor(`0@,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> class.</summary>
            <param name="s">The TStruct value.</param>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> class.</summary>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.#ctor(System.IntPtr,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemStruct`2.HasValue">
            <summary>Gets a value indicating whether the current memory has a valid value of its underlying type.</summary>
            <value><see langword="true"/> if this instance has a value; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.InteropServices.SafeMemStruct`2.Value">
            <summary>
            Gets or sets the value of the current <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> object if it has been assigned a valid
            underlying value.
            </summary>
            <value>
            The value of the current <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> object if the HasValue property is true. An exception is
            thrown if the HasValue property is false.
            </value>
            <exception cref="T:System.InvalidOperationException">The HasValue property is false.</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.op_Explicit(Vanara.InteropServices.SafeMemStruct{`0,`1})~System.Nullable{`0}">
            <summary>Returns the TStruct value held by a <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> instance.</param>
            <returns>
            A nullable value held by the <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> or <c>null</c> if the handle or value is invalid.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.op_Explicit(Vanara.InteropServices.SafeMemStruct{`0,`1})~System.Void*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> to <see cref="T:System.Char"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> instance.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">Cannot convert an ANSI string to a Char pointer.</exception>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.op_Implicit(Vanara.InteropServices.SafeMemStruct{`0,`1})~System.IntPtr">
            <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"/> field.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> instance.</param>
            <returns>
            An <see cref="T:System.IntPtr"/> representing the value of the handle field. If the handle has been marked invalid with <see
            cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"/>, this method still returns the original handle value, which can be a stale value.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.op_Implicit(Vanara.InteropServices.SafeMemStruct{`0,`1})~`0">
            <summary>Returns the TStruct value held by a <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/>.</summary>
            <param name="s">The <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> instance.</param>
            <returns>
            The structure value held by the <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> or an <see cref="T:System.InvalidOperationException"/>
            exception if the handle or value is invalid.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.Append(System.Byte[])">
            <summary>Appends the specified bytes to the end of the allocated memory for this structure, expanding the allocation to fit the byte array.</summary>
            <param name="bytes">The bytes.</param>
            <returns>A pointer to the copied bytes in memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.Append(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)">
            <summary>Appends the specified memory to the end of the allocated memory for this structure, expanding the allocation to fit the added memory.</summary>
            <param name="mem">The memory to append.</param>
            <returns>A pointer to the copied memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.Append(System.Object)">
            <summary>Appends the specified object to the end of the allocated memory for this structure, expanding the allocation to fit the added object.</summary>
            <param name="value">The value to append.</param>
            <returns>A pointer to the copied memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.GetFieldAddress(System.String)">
            <summary>Gets the memory address of a field within <typeparamref name="TStruct"/>.</summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The pointer to the field in memory.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.GetValueOrDefault(`0@)">
            <summary>Retrieves the value of the current <see cref="T:Vanara.InteropServices.SafeMemStruct`2"/> object, or the specified default value.</summary>
            <param name="defaultValue">A value to return if the <see cref="P:Vanara.InteropServices.SafeMemStruct`2.HasValue"/> property is <see langword="false"/>.</param>
            <returns>
            The value of the <see cref="P:Vanara.InteropServices.SafeMemStruct`2.Value"/> property if the <see cref="P:Vanara.InteropServices.SafeMemStruct`2.HasValue"/> property is <see langword="true"/>; otherwise, the
            <paramref name="defaultValue"/> parameter.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.InitializeSizeField(System.String)">
            <summary>Initializes the size field by the specified name or the first four bytes of the structure's memory.</summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.ToString">
            <summary>Returns the string value held by this instance.</summary>
            <returns>A <see cref="T:System.String"/> value held by this instance or <c>null</c> if the handle is invalid.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.FieldAddress(System.String)">
            <summary>Returns the addresss of the named field.</summary>
            <param name="name">The field address.</param>
            <returns>The address of the field within the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.FieldOffset(System.String)">
            <summary>Returns the field offset of the named field.</summary>
            <param name="name">The field name.</param>
            <returns>The offset, in bytes, of the field within the structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.AsRef">
            <summary>Gets a reference to a structure based on this allocated memory.</summary>
            <returns>A referenced structure.</returns>
        </member>
        <member name="M:Vanara.InteropServices.SafeMemStruct`2.AsSpan">
            <summary>Creates a new span over this allocated memory.</summary>
            <returns>The span representation of the structure.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeCoTaskMemStruct`1">
            <summary>A structure handler based on unmanaged memory allocated by AllocCoTaskMem.</summary>
            <typeparam name="TStruct">The type of the structure.</typeparam>
            <seealso cref="T:Vanara.InteropServices.SafeMemStruct`2"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemStruct`1.#ctor(`0@,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemStruct`1"/> class.</summary>
            <param name="s">The TStruct value.</param>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemStruct`1.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemStruct`1"/> class.</summary>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemStruct`1.#ctor(System.IntPtr,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeCoTaskMemStruct`1"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="F:Vanara.InteropServices.SafeCoTaskMemStruct`1.Null">
            <summary>Represents the <see langword="null"/> equivalent of this class instances.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeCoTaskMemStruct`1.op_Implicit(System.Nullable{`0})~Vanara.InteropServices.SafeCoTaskMemStruct{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Vanara.InteropServices.SafeCoTaskMemStruct`1"/>.</summary>
            <param name="s">The value of the <typeparamref name="TStruct"/> instance or <see langword="null"/>.</param>
            <returns>The resulting <see cref="T:Vanara.InteropServices.SafeCoTaskMemStruct`1"/> instance from the conversion.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeHGlobalStruct`1">
            <summary>A structure handler based on unmanaged memory allocated by AllocHGlobal.</summary>
            <typeparam name="TStruct">The type of the structure.</typeparam>
            <seealso cref="T:Vanara.InteropServices.SafeMemStruct`2"/>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalStruct`1.#ctor(`0@,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/> class.</summary>
            <param name="s">The TStruct value.</param>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalStruct`1.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/> class.</summary>
            <param name="capacity">The capacity of the buffer, in bytes.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalStruct`1.#ctor(System.IntPtr,System.Boolean,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/> class.</summary>
            <param name="ptr">The PTR.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during finalization; <c>false</c> to prevent it.</param>
            <param name="allocatedBytes">The number of bytes allocated to <paramref name="ptr"/>.</param>
        </member>
        <member name="F:Vanara.InteropServices.SafeHGlobalStruct`1.Null">
            <summary>Represents the <see langword="null"/> equivalent of this class instances.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeHGlobalStruct`1.op_Implicit(System.Nullable{`0})~Vanara.InteropServices.SafeHGlobalStruct{`0}">
            <summary>Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/>.</summary>
            <param name="s">The value of the <typeparamref name="TStruct"/> instance or <see langword="null"/>.</param>
            <returns>The resulting <see cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/> instance from the conversion.</returns>
        </member>
        <member name="T:Vanara.InteropServices.GuidPtr">
            <summary>The GuidPtr structure represents a LPGUID.</summary>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.#ctor(System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.GuidPtr"/> struct by allocating memory with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"/>.</summary>
            <param name="g">The guid value.</param>
        </member>
        <member name="P:Vanara.InteropServices.GuidPtr.IsNull">
            <summary>Gets a value indicating whether this instance is equivalent to null pointer or void*.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.InteropServices.GuidPtr.Value">
            <summary>Gets the value of the Guid.</summary>
            <value>The value pointed to by this pointer.</value>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Assign(System.Guid)">
            <summary>Assigns a new Guid value to the pointer.</summary>
            <param name="g">The guid value.</param>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Equals(System.Nullable{System.Guid})">
            <summary>Determines whether the specified <see cref="T:System.Nullable`1"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.Nullable`1"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Nullable`1"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Equals(Vanara.InteropServices.GuidPtr)">
            <summary>Determines whether the specified <see cref="T:Vanara.InteropServices.GuidPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.InteropServices.GuidPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Vanara.InteropServices.GuidPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Equals(System.IntPtr)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.Free">
            <summary>Frees the unmanaged memory.</summary>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Implicit(Vanara.InteropServices.GuidPtr)~System.Nullable{System.Guid}">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.GuidPtr"/> to <see cref="T:System.Nullable`1"/>.</summary>
            <param name="g">The pointer to a Guid.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Explicit(Vanara.InteropServices.GuidPtr)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.GuidPtr"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="g">The pointer to a Guid.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Implicit(System.IntPtr)~Vanara.InteropServices.GuidPtr">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.InteropServices.GuidPtr"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Implicit(Vanara.InteropServices.SafeAllocatedMemoryHandleBase)~Vanara.InteropServices.GuidPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandleBase"/> to <see cref="T:Vanara.InteropServices.GuidPtr"/>.</summary>
            <param name="p">The safe memory handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Equality(Vanara.InteropServices.GuidPtr,Vanara.InteropServices.GuidPtr)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.GuidPtr"/> are equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.GuidPtr.op_Inequality(Vanara.InteropServices.GuidPtr,Vanara.InteropServices.GuidPtr)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.GuidPtr"/> are not equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> does not equal <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.StrPtrAnsi">
            <summary>The StrPtr structure represents a LPWSTR.</summary>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> struct.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> struct.</summary>
            <param name="charLen">Number of characters to reserve in memory.</param>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrAnsi.IsNull">
            <summary>Gets a value indicating whether this instance is equivalent to null pointer or void*.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrAnsi.IsNullOrEmpty">
            <summary>Indicates whether the specified string is <see langword="null"/> or an empty string ("").</summary>
            <returns>
            <see langword="true"/> if the value parameter is <see langword="null"/> or an empty string (""); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Assign(System.String)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Assign(System.String,System.UInt32@)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
            <param name="charsAllocated">The character count allocated.</param>
            <returns><c>true</c> if new memory was allocated for the string; <c>false</c> if otherwise.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.AssignConstant(System.Int32)">
            <summary>Assigns an integer to the pointer for uses such as LPSTR_TEXTCALLBACK.</summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Equals(System.IntPtr)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Equals(System.String)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Equals(Vanara.InteropServices.StrPtrAnsi)">
            <summary>Determines whether the specified <see cref="T:Vanara.InteropServices.StrPtrAnsi"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.Free">
            <summary>Frees the unmanaged string memory.</summary>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Implicit(Vanara.InteropServices.StrPtrAnsi)~System.String">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> to <see cref="T:System.String"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Explicit(Vanara.InteropServices.StrPtrAnsi)~System.SByte*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.StrPtrUni"/> to <see cref="T:System.SByte"/>*.</summary>
            <param name="p">The <see cref="T:System.SByte"/>* reference.</param>
            <returns>The resulting <see cref="T:System.SByte"/>* from the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Explicit(Vanara.InteropServices.StrPtrAnsi)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Implicit(System.IntPtr)~Vanara.InteropServices.StrPtrAnsi">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.InteropServices.StrPtrAnsi"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Equality(Vanara.InteropServices.StrPtrAnsi,Vanara.InteropServices.StrPtrAnsi)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> are equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAnsi.op_Inequality(Vanara.InteropServices.StrPtrAnsi,Vanara.InteropServices.StrPtrAnsi)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> are not equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> does not equal <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.StrPtrAuto">
            <summary>The StrPtr structure represents a LPTSTR.</summary>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrAuto"/> struct.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrAuto"/> struct.</summary>
            <param name="charLen">Number of characters to reserve in memory.</param>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrAuto.IsNull">
            <summary>Gets a value indicating whether this instance is equivalent to null pointer or void*.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Assign(System.IntPtr)">
            <summary>Assigns a string pointer value to the pointer.</summary>
            <param name="stringPtr">The string pointer value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Assign(System.String)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Assign(System.String,System.UInt32@)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
            <param name="charsAllocated">The character count allocated.</param>
            <returns><c>true</c> if new memory was allocated for the string; <c>false</c> if otherwise.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.AssignConstant(System.Int32)">
            <summary>Assigns an integer to the pointer for uses such as LPSTR_TEXTCALLBACK.</summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Free">
            <summary>Frees the unmanaged string memory.</summary>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrAuto.IsNullOrEmpty">
            <summary>Indicates whether the specified string is <see langword="null"/> or an empty string ("").</summary>
            <returns>
            <see langword="true"/> if the value parameter is <see langword="null"/> or an empty string (""); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.op_Implicit(Vanara.InteropServices.StrPtrAuto)~System.String">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.StrPtrAuto"/> to <see cref="T:System.String"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrAuto"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.op_Explicit(Vanara.InteropServices.StrPtrAuto)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.StrPtrAuto"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrAuto"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.op_Implicit(System.IntPtr)~Vanara.InteropServices.StrPtrAuto">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.InteropServices.StrPtrAuto"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Equals(System.IntPtr)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Equals(System.String)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Equals(Vanara.InteropServices.StrPtrAuto)">
            <summary>Determines whether the specified <see cref="T:Vanara.InteropServices.StrPtrAuto"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.InteropServices.StrPtrAuto"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Vanara.InteropServices.StrPtrAuto"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.op_Equality(Vanara.InteropServices.StrPtrAuto,Vanara.InteropServices.StrPtrAuto)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrAuto"/> are equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrAuto.op_Inequality(Vanara.InteropServices.StrPtrAuto,Vanara.InteropServices.StrPtrAuto)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrAuto"/> are not equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> does not equal <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.StrPtrUni">
            <summary>The StrPtr structure represents a LPWSTR.</summary>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrUni"/> struct.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.StrPtrUni"/> struct.</summary>
            <param name="charLen">Number of characters to reserve in memory.</param>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrUni.IsNull">
            <summary>Gets a value indicating whether this instance is equivalent to null pointer or void*.</summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Assign(System.String)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Assign(System.String,System.UInt32@)">
            <summary>Assigns a new string value to the pointer.</summary>
            <param name="s">The string value.</param>
            <param name="charsAllocated">The character count allocated.</param>
            <returns><c>true</c> if new memory was allocated for the string; <c>false</c> if otherwise.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.AssignConstant(System.Int32)">
            <summary>Assigns an integer to the pointer for uses such as LPSTR_TEXTCALLBACK.</summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Free">
            <summary>Frees the unmanaged string memory.</summary>
        </member>
        <member name="P:Vanara.InteropServices.StrPtrUni.IsNullOrEmpty">
            <summary>Indicates whether the specified string is <see langword="null"/> or an empty string ("").</summary>
            <returns>
            <see langword="true"/> if the value parameter is <see langword="null"/> or an empty string (""); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Implicit(Vanara.InteropServices.StrPtrUni)~System.String">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.InteropServices.StrPtrUni"/> to <see cref="T:System.String"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrUni"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Explicit(Vanara.InteropServices.StrPtrUni)~System.Char*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.StrPtrUni"/> to <see cref="T:System.Char"/>*.</summary>
            <param name="p">The <see cref="T:System.Char"/>* reference.</param>
            <returns>The resulting <see cref="T:System.Char"/>* from the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Explicit(Vanara.InteropServices.StrPtrUni)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.InteropServices.StrPtrUni"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="p">The <see cref="T:Vanara.InteropServices.StrPtrUni"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Implicit(System.Char*)~Vanara.InteropServices.StrPtrUni">
            <summary>Performs an implicit conversion from <see cref="T:System.Char"/>* to <see cref="T:Vanara.InteropServices.StrPtrUni"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Implicit(System.IntPtr)~Vanara.InteropServices.StrPtrUni">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.InteropServices.StrPtrUni"/>.</summary>
            <param name="p">The pointer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Equals(System.IntPtr)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Equals(System.String)">
            <summary>Determines whether the specified <see cref="T:System.IntPtr"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:System.IntPtr"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.IntPtr"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Equals(Vanara.InteropServices.StrPtrUni)">
            <summary>Determines whether the specified <see cref="T:Vanara.InteropServices.StrPtrUni"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.InteropServices.StrPtrUni"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Vanara.InteropServices.StrPtrUni"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Equality(Vanara.InteropServices.StrPtrUni,Vanara.InteropServices.StrPtrUni)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrUni"/> are equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.StrPtrUni.op_Inequality(Vanara.InteropServices.StrPtrUni,Vanara.InteropServices.StrPtrUni)">
            <summary>Determines whether two specified instances of <see cref="T:Vanara.InteropServices.StrPtrUni"/> are not equal.</summary>
            <param name="left">The first pointer or handle to compare.</param>
            <param name="right">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> does not equal <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.SafeGuidPtr">
            <summary>
            <para>Represents a GUID point, or REFGUID, that will automatically dispose the memory to which it points at the end of scope.</para>
            <note>You must use the <see cref="F:Vanara.InteropServices.SafeGuidPtr.Null"/> value, or the parameter-less constructor to pass the equivalent of <see langword="null"/>.</note>
            </summary>
        </member>
        <member name="F:Vanara.InteropServices.SafeGuidPtr.Null">
            <summary>The equivalent of a <see langword="null"/> pointer to a GUID value.</summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeGuidPtr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeGuidPtr"/> class. This value is equivalent to a <see langword="null"/> pointer.
            </summary>
        </member>
        <member name="M:Vanara.InteropServices.SafeGuidPtr.#ctor(System.Guid@)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeGuidPtr"/> class.</summary>
            <param name="guid">The unique identifier to assign to the pointer.</param>
        </member>
        <member name="M:Vanara.InteropServices.SafeGuidPtr.op_Implicit(System.Nullable{System.Guid})~Vanara.InteropServices.SafeGuidPtr">
            <summary>Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Vanara.InteropServices.SafeGuidPtr"/>.</summary>
            <param name="guid">The unique identifier.</param>
            <returns>The resulting <see cref="T:Vanara.InteropServices.SafeGuidPtr"/> instance from the conversion.</returns>
        </member>
        <member name="T:Vanara.InteropServices.UnionHelper">
            <summary>Methods for working with unions in unmanaged structures.</summary>
        </member>
        <member name="M:Vanara.InteropServices.UnionHelper.GetArrayItemAtOffset``2(``1,Vanara.PInvoke.SizeT)">
            <summary>
            Retrieves an item of type <typeparamref name="T"/> from an unmanaged structure of type <typeparamref name="TOrig"/> at the specified
            offset index.
            </summary>
            <remarks>
            This method is intended for use with unmanaged types only. The caller must ensure that the types <typeparamref name="T"/> and
            <typeparamref name="TOrig"/> are compatible and that the memory layout of <typeparamref name="TOrig"/> allows for indexing into its
            contents as an array of <typeparamref name="T"/>.
            </remarks>
            <typeparam name="T">The type of the item to retrieve.</typeparam>
            <typeparam name="TOrig">The type of the original unmanaged structure.</typeparam>
            <param name="o">The original unmanaged structure from which the item is retrieved.</param>
            <param name="index">The zero-based offset index of the item to retrieve. Must be within the bounds of the structure.</param>
            <returns>The item of type <typeparamref name="T"/> located at the specified offset index within the original structure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index"/> is less than zero or greater than or equal to the number of items of type <typeparamref name="T"/>
            that can fit within the original structure.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.UnionHelper.GetValueAtOffset``2(``1,Vanara.PInvoke.SizeT)">
            <summary>
            Retrieves the value of type <typeparamref name="T"/> located at the specified offset within the memory of the unmanaged structure
            <typeparamref name="TOrig"/>.
            </summary>
            <remarks>
            This method performs an unsafe memory operation to retrieve the value at the specified offset. Ensure that the offset is valid and
            within the bounds of the memory layout of <typeparamref name="TOrig"/>.
            </remarks>
            <typeparam name="T">The type of the value to retrieve. Must be an unmanaged type.</typeparam>
            <typeparam name="TOrig">The type of the original structure. Must be an unmanaged type.</typeparam>
            <param name="o">The original structure from which the value is retrieved.</param>
            <param name="offset">The byte offset within the memory of the original structure where the value is located.</param>
            <returns>The value of type <typeparamref name="T"/> at the specified offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="offset"/> is less than 0 or greater than or equal to the size of <typeparamref name="TOrig"/>.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.UnionHelper.SetArrayItemAtOffset``2(``1@,Vanara.PInvoke.SizeT,``0)">
            <summary>Sets the value of an array-like item at the specified offset within a structure.</summary>
            <remarks>
            This method operates on unmanaged types and uses unsafe code to directly manipulate memory. The caller must ensure that the structure
            and types are compatible and that the index is within bounds.
            </remarks>
            <typeparam name="T">The type of the item to set. Must be an unmanaged type.</typeparam>
            <typeparam name="TOrig">The type of the original structure containing the array-like data. Must be an unmanaged type.</typeparam>
            <param name="o">A reference to the original structure containing the array-like data.</param>
            <param name="index">The zero-based index of the item to set within the structure.</param>
            <param name="value">The value to set at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index"/> is less than 0 or greater than or equal to the number of items that can fit within the original structure.
            </exception>
        </member>
        <member name="M:Vanara.InteropServices.UnionHelper.SetValueAtOffset``2(``1@,Vanara.PInvoke.SizeT,``0)">
            <summary>Sets the value of a specified type at a given byte offset within an unmanaged structure.</summary>
            <remarks>
            This method uses unsafe code to directly manipulate memory. Ensure that the offset is valid and does not exceed the size of the
            original structure. Improper use of this method can lead to memory corruption or undefined behavior.
            </remarks>
            <typeparam name="T">The type of the value to set. Must be an unmanaged type.</typeparam>
            <typeparam name="TOrig">The type of the original structure. Must be an unmanaged type.</typeparam>
            <param name="o">The original structure in which the value will be set.</param>
            <param name="offset">The byte offset within the structure where the value will be set. Must be within the bounds of the structure.</param>
            <param name="value">The value to set at the specified offset.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="offset"/> is less than 0 or greater than or equal to the size of the original structure.
            </exception>
        </member>
        <member name="T:Vanara.InteropServices.IVanaraMarshaler">
            <summary>Smarter custom marshaler.</summary>
        </member>
        <member name="M:Vanara.InteropServices.IVanaraMarshaler.GetNativeSize">
            <summary>Gets the size of the native data.</summary>
            <returns>
            The size, in bytes, of the base object in memory. This should return the equivalent of the sizeof(X) function in C/C++.
            </returns>
        </member>
        <member name="M:Vanara.InteropServices.IVanaraMarshaler.MarshalManagedToNative(System.Object)">
            <summary>Marshals the managed object to its native, in-memory, value.</summary>
            <param name="managedObject">The managed object to marshal.</param>
            <returns>The self-destroying handle to the binary representation.</returns>
        </member>
        <member name="M:Vanara.InteropServices.IVanaraMarshaler.MarshalNativeToManaged(System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Marshals the native memory to a managed object.</summary>
            <param name="pNativeData">The pointer to the native data.</param>
            <param name="allocatedBytes">The number of allocated bytes.</param>
            <returns>The type instance.</returns>
        </member>
        <member name="T:Vanara.InteropServices.VanaraMarshaler">
            <summary>Provides methods to assist with custom marshaling.</summary>
        </member>
        <member name="M:Vanara.InteropServices.VanaraMarshaler.CanMarshal(System.Type,Vanara.InteropServices.IVanaraMarshaler@)">
            <summary>Determines whether a type can be marshaled.</summary>
            <param name="t">The type to check.</param>
            <param name="marshaler">On success, the marshaler instance.</param>
            <returns><see langword="true"/> if this type can marshaled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.InteropServices.VanaraMarshaler.CanMarshal``1(Vanara.InteropServices.IVanaraMarshaler@)">
            <summary>Determines whether a type can be marshaled.</summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="marshaler">On success, the marshaler instance.</param>
            <returns><see langword="true"/> if this type can marshaled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.InteropServices.VanaraCustomMarshaler`1">
            <summary>Provides an <see cref="T:System.Runtime.InteropServices.ICustomMarshaler"/> instance that utilizes an <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> implementation.</summary>
            <typeparam name="T">
            The type that either implements <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> or uses <see cref="T:Vanara.InteropServices.VanaraMarshalerAttribute"/> to specify a type.
            </typeparam>
            <seealso cref="T:System.Runtime.InteropServices.ICustomMarshaler"/>
        </member>
        <member name="M:Vanara.InteropServices.VanaraCustomMarshaler`1.GetInstance(System.String)">
            <summary>Gets the instance.</summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="T:Vanara.InteropServices.VanaraMarshalerAttribute">
            <summary>Apply this attribute to a class or structure to have all Vanara interop function process via the marshaler.</summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:Vanara.InteropServices.VanaraMarshalerAttribute.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.VanaraMarshalerAttribute"/> class.</summary>
            <param name="marshalType">A type that derives from <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> that will marshal this class or structure.</param>
            <param name="cookie">The cookie value to pass to the constructor.</param>
            <exception cref="T:System.ArgumentNullException">marshalType</exception>
            <exception cref="T:System.ArgumentException">The supplied type must inherit from {nameof(IVanaraMarshaler)}. - marshalType</exception>
        </member>
        <member name="P:Vanara.InteropServices.VanaraMarshalerAttribute.Cookie">
            <summary>Gets the cookie value, that if not <see langword="null"/>, will get passed to the constructor of <see cref="P:Vanara.InteropServices.VanaraMarshalerAttribute.MarshalType"/>.</summary>
        </member>
        <member name="P:Vanara.InteropServices.VanaraMarshalerAttribute.MarshalType">
            <summary>Gets the type that will marshal this class or structure.</summary>
        </member>
        <member name="T:Vanara.InteropServices.MarshalerOnVanaraMarshaler">
            <summary>Generic class implementing <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> to process types that support the <see cref="T:Vanara.Marshaler.MarshaledAttribute"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.IVanaraMarshaler"/>
        </member>
        <member name="M:Vanara.InteropServices.MarshalerOnVanaraMarshaler.#ctor(System.Type,Vanara.Marshaler.MarshalerOptions)">
            <summary>Generic class implementing <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> to process types that support the <see cref="T:Vanara.Marshaler.MarshaledAttribute"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.IVanaraMarshaler"/>
        </member>
        <member name="T:Vanara.BOOL">
            <summary>Managed instance of the four-byte BOOL type.</summary>
        </member>
        <member name="M:Vanara.BOOL.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.BOOL"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.BOOL.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.BOOL"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Vanara.BOOL.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(System.Int32)~Vanara.BOOL">
            <summary>Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(System.UInt32)~Vanara.BOOL">
            <summary>Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(System.Boolean)~Vanara.BOOL">
            <summary>Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Explicit(Vanara.BOOL)~System.Int32">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.BOOL"/> to <see cref="T:System.Int32"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Explicit(Vanara.BOOL)~System.UInt32">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.BOOL"/> to <see cref="T:System.UInt32"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(Vanara.BOOL)~System.Boolean">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.BOOL"/> to <see cref="T:System.Boolean"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(Vanara.BOOL)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.BOOL"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Implicit(System.IntPtr)~Vanara.BOOL">
            <summary>Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOL.op_Inequality(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether two <see cref="T:Vanara.BOOL"/> instances are not equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is not equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_LessThan(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOL"/> is less than another specified <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_LessThanOrEqual(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOL"/> is less than or equal to another specified <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_Equality(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether two <see cref="T:Vanara.BOOL"/> instances are equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_GreaterThan(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOL"/> is greater than another specified <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_GreaterThanOrEqual(Vanara.BOOL,Vanara.BOOL)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOL"/> is greater than or equal to another specified <see cref="T:Vanara.BOOL"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOL.op_LogicalNot(Vanara.BOOL)">
            <summary>Implements the operator !.</summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.BOOL.CompareTo(Vanara.BOOL)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.CompareTo(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.Equals(Vanara.BOOL)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.Equals(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOL.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.BOOLEAN">
            <summary>Managed instance of the single-byte BOOLEAN type.</summary>
        </member>
        <member name="M:Vanara.BOOLEAN.#ctor(System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.BOOLEAN"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.BOOLEAN.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.BOOLEAN"/> struct.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Vanara.BOOLEAN.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Implicit(System.Byte)~Vanara.BOOLEAN">
            <summary>Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Implicit(System.Boolean)~Vanara.BOOLEAN">
            <summary>Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Explicit(Vanara.BOOLEAN)~System.Byte">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.BOOLEAN"/> to <see cref="T:System.Byte"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Implicit(Vanara.BOOLEAN)~System.Boolean">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.BOOLEAN"/> to <see cref="T:System.Boolean"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Inequality(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether two <see cref="T:Vanara.BOOLEAN"/> instances are not equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is not equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_LessThan(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOLEAN"/> is less than another specified <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_LessThanOrEqual(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOLEAN"/> is less than or equal to another specified <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is less than or equal to the value of <paramref name="s2"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_Equality(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether two <see cref="T:Vanara.BOOLEAN"/> instances are equal.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is equal to the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_GreaterThan(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOLEAN"/> is greater than another specified <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than the value of <paramref name="s2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_GreaterThanOrEqual(Vanara.BOOLEAN,Vanara.BOOLEAN)">
            <summary>Indicates whether a specified <see cref="T:Vanara.BOOLEAN"/> is greater than or equal to another specified <see cref="T:Vanara.BOOLEAN"/>.</summary>
            <param name="s1">The first integral size to compare.</param>
            <param name="s2">The second integral size to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="s1"/> is greater than or equal to the value of <paramref name="s2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.BOOLEAN.op_LogicalNot(Vanara.BOOLEAN)">
            <summary>Implements the operator !.</summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.BOOLEAN.CompareTo(Vanara.BOOLEAN)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.CompareTo(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.Equals(Vanara.BOOLEAN)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.Equals(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IComparable#CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.BOOLEAN.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Matrix">
            <summary>Represents a two-dimensional matrix of any size.</summary>
        </member>
        <member name="M:Vanara.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Matrix"/> class.</summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Vanara.Matrix.#ctor(System.Memory{System.Single},System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Matrix"/> class.</summary>
            <param name="values">The values.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <exception cref="T:System.ArgumentException">The number of elements in the memory must be equal to rows * columns.</exception>
        </member>
        <member name="M:Vanara.Matrix.#ctor(System.Single[0:,0:])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Matrix"/> class.</summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:Vanara.Matrix.SpanAction">
            <summary>A delegate that acts on a <see cref="T:System.Span`1"/> to set the values of the matrix.</summary>
            <param name="span">The span.</param>
        </member>
        <member name="P:Vanara.Matrix.Columns">
            <summary>Gets the number of columns in the matrix.</summary>
            <value>The column count.</value>
        </member>
        <member name="P:Vanara.Matrix.System#Collections#Generic#IReadOnlyCollection{System#Memory{System#Single}}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.Matrix.Determinant">
            <summary>Gets the determinant.</summary>
            <value>The determinant.</value>
            <exception cref="T:System.InvalidOperationException">The matrix must be square.</exception>
        </member>
        <member name="P:Vanara.Matrix.IsEmpty">
            <summary>Gets a value indicating whether this instance is empty (all zero values).</summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsFullRank">
            <summary>Gets a value indicating whether this instance is full rank.</summary>
            <value><c>true</c> if this instance is full rank; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsHorizontalVector">
            <summary>Gets a value indicating whether this instance is a horizontal vector (single row).</summary>
            <value><see langword="true"/> if this instance is a horizontal vector; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsIdentity">
            <summary>Gets a value that indicates whether the current matrix is the identity matrix.</summary>
            <value><see langword="true"/> if the current matrix is the identity matrix; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsSingluar">
            <summary>Gets a value indicating whether this instance is singluar.</summary>
            <value><c>true</c> if this instance is singluar; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsSquare">
            <summary>Gets a value indicating whether this instance is square.</summary>
            <value><c>true</c> if this instance is square; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsVector">
            <summary>Gets a value indicating whether this instance is a vector (either one row or one column).</summary>
            <value><see langword="true"/> if this instance is a vector; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Matrix.IsVerticalVector">
            <summary>Gets a value indicating whether this instance is a vertical vector (single column).</summary>
            <value><see langword="true"/> if this instance is a vertical vector; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Matrix.PrincipalMinor">
            <summary>Gets the principal minor.</summary>
            <value>The principal minor.</value>
        </member>
        <member name="P:Vanara.Matrix.Rank">
            <summary>Gets the rank of the matrix, or the number of linearly independent row or column vectors.</summary>
            <value>The rank of the matrix.</value>
        </member>
        <member name="P:Vanara.Matrix.Rows">
            <summary>Gets the number of rows in the matrix.</summary>
            <value>The row count.</value>
        </member>
        <member name="P:Vanara.Matrix.System#Collections#Generic#IReadOnlyList{System#Memory{System#Single}}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.Matrix.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the element with the specified row and column.</summary>
            <value>The element value.</value>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The element value at <paramref name="row"/> and <paramref name="column"/>.</returns>
        </member>
        <member name="M:Vanara.Matrix.Build(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Single})">
            <summary>Creates a matrix of the specified size filled values created by a delegate.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="setValue">A delegate that sets each value.</param>
            <returns>A matrix of the specified size filled with values.</returns>
        </member>
        <member name="M:Vanara.Matrix.Build(System.Int32,System.Int32,Vanara.Matrix.SpanAction)">
            <summary>Builds a new matrix of the specified dimensions exposing a <see cref="T:System.Span`1"/> with the allocated memory to act upon.</summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="setValues">A delegate to set the underlying values of the memory of the matrix.</param>
            <returns>A matrix with the values set to the Span value.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateBlock(Vanara.Matrix,Vanara.Matrix,Vanara.Matrix,Vanara.Matrix)">
            <summary>Constructs block matrix {{ A, B }, { C, D } }.</summary>
            <param name="A">Upper left sub matrix.</param>
            <param name="B">Upper right sub matrix.</param>
            <param name="C">Lower left sub matrix.</param>
            <param name="D">Lower right sub matrix.</param>
            <returns>An expanded matrix with each parameter's matrix in its respective quadrant.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateChessboard(System.Int32,System.Int32,System.Boolean)">
            <summary>Creates m by n chessboard matrix with interchangíng ones and zeros. ///</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="even">Indicates that even columns on the first row are set to 1.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Matrix.CreateE(System.Int32,System.Int32)">
            <summary>Retrieves the j-th canoncical basis vector of the IR^n.</summary>
            <param name="n">Dimension of the basis.</param>
            <param name="j">Index of canonical basis vector to be retrieved.</param>
            <returns>A single column matrix where the [j,0] element is set to 1f.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateFilled(System.Int32,System.Int32,System.Single)">
            <summary>Creates a matrix filled with the specified value.</summary>
            <param name="rows">The number of rows to create.</param>
            <param name="columns">The number of columns to create.</param>
            <param name="value">The fill value.</param>
            <returns>A new matrix of the specified dimensions with all values set to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateIdentity(System.Int32)">
            <summary>Gets an identity matrix of the specified balanced size.</summary>
            <param name="dimensions">The rows and columns in the matrix.</param>
            <returns>An identity matrix with the value of all diagonal entries set to <c>1.0f</c>.</returns>
            <exception cref="T:System.ArgumentException">The number of rows must be equal to the number of columns.</exception>
        </member>
        <member name="M:Vanara.Matrix.CreateIdentity(System.Int32,System.Int32)">
            <summary>Gets an identity matrix of the specified size.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>An identity matrix with the value of all diagonal entries set to <c>1.0f</c>.</returns>
            <exception cref="T:System.ArgumentException">The number of rows must be equal to the number of columns.</exception>
        </member>
        <member name="M:Vanara.Matrix.CreateRandom(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a matrix of the specified size filled with random values between 0 and 1.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="seed">The seed value for the random numbers. If <c>0</c>, the default seed value is used.</param>
            <returns>A matrix of the specified size filled with random values between 0 and 1.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateRandomGraph(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Creates a matrix of the specified size filled with random values between 0 and 1. All diagonal entries are zero. A specified random
            percentage of edges has weight positive infinity.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="p">
            Defines probability for an edge being less than +infty. Should be in [0,1], p = 1 gives complete directed graph; p = 0 gives no edges.
            </param>
            <param name="seed">The seed value for the random numbers. If <c>0</c>, the default seed value is used.</param>
            <returns>A matrix of the specified size filled with random values between 0 and 1.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateRandomZeroOne(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>Creates a matrix of the specified size filled with random 0's and 1's with probability <paramref name="p"/> for a one.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="p">Defines probability for the value to be a one. Should be in [0,1].</param>
            <param name="seed">The seed value for the random numbers. If <c>0</c>, the default seed value is used.</param>
            <returns>A matrix of the specified size filled with random 0's and 1's.</returns>
        </member>
        <member name="M:Vanara.Matrix.CreateScale(System.Single[])">
            <summary>Creates a scaling matrix from the list of scalars.</summary>
            <param name="scalars">
            The scalars to use as diagonal values. Note, the resulting matrix will be one dimension larger than the number of scalars in this
            array and that diagonal entry will be set to <c>1.0f</c>.
            </param>
            <returns>
            A matrix one dimension larger than the number of scalars in <paramref name="scalars"/> whose diagnoal entries are set to each
            subsequent value of <paramref name="scalars"/> and whose final diagonal entry will be set to <c>1.0f</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">scalars</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">scalars - At least one scaling value must be provided.</exception>
        </member>
        <member name="M:Vanara.Matrix.Dot(Vanara.Matrix,Vanara.Matrix)">
            <summary>Gets the dot product of two single-row vector matrices of the same length.</summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Implicit(Vanara.Matrix)~System.Single[0:,0:]">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.Matrix"/> to <see cref="T:System.Single"/>[,].</summary>
            <param name="m">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Implicit(System.Single[0:,0:])~Vanara.Matrix">
            <summary>Performs an implicit conversion from <see cref="T:System.Single"/>[,] to <see cref="T:Vanara.Matrix"/>.</summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_UnaryNegation(Vanara.Matrix)">
            <summary>Negates the specified matrix by multiplying all its values by -1.</summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Subtraction(Vanara.Matrix,Vanara.Matrix)">
            <summary>Subtracts each element in a second matrix from its corresponding element in a first matrix.</summary>
            <param name="left">The first matrix.</param>
            <param name="right">The second matrix.</param>
            <returns>
            The matrix containing the values that result from subtracting each element in <paramref name="right"/> from its corresponding
            element in <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Vanara.Matrix.op_Inequality(Vanara.Matrix,Vanara.Matrix)">
            <summary>Implements the operator !=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Multiply(Vanara.Matrix,Vanara.Matrix)">
            <summary>Multiplies two matrices together to compute the product.</summary>
            <param name="left">The first matrix.</param>
            <param name="right">The second matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Multiply(Vanara.Matrix,System.Single)">
            <summary>Multiplies a matrix by a scalar to compute the product.</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The scaling value to use.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Multiply(System.Single,Vanara.Matrix)">
            <summary>Multiplies a matrix by a scalar to compute the product.</summary>
            <param name="left">The scaling value to use.</param>
            <param name="right">The matrix to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Division(Vanara.Matrix,System.Single)">
            <summary>Divides a matrix by a scalar to compute the quotient.</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The scaling value to use.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_UnaryPlus(Vanara.Matrix)">
            <summary>Computes the unary plus of a value.</summary>
            <param name="value">The value for which to compute the unary plus.</param>
            <returns>The unary plus of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Addition(Vanara.Matrix,Vanara.Matrix)">
            <summary>Adds each element in one matrix with its corresponding element in a second matrix.</summary>
            <param name="left">The first matrix.</param>
            <param name="right">The second matrix.</param>
            <returns>The matrix that contains the summed values.</returns>
        </member>
        <member name="M:Vanara.Matrix.op_Equality(Vanara.Matrix,Vanara.Matrix)">
            <summary>Implements the operator ==.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Matrix.Adjugate">
            <summary>Adjugates this instance.</summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The matrix must be square.</exception>
        </member>
        <member name="M:Vanara.Matrix.Clone">
            <summary>Clones this matrix to a new value.</summary>
            <returns>A matrix matching this instance.</returns>
        </member>
        <member name="M:Vanara.Matrix.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.Cofactor">
            <summary>Cofactors this instance.</summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The matrix must be square.</exception>
        </member>
        <member name="M:Vanara.Matrix.ColumnVector(System.Int32)">
            <summary>Columns the vector.</summary>
            <param name="column">The column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">column</exception>
        </member>
        <member name="M:Vanara.Matrix.Equals(Vanara.Matrix)">
            <summary>Returns a value that indicates whether this instance and another 3x2 matrix are equal.</summary>
            <param name="other">The other matrix.</param>
            <returns><see langword="true"/> if the two matrices are equal; otherwise, <see langword="false"/>.</returns>
            <remarks>Two matrices are equal if all their corresponding elements are equal.</remarks>
        </member>
        <member name="M:Vanara.Matrix.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.Extract(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Extract sub matrix.</summary>
            <param name="startRow">Start row.</param>
            <param name="endRow">End row.</param>
            <param name="startCol">Start column.</param>
            <param name="endCol">End column.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Matrix.ExtractLowerTrapeze">
            <summary>Extracts lower trapeze matrix of this matrix.</summary>
            <returns>A matrix of the same dimensions with the lower diagonal trapeze values.</returns>
        </member>
        <member name="M:Vanara.Matrix.ExtractUpperTrapeze">
            <summary>Extracts upper trapeze matrix of this matrix.</summary>
            <returns>A matrix of the same dimensions with the upper diagonal trapeze values.</returns>
        </member>
        <member name="M:Vanara.Matrix.FlipHorizontally">
            <summary>Flips matrix horizontally.</summary>
        </member>
        <member name="M:Vanara.Matrix.FlipVertically">
            <summary>Flips matrix vertically.</summary>
        </member>
        <member name="M:Vanara.Matrix.GetColumnVectors">
            <summary>Gets an array of each column as a vector.</summary>
            <returns>An array of column vectors.</returns>
        </member>
        <member name="M:Vanara.Matrix.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.System#Collections#Generic#IEnumerable{System#Memory{System#Single}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.GetRowVectors">
            <summary>Gets an array of each row as a vector.</summary>
            <returns>An array of row vectors.</returns>
        </member>
        <member name="M:Vanara.Matrix.Invert">
            <summary>Inverts this instance.</summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The matrix must be square. or The matrix is singular.</exception>
        </member>
        <member name="M:Vanara.Matrix.MatrixOfMinors">
            <summary>Returns a matrix of the same dimensions with the minor determinants of each element.</summary>
            <returns>A matrix of the same dimensions with the minor determinants of each element.</returns>
        </member>
        <member name="M:Vanara.Matrix.Minor(System.Int32,System.Int32)">
            <summary>Creates a new matrix removing the specified row and column.</summary>
            <param name="row">The row to remove.</param>
            <param name="column">The column to remove.</param>
            <returns>A new matrix with the specified row and column removed.</returns>
        </member>
        <member name="M:Vanara.Matrix.Pin">
            <summary>Pins this instance.</summary>
            <returns>A handle for the underlying memory.</returns>
        </member>
        <member name="M:Vanara.Matrix.Pow(System.Int32)">
            <summary>Returns the matrix to the power of <paramref name="n"/>.</summary>
            <param name="n">The value of the power.</param>
            <returns>A matrix with the result of this matrix to the power of <paramref name="n"/>.</returns>
        </member>
        <member name="M:Vanara.Matrix.ReducedRowEchelonForm">
            <summary>Gets the reduced row echelon form (RREF) of the matrix.</summary>
            <returns>The reduced row echelon form (RREF).</returns>
        </member>
        <member name="M:Vanara.Matrix.RowVector(System.Int32)">
            <summary>Rows the vector.</summary>
            <param name="row">The row.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">row</exception>
        </member>
        <member name="M:Vanara.Matrix.Submatrix(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Gets a submatrix of current matrix keeping only the specified rows and columns.</summary>
            <param name="rowsToKeep">The rows to keep.</param>
            <param name="columnsToKeep">The columns to keep.</param>
            <returns>A submatrix of current matrix with only the specified rows and columns.</returns>
        </member>
        <member name="M:Vanara.Matrix.ToArray">
            <summary>Converts the matrix to a two-dimensional array.</summary>
            <returns>A two-dimensional array with all the elements of the matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Matrix.ToString(System.String)">
            <summary>Returns the string representation of the current instance using the specified format string to format individual elements.</summary>
            <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
            <returns>The string representation of the current instance.</returns>
            <remarks>
            This method returns a string in which each element of the vector is formatted using <paramref name="format"/> and the current
            culture's formatting conventions. The "&lt;" and "&gt;" characters are used to begin and end the string, and the current culture's
            <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator"/> property followed by a space is used to separate each element.
            </remarks>
            <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings">Standard Numeric Format Strings</related>
            <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings">Custom Numeric Format Strings</related>
        </member>
        <member name="M:Vanara.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format individual elements and the
            specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
            <param name="formatProvider">A format provider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the current instance.</returns>
            <remarks>
            This method returns a string in which each element of the vector is formatted using <paramref name="format"/> and <paramref
            name="formatProvider"/>. The "&lt;" and "&gt;" characters are used to begin and end the string, and the format provider's <see
            cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator"/> property followed by a space is used to separate each element.
            </remarks>
            <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings">Custom Numeric Format Strings</related>
            <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings">Standard Numeric Format Strings</related>
        </member>
        <member name="M:Vanara.Matrix.Transpose">
            <summary>Transposes this instance.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Matrix.BinaryAction(Vanara.Matrix,Vanara.Matrix,System.Func{System.Single,System.Single,System.Single})">
            <summary>Performs an action on each matching element in two matrices and returns the resulting matrix.</summary>
            <param name="a">The first matrix.</param>
            <param name="b">The second matrix.</param>
            <param name="action">The action to perform on the paired elements from <paramref name="a"/> and <paramref name="b"/>.</param>
            <returns>The resulting matrix.</returns>
            <exception cref="T:System.ArgumentException">The number of rows and columns must be equal.</exception>
        </member>
        <member name="M:Vanara.Matrix.UnaryAction(Vanara.Matrix,System.Func{System.Single,System.Single})">
            <summary>Performs an action on each element in a matrix and returns the resulting matrix.</summary>
            <param name="value">The source matrix.</param>
            <param name="action">The action to perform on the elements from <paramref name="value"/>.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Vanara.Matrix.GetUnchecked(System.Int32,System.Int32)">
            <summary>Gets the element at the specified indices without bounds checking.</summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The element at the specified indices.</returns>
        </member>
        <member name="T:Vanara.ISupportIndexer`2">
            <summary>Interface representing a class that holds an indexer.</summary>
            <typeparam name="TVal">The type of the indexer's value.</typeparam>
            <typeparam name="TRet">The type of the indexer's return value.</typeparam>
        </member>
        <member name="P:Vanara.ISupportIndexer`2.Item(`0)">
            <summary>Gets or sets the <typeparamref name="TRet"/> with the specified <typeparamref name="TVal"/>.</summary>
            <value>The <typeparamref name="TRet"/>.</value>
            <returns>The <typeparamref name="TVal"/>.</returns>
        </member>
        <member name="T:Vanara.LinqHelpers">
            <summary>Helper methods for LINQ</summary>
        </member>
        <member name="M:Vanara.LinqHelpers.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Filters <see langword="null"/> values out of a sequence.</summary>
            <typeparam name="T">The nullable type.</typeparam>
            <param name="o">The sequence.</param>
            <returns>The sequence without any <see langword="null"/> values.</returns>
        </member>
        <member name="M:Vanara.LinqHelpers.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Compares two sequences by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IComparer`1"/>.</summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to <paramref name="second"/>.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to <paramref name="first"/>.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare elements.</param>
            <returns>
            <para>
            A signed integer that indicates the relative values of <paramref name="first"/> and <paramref name="second"/>, as shown in the following table.
            </para>
            <list type="table">
            <item>
            <term>Value</term>
            <term>Meaning</term>
            </item>
            <item>
            <description>Less than zero</description>
            <description><paramref name="first"/> is less than <paramref name="second"/>.</description>
            </item>
            <item>
            <description>Zero</description>
            <description><paramref name="first"/> equals <paramref name="second"/>.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description><paramref name="first"/> is greater than <paramref name="second"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.Marshaler.Extensions.IsMarshaledType(System.Type)">
            <summary>Gets a value that determines if the type is a blittable type.</summary>
        </member>
        <member name="T:Vanara.Marshaler.ArrayLayout">
            <summary>Indicates the data layout of the marshaled array.</summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.ByValArray">
            <summary>
            Array of sequential values with a fixed size specified by SizeConst property. ArraySubType property should be used if marshaling
            needed for subtype. SizeConst must be used.
            </summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.ByValAnySizeArray">
            <summary>
            Array of sequential values with a size specified by another field whose first value is the last field in a structure with all
            remaining fields appended to the end of the structure in memory. ArraySubType property should be used if marshaling needed for
            subtype. StringLenFieldName must be used.
            </summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.ByValAppendedArray">
            <summary>
            Array of sequential values with a size specified by another field whose values are appended to the end of the structure in memory.
            ArraySubType property should be used if marshaling needed for subtype. StringLenFieldName must be used.
            </summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.LPArray">
            <summary>
            Pointer to an array of sequential values with a size specified by another field. ArraySubType property should be used if marshaling
            needed for subtype. SizeFieldName must be used.
            </summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.StringPtrArray">
            <summary>Pointer to an array of pointers to strings. StringLenFieldName must be used.</summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.StringPtrArrayNullTerm">
            <summary>
            Pointer to a null-terminated array of pointers to strings where the final pointer is null. Size is inferred from the array.
            </summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.ConcatenatedStringArray">
            <summary>Pointer to a null-terminated array of pointers to strings. Size is inferred from the array.</summary>
        </member>
        <member name="F:Vanara.Marshaler.ArrayLayout.LPArrayNullTerm">
            <summary>Pointer to an array of sequential values terminated by a null or default value. ArraySubType property should be used if marshaling needed for subtype.</summary>
        </member>
        <member name="T:Vanara.Marshaler.Bitness">
            <summary>Specifies the number of bits in a pointer for a marshaled value.</summary>
        </member>
        <member name="F:Vanara.Marshaler.Bitness.Auto">
            <summary>Selects the bit count automatically based on the current OS.</summary>
        </member>
        <member name="F:Vanara.Marshaler.Bitness.X32bit">
            <summary>Implies a 32-bit OS.</summary>
        </member>
        <member name="F:Vanara.Marshaler.Bitness.X64bit">
            <summary>Implies a 64-bit OS.</summary>
        </member>
        <member name="T:Vanara.Marshaler.LayoutModel">
            <summary>Determines the layout of the structure or class when marshaled.</summary>
        </member>
        <member name="F:Vanara.Marshaler.LayoutModel.Sequential">
            <summary>The layout matches the order of the fields in the structure or class.</summary>
        </member>
        <member name="F:Vanara.Marshaler.LayoutModel.Union">
            <summary>
            The layout is a union of all the fields in the structure or class. In this instance, all field values but one should be set to their
            default values.
            </summary>
        </member>
        <member name="T:Vanara.Marshaler.StringEncoding">
            <summary>Identifies the type of encoding used to read and write binary representations of strings.</summary>
        </member>
        <member name="F:Vanara.Marshaler.StringEncoding.Default">
            <summary>The automatic encoding. Typically Unicode.</summary>
        </member>
        <member name="F:Vanara.Marshaler.StringEncoding.ASCII">
            <summary>ANSI encoding.</summary>
        </member>
        <member name="F:Vanara.Marshaler.StringEncoding.Unicode">
            <summary>Unicode encoding.</summary>
        </member>
        <member name="F:Vanara.Marshaler.StringEncoding.UTF8">
            <summary>UTF-8 encoding.</summary>
        </member>
        <member name="F:Vanara.Marshaler.StringEncoding.UTF32">
            <summary>UTF-32 encoding.</summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshaledAlternativeAttribute">
            <summary>
            Indicates that a struct has an alternative type that can be used for marshaling purposes.
            </summary>
        </member>
        <member name="M:Vanara.Marshaler.MarshaledAlternativeAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Marshaler.MarshaledAlternativeAttribute"/> class.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAlternativeAttribute.AlternateType">
            <summary>Gets the alternate type.</summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshaledAttribute">
            <summary>Attribute that can be applied to classes and structures to indicate that they support custom marshaling.</summary>
        </member>
        <member name="M:Vanara.Marshaler.MarshaledAttribute.#ctor(Vanara.Marshaler.LayoutModel)">
            <summary>Attribute that can be applied to classes and structures to indicate that they support custom marshaling.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAttribute.Bitness">
            <summary>Gets or sets the bitness.</summary>
            <value>The bitness.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAttribute.Layout">
            <summary>Gets the layout.</summary>
            <value>The layout.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAttribute.Pack">
            <summary>Gets or sets the pack.</summary>
            <value>The pack.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAttribute.Size">
            <summary>Gets or sets the size.</summary>
            <value>The size.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshaledAttribute.StringEncoding">
            <summary>Gets or sets the character encoding.</summary>
            <value>The character encoding.</value>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs">
            <summary>A set of attributes to facilitate custom marshaling.</summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.AppendedStringAttribute">
            <summary>
            Attribute that is applied to a string as the final field in a structure to indicate that the string value is appended to the end of
            the structure. The string is null-terminated. The <paramref name="embeddedCharacters"/> value determines if any characters are
            counted in the native size of the structure.
            </summary>
            <param name="stringLenFieldName">
            The name of the field that holds the length of the string, in characters. If <see langword="null"/>, the string will be read until a
            <c>'\0'</c> value is found.
            </param>
            <param name="embeddedCharacters">The number of characters embedded in the structure's native size.</param>
            <param name="stringEncoding">The character encoding of the string.</param>
            <seealso cref="T:System.Attribute"/>
            <seealso cref="T:Vanara.Marshaler.MarshalFieldAs.IMarshalAsAttr"/>
        </member>
        <member name="M:Vanara.Marshaler.MarshalFieldAs.AppendedStringAttribute.#ctor(System.String,System.Int32,Vanara.Marshaler.StringEncoding)">
            <summary>
            Attribute that is applied to a string as the final field in a structure to indicate that the string value is appended to the end of
            the structure. The string is null-terminated. The <paramref name="embeddedCharacters"/> value determines if any characters are
            counted in the native size of the structure.
            </summary>
            <param name="stringLenFieldName">
            The name of the field that holds the length of the string, in characters. If <see langword="null"/>, the string will be read until a
            <c>'\0'</c> value is found.
            </param>
            <param name="embeddedCharacters">The number of characters embedded in the structure's native size.</param>
            <param name="stringEncoding">The character encoding of the string.</param>
            <seealso cref="T:System.Attribute"/>
            <seealso cref="T:Vanara.Marshaler.MarshalFieldAs.IMarshalAsAttr"/>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.AppendedStringAttribute.EmbeddedCharacters">
            <summary>
            Gets the number of characters embedded in the structure's native size. For ANYSIZE strings, this value is the default of <c>1</c>.
            </summary>
            <value>The number of characters embedded in the structure's native size.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.AppendedStringAttribute.StringLenFieldName">
            <summary>
            Gets or sets the name of the field that holds the length of the string, in characters. If <see langword="null"/>, the string will
            be read until a <c>'\0'</c> value is found.
            </summary>
            <value>The name of the field that holds the length of the string, in characters.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.AppendedStringAttribute.StringEncoding">
            <summary>Gets or sets the character encoding.</summary>
            <value>The character encoding.</value>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is an array of values in a specified
            layout and size.
            </summary>
            <param name="layout">A value that indicates how the array is stored within memory.</param>
        </member>
        <member name="M:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute.#ctor(Vanara.Marshaler.ArrayLayout)">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is an array of values in a specified
            layout and size.
            </summary>
            <param name="layout">A value that indicates how the array is stored within memory.</param>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute.Layout">
            <summary>Gets the layout of the marshaled array.</summary>
            <value>The array layout.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute.SizeConst">
            <summary>Gets or sets the size of the array as a constant value.</summary>
            <value>The size of the array as a constant value.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute.SizeFieldName">
            <summary>Gets or sets the name of the field that holds the size of the array.</summary>
            <value>The name of the field that holds the size of the array.</value>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.ArrayAttribute.StringEncoding">
            <summary>Gets or sets the character encoding.</summary>
            <value>The character encoding.</value>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.BitFieldAttribute`1">
            <summary>Attribute that can be applied to fields in a structure or class to indicate that the field is a bitfield.</summary>
        </member>
        <member name="M:Vanara.Marshaler.MarshalFieldAs.BitFieldAttribute`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Marshaler.MarshalFieldAs.BitFieldAttribute`1"/> class.</summary>
            <param name="bitCount">The bit count.</param>
            <exception cref="T:System.ArgumentException">Generic type must be an integral. - T</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bitCount</exception>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.BitFieldAttribute`1.BitCount">
            <summary>The number of bits in the field. The default is 1. The maximum value is bit size of <typeparamref name="T"/>.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.BitFieldAttribute`1.StartNewField">
            <summary>If <see langword="true"/>, the field starts a new underlying field in the structure. The default is <see langword="false"/>.</summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is a pointer to a string of a specified length.
            </summary>
            <param name="length">
            The length, in characters, of the string. Whether or not a NULL terminator is included is specified by <paramref name="nullTerm"/>..
            </param>
            <param name="nullTerm"><see langword="true"/> if the NULL terminator is included in <paramref name="length"/>; otherwise <see langword="false"/>.</param>
            <param name="stringEncoding">The character encoding of the string.</param>
        </member>
        <member name="M:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.#ctor(System.Int32,System.Boolean,Vanara.Marshaler.StringEncoding)">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is a pointer to a string of a specified length.
            </summary>
            <param name="length">
            The length, in characters, of the string. Whether or not a NULL terminator is included is specified by <paramref name="nullTerm"/>..
            </param>
            <param name="nullTerm"><see langword="true"/> if the NULL terminator is included in <paramref name="length"/>; otherwise <see langword="false"/>.</param>
            <param name="stringEncoding">The character encoding of the string.</param>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.Length">
            <summary>The length, in characters, of the string. Whether or not a NULL terminator is included is specified by <see cref="P:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.NullTerm"/>.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.NullTerm">
            <summary>Determines whether the NULL terminator is included in <see cref="P:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.Length"/>. The default is <see langword="true"/>.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.FixedStringAttribute.StringEncoding">
            <summary>Gets or sets the character encoding.</summary>
            <value>The character encoding.</value>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.SizeOfAttribute">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field should be initialized with the native size
            of the parent structure or class or that indicates the size of the native structure or class on retrieval.
            </summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.SizeOfAttribute.IncludeAnySizeAllocation">
            <summary>
            If <see langword="false"/>, the default, the field is initialized with the native size of the parent structure or class. When
            <see langword="true"/>, the size includes any additional bytes allocated for the last field, which must be a fixed array or fixed
            size string.
            </summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.StructPtrAttribute">
            <summary>Attribute that can be applied to fields in a structure or class to indicate that the field is a pointer to a structure.</summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshalFieldAs.UnionFieldAttribute">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is part of a union. If the <see
            cref="P:Vanara.Marshaler.MarshalFieldAs.UnionFieldAttribute.UnionId"/> is not set, then an id is generated for all union fields that also do not have a unionId specified.
            </summary>
        </member>
        <member name="M:Vanara.Marshaler.MarshalFieldAs.UnionFieldAttribute.#ctor(System.String)">
            <summary>
            Attribute that can be applied to fields in a structure or class to indicate that the field is part of a union. If the <see
            cref="P:Vanara.Marshaler.MarshalFieldAs.UnionFieldAttribute.UnionId"/> is not set, then an id is generated for all union fields that also do not have a unionId specified.
            </summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalFieldAs.UnionFieldAttribute.UnionId">
            <summary>Gets or sets the union identifier.</summary>
            <value>The union identifier.</value>
        </member>
        <member name="T:Vanara.Marshaler.Marshaler">
            <summary>Contains static methods for marshaling objects.</summary>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.PtrToValue``1(System.IntPtr,Vanara.Marshaler.MarshalerOptions)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
            <typeparam name="T">The type of object to be created. This object must represent a formatted class or a structure.</typeparam>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="opts">Marshaling options.</param>
            <returns>A managed object containing the data pointed to by the <paramref name="ptr"/> parameter or <see langword="null"/> if <paramref name="ptr"/> was NULL.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.PtrToValue(System.Type,System.IntPtr,Vanara.Marshaler.MarshalerOptions)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
            <param name="type">The type of object to be created. This object must represent a formatted class or a structure.</param>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <param name="opts">Marshaling options.</param>
            <returns>A managed object containing the data pointed to by the <paramref name="ptr"/> parameter or <see langword="null"/> if <paramref name="ptr"/> was NULL.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.SizeOf(System.Object,Vanara.Marshaler.MarshalerOptions)">
            <summary>Returns the size of an object in bytes.</summary>
            <param name="value">The object whose size is to be returned.</param>
            <param name="opts">The optional options to use when marshaling.</param>
            <returns>The size of the specified type in memory.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.SizeOf``1(Vanara.Marshaler.MarshalerOptions)">
            <summary>Returns the size of a type in bytes.</summary>
            <typeparam name="T">The type whose size is to be returned.</typeparam>
            <param name="opts">The optional options to use when marshaling.</param>
            <returns>The size of the specified type in memory.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.SizeOf(System.Type,Vanara.Marshaler.MarshalerOptions)">
            <summary>Returns the size of a type in bytes.</summary>
            <param name="type">The type whose size is to be returned.</param>
            <param name="opts">The optional options to use when marshaling.</param>
            <returns>The size of the specified type in memory.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.ValueToPtr``1(System.Object,Vanara.Marshaler.MarshalerOptions)">
            <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
            <typeparam name="TMem">The type of the memory.</typeparam>
            <param name="value">A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</param>
            <param name="opts">The optional options to use when marshaling.</param>
            <returns>A pointer to an unmanaged block of memory, which is allocated using <typeparamref name="TMem"/> methods.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.ValueToPtr(System.Object,Vanara.Marshaler.MarshalerOptions)">
            <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
            <param name="value">A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</param>
            <param name="opts">The optional options to use when marshaling.</param>
            <returns>A pointer to an unmanaged block of memory, which is allocated using <see cref="T:Vanara.InteropServices.SafeCoTaskMemHandle"/> methods.</returns>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.ArrayMarshaler.ReadArrayUntilDefault(System.IntPtr,System.Int32,System.Type,Vanara.Marshaler.MarshalerOptions)">
            <summary>
            Reads an array of elements from a pointer, stopping when the default value of the element type is encountered.
            </summary>
        </member>
        <member name="T:Vanara.Marshaler.Marshaler.StringMarshaler">
            <summary>
            Marshaler for string types. This marshaler is used for all string types read from a pointer, including BSTR, LPSTR, LPWSTR, and LPUTF8Str.
            </summary>
        </member>
        <member name="M:Vanara.Marshaler.Marshaler.StringMarshaler.#ctor(System.Reflection.FieldInfo,Vanara.Marshaler.MarshalerOptions)">
            <summary>
            Marshaler for string types. This marshaler is used for all string types read from a pointer, including BSTR, LPSTR, LPWSTR, and LPUTF8Str.
            </summary>
        </member>
        <member name="T:Vanara.Marshaler.MarshalException">
            <summary>Base exception for marshaling errors.</summary>
            <seealso cref="T:System.Exception"/>
        </member>
        <member name="M:Vanara.Marshaler.MarshalException.#ctor(System.String)">
            <summary>Base exception for marshaling errors.</summary>
            <seealso cref="T:System.Exception"/>
        </member>
        <member name="T:Vanara.Marshaler.MarshalerOptions">
            <summary>General options for marshaling.</summary>
        </member>
        <member name="M:Vanara.Marshaler.MarshalerOptions.#ctor(Vanara.Marshaler.StringEncoding,Vanara.Marshaler.Bitness)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Marshaler.MarshalerOptions"/> class.</summary>
            <param name="encoding">The string encoding.</param>
            <param name="bitness">The bitness used to process marshaled pointers and system-specific types.</param>
        </member>
        <member name="M:Vanara.Marshaler.MarshalerOptions.#ctor(Vanara.Marshaler.Bitness,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Marshaler.MarshalerOptions"/> class.</summary>
            <param name="bitness">The bitness used to process marshaled pointers and system-specific types.</param>
            <param name="charSet">The character set.</param>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.Bitness">
            <summary>Gets or sets the bitness used to process marshaled pointers and system-specific types.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.MemoryMethods">
            <summary>Gets or sets the memory methods used to allocate and free memory.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.NullAsPointer">
            <summary>Gets or sets a value indicating whether to marshal <see langword="null"/> as <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.StringEncoding">
            <summary>Gets or sets the character encoding used to process marshaled strings.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.StringListPackMethod">
            <summary>Gets or sets the string list packing method.</summary>
        </member>
        <member name="P:Vanara.Marshaler.MarshalerOptions.Encoding">
            <summary>Gets or sets the character encoding used to process marshaled strings.</summary>
        </member>
        <member name="T:Vanara.RunTimeLib.ConstantConversionExtensions">
            <summary>Extension methods for CRT enumerations to convert to .NET enumerations.</summary>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileAccess(Vanara.RunTimeLib.FileAttributeConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FileAttributeConstant"/> value to <see cref="T:System.IO.FileAccess"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileAccess(Vanara.RunTimeLib.FilePermissionConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FilePermissionConstant"/> value to <see cref="T:System.IO.FileAccess"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileAttributes(Vanara.RunTimeLib.FileAttributeConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FileAttributeConstant"/> value to <see cref="T:System.IO.FileAttributes"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileMode(Vanara.RunTimeLib.FileOpConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FileOpConstant"/> value to <see cref="T:System.IO.FileMode"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileOptions(Vanara.RunTimeLib.FileOpConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FileOpConstant"/> value to <see cref="T:System.IO.FileOptions"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileShare(Vanara.RunTimeLib.FileAttributeConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FileAttributeConstant"/> value to <see cref="T:System.IO.FileShare"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Vanara.RunTimeLib.ConstantConversionExtensions.ToFileShare(Vanara.RunTimeLib.FilePermissionConstant)">
            <summary>Converts a <see cref="T:Vanara.RunTimeLib.FilePermissionConstant"/> value to <see cref="T:System.IO.FileShare"/>.</summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Vanara.RunTimeLib.FileOpConstant">
            <summary>
            The integer expression formed from one or more of these constants determines the type of reading or writing operations permitted. It
            is formed by combining one or more constants with a translation-mode constant.
            </summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_RDONLY">
            <summary>Opens file for reading only; if this flag is given, neither _O_RDWR nor _O_WRONLY can be given.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_WRONLY">
            <summary>Opens file for writing only; if this flag is given, neither _O_RDONLY nor _O_RDWR can be given.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_RDWR">
            <summary>Opens file for both reading and writing; if this flag is given, neither _O_RDONLY nor _O_WRONLY can be given.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_APPEND">
            <summary>Repositions the file pointer to the end of the file before every write operation.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_CREAT">
            <summary>Creates and opens a new file for writing; this has no effect if the file specified by filename exists.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_TRUNC">
            <summary>
            Opens and truncates an existing file to zero length; the file must have write permission. The contents of the file are
            destroyed. If this flag is given, you cannot specify _O_RDONLY.
            </summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_EXCL">
            <summary>Returns an error value if the file specified by filename exists. Only applies when used with _O_CREAT.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_TEXT">
            <summary>Opens a file in text (translated) mode. (For more information, see Text and Binary Mode File I/O and fopen.)</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_BINARY">
            <summary>Opens the file in binary (untranslated) mode. (See fopen for a description of binary mode.)</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_WTEXT">
            <summary>Opens a file in Unicode mode.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_U16TEXT">
            <summary>Opens a file in Unicode UTF-16 mode.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_U8TEXT">
            <summary>Opens a file in Unicode UTF-8 mode.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_RAW">
            <summary></summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_NOINHERIT">
            <summary>Prevents creation of a shared file descriptor.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_TEMPORARY">
            <summary>
            Creates a file as temporary; the file is deleted when the last file descriptor is closed. The pmode argument is required when
            _O_CREAT is specified.
            </summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_SHORT_LIVED">
            <summary>
            Creates a file as temporary and if possible does not flush to disk. The pmode argument is required when _O_CREAT is specified.
            </summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_OBTAIN_DIR">
            <summary>get information about a directory</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_SEQUENTIAL">
            <summary>Specifies that caching is optimized for, but not restricted to, sequential access from disk.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileOpConstant._O_RANDOM">
            <summary>Specifies that caching is optimized for, but not restricted to, random access from disk.</summary>
        </member>
        <member name="T:Vanara.RunTimeLib.FileAttributeConstant">
            <summary>These constants specify the current attributes of the file or directory specified by the function.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_NORMAL">
            <summary>Normal. File can be read or written to without restriction.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_RDONLY">
            <summary>Read-only. File cannot be opened for writing, and a file with the same name cannot be created.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_HIDDEN">
            <summary>
            Hidden file. Not normally seen with the DIR command, unless the /AH option is used. Returns information about normal files as
            well as files with this attribute.
            </summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_SYSTEM">
            <summary>System file. Not normally seen with the DIR command, unless the /AS option is used.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_SUBDIR">
            <summary>Subdirectory.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FileAttributeConstant._A_ARCH">
            <summary>Archive. Set whenever the file is changed, and cleared by the BACKUP command.</summary>
        </member>
        <member name="T:Vanara.RunTimeLib.FilePermissionConstant">
            <summary>These constants are used to indicate file type in the st_mode field of the _stat structure.</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IFMT">
            <summary>File type mask</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IFDIR">
            <summary>Directory</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IFCHR">
            <summary>Character special</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IFIFO">
            <summary>Pipe</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IFREG">
            <summary>Regular</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IREAD">
            <summary>Read permission, owner</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IWRITE">
            <summary>Write permission, owner</summary>
        </member>
        <member name="F:Vanara.RunTimeLib.FilePermissionConstant._S_IEXEC">
            <summary>Execute/search permission, owner</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
            <remarks>
            To override a method that has a parameter annotated with this attribute, use the <c>?</c> operator. For example: <c>override
            ISet&lt;Enum&gt; ReadJson(JsonReader reader, Type objectType, ISet&lt;Enum&gt;? existingValue, bool hasExistingValue, JsonSerializer
            serializer)</c>. For more information, see Nullable static analysis in the C# guide.
            </remarks>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
            <remarks>For more information, see Nullable static analysis in the C# guide.</remarks>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be <see langword="null"/> even if the corresponding type disallows it.</summary>
            <remarks>For more information, see Nullable static analysis in the C# guide.</remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute" /> class.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns ReturnValue, the parameter may be null even if the corresponding type disallows it.</summary>
            <remarks>For more information, see Nullable static analysis in the C# guide.</remarks>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
            <value>The return value condition. If the method returns this value, the associated parameter may be <see langword="null"/>.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it. Specifies that an input argument was not null when the
            call returns.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute" /> class.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns ReturnValue, the parameter will not be null even if the corresponding type allows it.</summary>
            <remarks>For more information, see Nullable static analysis in the C# guide.</remarks>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
            <value>The return value condition. If the method returns this value, the associated parameter will not be <see langword="null"/>.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
            <summary>
            Specifies the types of members that are dynamically accessed. This enumeration has a System.FlagsAttribute attribute that allows a
            bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>Specifies all members.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>Specifies no members.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>Specifies the default, parameterless public constructor.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>Specifies all public constructors.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>Specifies all non-public constructors.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>Specifies all public methods.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>Specifies all non-public methods.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>Specifies all public fields.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>Specifies all non-public fields.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>Specifies all public nested types.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>Specifies all non-public nested types.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>Specifies all public properties.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>Specifies all non-public properties.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>Specifies all public events.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>Specifies all non-public events.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>Specifies all interfaces implemented by the type.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have values that aren't <see langword="null"/>.
            </summary>
            <remarks>For more information, see Nullable static analysis in the C# guide.</remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced statically, for example, through <see cref="N:System.Reflection"/>.
            </summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class with the specified message.</summary>
            <param name="message">A message that contains information about the usage of unreferenced code.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>Gets a message that contains information about the usage of unreferenced code.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method, why it requires unreferenced code, and what options a
            consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString() and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.</summary>
        </member>
        <member name="T:System.Index">
             <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
             <remarks>
             Index is used by the C# compiler to support the new index syntax
             <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
             </code>
             </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at
            beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values. we
            don't validate either the returned offset is greater than the input length. It is expected Index will be used with collections
            which always have non negative length/count. If the returned offset is negative and then used to index a collection will get out
            of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="T:System.Range">
             <summary>Represent a range has start and end indexes.</summary>
             <remarks>
             Range is used by the C# compiler to support the range syntax.
             <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
             </code>
             </remarks>
             <remarks>Construct a Range object using the start and end indexes.</remarks>
             <param name="start">Represent the inclusive start index of the range.</param>
             <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
             <summary>Represent a range has start and end indexes.</summary>
             <remarks>
             Range is used by the C# compiler to support the range syntax.
             <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
             </code>
             </remarks>
             <remarks>Construct a Range object using the start and end indexes.</remarks>
             <param name="start">Represent the inclusive start index of the range.</param>
             <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values. It is expected Range will be used
            with collections which always have non negative length/count. We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties,
            express or implied, with respect to the information provided here.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.OSPlatformAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.OSPlatformAttribute"/> class.</summary>
            <param name="platformName">Name of the platform.</param>
        </member>
        <member name="P:System.Runtime.Versioning.OSPlatformAttribute.PlatformName">
            <summary>Gets the name of the platform.</summary>
            <value>The name of the platform.</value>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
            Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties,
            express or implied, with respect to the information provided here.
            </summary>
            <remarks>
            Callers can apply a SupportedOSPlatformAttribute or use guards to prevent calls to APIs on unsupported operating systems. A given
            platform should only be specified once.
            </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute"/> class.</summary>
            <param name="platformName">Name of the platform.</param>
        </member>
    </members>
</doc>
